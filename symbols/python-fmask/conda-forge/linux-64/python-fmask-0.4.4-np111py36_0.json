{
 "errors": {
  "fmask.valueindexes": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "fmask.__version__",
  "fmask.config",
  "fmask.config.AngleConstantInfo",
  "fmask.config.AnglesFileInfo",
  "fmask.config.AnglesInfo",
  "fmask.config.BAND_BLUE",
  "fmask.config.BAND_CIRRUS",
  "fmask.config.BAND_GREEN",
  "fmask.config.BAND_NIR",
  "fmask.config.BAND_RED",
  "fmask.config.BAND_SWIR1",
  "fmask.config.BAND_SWIR2",
  "fmask.config.FMASK_LANDSAT47",
  "fmask.config.FMASK_LANDSAT8",
  "fmask.config.FMASK_SENTINEL2",
  "fmask.config.FmaskConfig",
  "fmask.config.FmaskFilenames",
  "fmask.config.LANDSAT_K1_CONST",
  "fmask.config.LANDSAT_K1_DICT",
  "fmask.config.LANDSAT_K2_CONST",
  "fmask.config.LANDSAT_K2_DICT",
  "fmask.config.LANDSAT_RADIANCE_ADD",
  "fmask.config.LANDSAT_RADIANCE_MULT",
  "fmask.config.LANDSAT_TH_BAND_NUM_DICT",
  "fmask.config.ThermalFileInfo",
  "fmask.config.readAnglesFromLandsatMTL",
  "fmask.config.readMTLFile",
  "fmask.config.readThermalInfoFromLandsatMTL",
  "fmask.fillminima",
  "fmask.fillminima.fillMinima",
  "fmask.fmask",
  "fmask.fmask.B4_SCALE",
  "fmask.fmask.BT_HISTSIZE",
  "fmask.fmask.BT_OFFSET",
  "fmask.fmask.BYTES_PER_VOXEL",
  "fmask.fmask.BYTE_MAX",
  "fmask.fmask.BYTE_MIN",
  "fmask.fmask.CLOUD_HEIGHT_SCALE",
  "fmask.fmask.METRES_PER_KM",
  "fmask.fmask.OUTCODE_CLEAR",
  "fmask.fmask.OUTCODE_CLOUD",
  "fmask.fmask.OUTCODE_NULL",
  "fmask.fmask.OUTCODE_SHADOW",
  "fmask.fmask.OUTCODE_SNOW",
  "fmask.fmask.OUTCODE_WATER",
  "fmask.fmask.PROB_SCALE",
  "fmask.fmask.RIOS_WINDOW_SIZE",
  "fmask.fmask.SATURATION_BLUE",
  "fmask.fmask.SATURATION_GREEN",
  "fmask.fmask.SATURATION_RED",
  "fmask.fmask.SOLIDCLOUD_MAXMEM",
  "fmask.fmask.accumHist",
  "fmask.fmask.calcBTthresholds",
  "fmask.fmask.cloudFinalPass",
  "fmask.fmask.cloudShapeFunc",
  "fmask.fmask.clumpClouds",
  "fmask.fmask.doCloudLayerFinalPass",
  "fmask.fmask.doFmask",
  "fmask.fmask.doPotentialCloudFirstPass",
  "fmask.fmask.doPotentialCloudSecondPass",
  "fmask.fmask.doPotentialShadows",
  "fmask.fmask.finalizeAll",
  "fmask.fmask.getIntersectionCoords",
  "fmask.fmask.make3Dclouds",
  "fmask.fmask.makeBufferKernel",
  "fmask.fmask.makeCloudShadowShapes",
  "fmask.fmask.maskAndBuffer",
  "fmask.fmask.matchOneShadow",
  "fmask.fmask.matchShadows",
  "fmask.fmask.potentialCloudFirstPass",
  "fmask.fmask.potentialCloudSecondPass",
  "fmask.fmask.scoreatpcnt",
  "fmask.fmaskerrors",
  "fmask.fmaskerrors.FmaskException",
  "fmask.fmaskerrors.FmaskFileError",
  "fmask.fmaskerrors.FmaskNotSupportedError",
  "fmask.fmaskerrors.FmaskParameterError",
  "fmask.fmaskerrors.Sen2MetaError",
  "fmask.landsatTOA",
  "fmask.landsatTOA.BAND_NUM_DICT",
  "fmask.landsatTOA.ESUN_LOOKUP",
  "fmask.landsatTOA.LANDSAT4_ESUN",
  "fmask.landsatTOA.LANDSAT5_ESUN",
  "fmask.landsatTOA.LANDSAT7_ESUN",
  "fmask.landsatTOA.LANDSAT8_ESUN",
  "fmask.landsatTOA.RADIANCE_ADD",
  "fmask.landsatTOA.RADIANCE_MULT",
  "fmask.landsatTOA.cmds",
  "fmask.landsatTOA.earthSunDistance",
  "fmask.landsatTOA.makeTOAReflectance",
  "fmask.landsatTOA.readGainsOffsets",
  "fmask.landsatTOA.riosTOA",
  "fmask.landsatangles",
  "fmask.landsatangles.bilinearInterp",
  "fmask.landsatangles.findCorners",
  "fmask.landsatangles.findImgCorners",
  "fmask.landsatangles.findNadirLine",
  "fmask.landsatangles.getCtrLatLong",
  "fmask.landsatangles.localRadius",
  "fmask.landsatangles.makeAngles",
  "fmask.landsatangles.satAzLeftRight",
  "fmask.landsatangles.sunAnglesForExtent",
  "fmask.landsatangles.sunAnglesForPoints",
  "fmask.saturationcheck",
  "fmask.saturationcheck.makeSaturationMask",
  "fmask.saturationcheck.riosSaturationMask",
  "fmask.sen2meta",
  "fmask.sen2meta.Sen2TileMeta",
  "fmask.valueindexes",
  "fmask.zerocheck",
  "fmask.zerocheck.isBandAllZeroes",
  "fmask.zerocheck.riosAllZeroes"
 ]
}