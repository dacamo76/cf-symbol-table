{
 "errors": {
  "pyaxiom.tests.test_timeseries": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/unittest/loader.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 311, in _complete_python",
    "    completion_names += self._complete_inherited(is_function=False)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 424, in _complete_inherited",
    "    next(filters)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 206, in get_filters",
    "    metaclasses = self.get_metaclasses()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 394, in get_metaclasses",
    "    for value in lazy_base.infer():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py\", line 45, in get_filters",
    "    stub_filters = self._get_stub_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py\", line 40, in _get_stub_filters",
    "    )] + list(self.iter_star_filters())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  }
 },
 "symbols": [
  "pyaxiom.NullHandler",
  "pyaxiom.__version__",
  "pyaxiom.logger",
  "pyaxiom.netcdf",
  "pyaxiom.netcdf.CFDataset",
  "pyaxiom.netcdf.EnhancedDataset",
  "pyaxiom.netcdf.EnhancedMFDataset",
  "pyaxiom.netcdf.cf",
  "pyaxiom.netcdf.cf.BasicNumpyEncoder",
  "pyaxiom.netcdf.cf.CFDataset",
  "pyaxiom.netcdf.cf.CFDataset.default_fill_value",
  "pyaxiom.netcdf.cf.CFDataset.default_time_unit",
  "pyaxiom.netcdf.cf.EnhancedDataset",
  "pyaxiom.netcdf.cf.all_subclasses",
  "pyaxiom.netcdf.cf.logger",
  "pyaxiom.netcdf.clone",
  "pyaxiom.netcdf.clone.clone",
  "pyaxiom.netcdf.dataset",
  "pyaxiom.netcdf.dataset.EnhancedDataset",
  "pyaxiom.netcdf.dataset.EnhancedMFDataset",
  "pyaxiom.netcdf.grids",
  "pyaxiom.netcdf.grids.Collection",
  "pyaxiom.netcdf.grids.binner",
  "pyaxiom.netcdf.grids.binner.Collection",
  "pyaxiom.netcdf.grids.binner.ch",
  "pyaxiom.netcdf.grids.binner.formatter",
  "pyaxiom.netcdf.grids.binner.logger",
  "pyaxiom.netcdf.grids.binner.main",
  "pyaxiom.netcdf.grids.binner.run",
  "pyaxiom.netcdf.grids.collection",
  "pyaxiom.netcdf.grids.collection.Collection",
  "pyaxiom.netcdf.grids.collection.DotDict",
  "pyaxiom.netcdf.grids.collection.logger",
  "pyaxiom.netcdf.sensors",
  "pyaxiom.netcdf.sensors.IncompleteProfile",
  "pyaxiom.netcdf.sensors.Profile",
  "pyaxiom.netcdf.sensors.TimeSeries",
  "pyaxiom.netcdf.sensors.dsg",
  "pyaxiom.netcdf.sensors.dsg.ContiguousRaggedTrajectory",
  "pyaxiom.netcdf.sensors.dsg.IncompleteMultidimensionalProfile",
  "pyaxiom.netcdf.sensors.dsg.IncompleteMultidimensionalTrajectory",
  "pyaxiom.netcdf.sensors.dsg.IndexedRaggedTrajectory",
  "pyaxiom.netcdf.sensors.dsg.OrthogonalMultidimensionalProfile",
  "pyaxiom.netcdf.sensors.dsg.profile",
  "pyaxiom.netcdf.sensors.dsg.profile.im",
  "pyaxiom.netcdf.sensors.dsg.profile.im.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.profile.im.IncompleteMultidimensionalProfile",
  "pyaxiom.netcdf.sensors.dsg.profile.im.cf_safe_name",
  "pyaxiom.netcdf.sensors.dsg.profile.im.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.profile.im.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.profile.im.dict_update",
  "pyaxiom.netcdf.sensors.dsg.profile.im.get_dtype",
  "pyaxiom.netcdf.sensors.dsg.profile.im.logger",
  "pyaxiom.netcdf.sensors.dsg.profile.im.normalize_array",
  "pyaxiom.netcdf.sensors.dsg.profile.im.unique_justseen",
  "pyaxiom.netcdf.sensors.dsg.profile.om",
  "pyaxiom.netcdf.sensors.dsg.profile.om.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.profile.om.OrthogonalMultidimensionalProfile",
  "pyaxiom.netcdf.sensors.dsg.profile.om.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.profile.om.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.profile.om.logger",
  "pyaxiom.netcdf.sensors.dsg.profile.om.normalize_array",
  "pyaxiom.netcdf.sensors.dsg.profile.om.unique_justseen",
  "pyaxiom.netcdf.sensors.dsg.trajectory",
  "pyaxiom.netcdf.sensors.dsg.trajectory.cr",
  "pyaxiom.netcdf.sensors.dsg.trajectory.cr.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.trajectory.cr.ContiguousRaggedTrajectory",
  "pyaxiom.netcdf.sensors.dsg.trajectory.cr.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.trajectory.cr.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.IncompleteMultidimensionalTrajectory",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.cf_safe_name",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.dict_update",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.get_dtype",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.logger",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.normalize_array",
  "pyaxiom.netcdf.sensors.dsg.trajectory.im.unique_justseen",
  "pyaxiom.netcdf.sensors.dsg.trajectory.ir",
  "pyaxiom.netcdf.sensors.dsg.trajectory.ir.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.trajectory.ir.IndexedRaggedTrajectory",
  "pyaxiom.netcdf.sensors.dsg.trajectory.ir.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.trajectory.ir.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.CFDataset",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.ContiguousRaggedTrajectoryProfile",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.default_fill_value",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.default_time_unit",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.logger",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.normalize_array",
  "pyaxiom.netcdf.sensors.dsg.trajectoryProfile.cr.unique_justseen",
  "pyaxiom.netcdf.sensors.get_dataframe_from_variable",
  "pyaxiom.netcdf.sensors.profile",
  "pyaxiom.netcdf.sensors.profile.IncompleteProfile",
  "pyaxiom.netcdf.sensors.profile.Profile",
  "pyaxiom.netcdf.sensors.profile.logger",
  "pyaxiom.netcdf.sensors.timeseries",
  "pyaxiom.netcdf.sensors.timeseries.EnhancedDataset",
  "pyaxiom.netcdf.sensors.timeseries.IoosUrn",
  "pyaxiom.netcdf.sensors.timeseries.TimeSeries",
  "pyaxiom.netcdf.sensors.timeseries.get_dataframe_from_variable",
  "pyaxiom.netcdf.sensors.timeseries.get_type",
  "pyaxiom.netcdf.sensors.timeseries.logger",
  "pyaxiom.netcdf.sensors.timeseries.urnify",
  "pyaxiom.netcdf.utils",
  "pyaxiom.netcdf.utils.cf_safe_name",
  "pyaxiom.netcdf.utils.isstr",
  "pyaxiom.tests",
  "pyaxiom.tests.test_enhanced_dataset",
  "pyaxiom.tests.test_enhanced_dataset.EnhancedDataset",
  "pyaxiom.tests.test_enhanced_dataset.EnhancedDatasetTests",
  "pyaxiom.tests.test_enhanced_dataset.EnhancedMFDataset",
  "pyaxiom.tests.test_enhanced_dataset.EnhancedMFDatasetTests",
  "pyaxiom.tests.test_enhanced_dataset.logger",
  "pyaxiom.tests.test_netcdf_collection",
  "pyaxiom.tests.test_netcdf_collection.Collection",
  "pyaxiom.tests.test_netcdf_collection.NetcdfCollectionTestFromDirectory",
  "pyaxiom.tests.test_netcdf_collection.NetcdfCollectionTestFromGlob",
  "pyaxiom.tests.test_netcdf_collection.NetcdfCollectionTestFromNcml",
  "pyaxiom.tests.test_netcdf_collection.NetcdfCollectionTestFromNestedGlobAndNcml",
  "pyaxiom.tests.test_netcdf_collection.logger",
  "pyaxiom.tests.test_timeseries",
  "pyaxiom.tests.test_urn",
  "pyaxiom.tests.test_urn.IoosUrn",
  "pyaxiom.tests.test_urn.IoosUrnTests",
  "pyaxiom.tests.test_urn.TestUrnUtils",
  "pyaxiom.tests.test_urn.TimeSeries",
  "pyaxiom.tests.test_urn.dictify_urn",
  "pyaxiom.tests.test_urn.logger",
  "pyaxiom.tests.test_urn.urnify",
  "pyaxiom.tests.test_utils",
  "pyaxiom.tests.test_utils.EnhancedDataset",
  "pyaxiom.tests.test_utils.TestNetcdfUtils",
  "pyaxiom.tests.test_utils.TestUtils",
  "pyaxiom.tests.test_utils.cf_safe_name",
  "pyaxiom.tests.test_utils.logger",
  "pyaxiom.urn",
  "pyaxiom.urn.IoosUrn",
  "pyaxiom.urn.logger",
  "pyaxiom.utils",
  "pyaxiom.utils.BasicNumpyEncoder",
  "pyaxiom.utils.DotDict",
  "pyaxiom.utils.IoosUrn",
  "pyaxiom.utils.NumpyEncoder",
  "pyaxiom.utils.all_subclasses",
  "pyaxiom.utils.dict_update",
  "pyaxiom.utils.dictify_urn",
  "pyaxiom.utils.get_dtype",
  "pyaxiom.utils.logger",
  "pyaxiom.utils.normalize_array",
  "pyaxiom.utils.unique_justseen",
  "pyaxiom.utils.urnify"
 ]
}