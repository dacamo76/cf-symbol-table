{
 "errors": {},
 "symbols": [
  "mlxtend.__version__",
  "mlxtend._base",
  "mlxtend._base._BaseModel",
  "mlxtend._base._Classifier",
  "mlxtend._base._Cluster",
  "mlxtend._base._IterativeModel",
  "mlxtend._base._MultiClass",
  "mlxtend._base._MultiLayer",
  "mlxtend._base._Regressor",
  "mlxtend._base.__all__",
  "mlxtend._base._base_model",
  "mlxtend._base._base_model._BaseModel",
  "mlxtend._base._classifier",
  "mlxtend._base._classifier._Classifier",
  "mlxtend._base._cluster",
  "mlxtend._base._cluster._Cluster",
  "mlxtend._base._iterative_model",
  "mlxtend._base._iterative_model._IterativeModel",
  "mlxtend._base._multiclass",
  "mlxtend._base._multiclass._MultiClass",
  "mlxtend._base._multilayer",
  "mlxtend._base._multilayer._MultiLayer",
  "mlxtend._base._regressor",
  "mlxtend._base._regressor._Regressor",
  "mlxtend.classifier",
  "mlxtend.classifier.Adaline",
  "mlxtend.classifier.EnsembleVoteClassifier",
  "mlxtend.classifier.LogisticRegression",
  "mlxtend.classifier.MultiLayerPerceptron",
  "mlxtend.classifier.Perceptron",
  "mlxtend.classifier.SoftmaxRegression",
  "mlxtend.classifier.StackingCVClassifier",
  "mlxtend.classifier.StackingClassifier",
  "mlxtend.classifier.__all__",
  "mlxtend.classifier.adaline",
  "mlxtend.classifier.adaline.Adaline",
  "mlxtend.classifier.ensemble_vote",
  "mlxtend.classifier.ensemble_vote.EnsembleVoteClassifier",
  "mlxtend.classifier.logistic_regression",
  "mlxtend.classifier.logistic_regression.LogisticRegression",
  "mlxtend.classifier.multilayerperceptron",
  "mlxtend.classifier.multilayerperceptron.MultiLayerPerceptron",
  "mlxtend.classifier.perceptron",
  "mlxtend.classifier.perceptron.Perceptron",
  "mlxtend.classifier.softmax_regression",
  "mlxtend.classifier.softmax_regression.SoftmaxRegression",
  "mlxtend.classifier.stacking_classification",
  "mlxtend.classifier.stacking_classification.StackingClassifier",
  "mlxtend.classifier.stacking_cv_classification",
  "mlxtend.classifier.stacking_cv_classification.StackingCVClassifier",
  "mlxtend.cluster",
  "mlxtend.cluster.Kmeans",
  "mlxtend.cluster.__all__",
  "mlxtend.cluster.kmeans",
  "mlxtend.cluster.kmeans.Kmeans",
  "mlxtend.data",
  "mlxtend.data.__all__",
  "mlxtend.data.autompg",
  "mlxtend.data.autompg.DATA_PATH",
  "mlxtend.data.autompg.autompg_data",
  "mlxtend.data.autompg.this_dir",
  "mlxtend.data.autompg.this_filename",
  "mlxtend.data.autompg_data",
  "mlxtend.data.boston_housing",
  "mlxtend.data.boston_housing.DATA_PATH",
  "mlxtend.data.boston_housing.boston_housing_data",
  "mlxtend.data.boston_housing.this_dir",
  "mlxtend.data.boston_housing.this_filename",
  "mlxtend.data.boston_housing_data",
  "mlxtend.data.iris",
  "mlxtend.data.iris.DATA_PATH",
  "mlxtend.data.iris.iris_data",
  "mlxtend.data.iris.this_dir",
  "mlxtend.data.iris.this_filename",
  "mlxtend.data.iris_data",
  "mlxtend.data.loadlocal_mnist",
  "mlxtend.data.local_mnist",
  "mlxtend.data.local_mnist.loadlocal_mnist",
  "mlxtend.data.make_multiplexer_dataset",
  "mlxtend.data.mnist",
  "mlxtend.data.mnist.DATA_PATH",
  "mlxtend.data.mnist.mnist_data",
  "mlxtend.data.mnist.this_dir",
  "mlxtend.data.mnist.this_filename",
  "mlxtend.data.mnist_data",
  "mlxtend.data.multiplexer",
  "mlxtend.data.multiplexer.make_multiplexer_dataset",
  "mlxtend.data.three_blobs",
  "mlxtend.data.three_blobs.DATA_PATH",
  "mlxtend.data.three_blobs.this_dir",
  "mlxtend.data.three_blobs.this_filename",
  "mlxtend.data.three_blobs.three_blobs_data",
  "mlxtend.data.three_blobs_data",
  "mlxtend.data.wine",
  "mlxtend.data.wine.DATA_PATH",
  "mlxtend.data.wine.this_dir",
  "mlxtend.data.wine.this_filename",
  "mlxtend.data.wine.wine_data",
  "mlxtend.data.wine_data",
  "mlxtend.evaluate",
  "mlxtend.evaluate.BootstrapOutOfBag",
  "mlxtend.evaluate.__all__",
  "mlxtend.evaluate.bootstrap",
  "mlxtend.evaluate.bootstrap.bootstrap",
  "mlxtend.evaluate.bootstrap_outofbag.BootstrapOutOfBag",
  "mlxtend.evaluate.bootstrap_point632._check_arrays",
  "mlxtend.evaluate.bootstrap_point632.bootstrap_point632_score",
  "mlxtend.evaluate.cochrans_q",
  "mlxtend.evaluate.cochrans_q.cochrans_q",
  "mlxtend.evaluate.confusion_matrix",
  "mlxtend.evaluate.confusion_matrix.confusion_matrix",
  "mlxtend.evaluate.lift_score",
  "mlxtend.evaluate.lift_score.lift_score",
  "mlxtend.evaluate.lift_score.support",
  "mlxtend.evaluate.mcnemar",
  "mlxtend.evaluate.mcnemar.mcnemar",
  "mlxtend.evaluate.paired_ttest_5x2cv",
  "mlxtend.evaluate.paired_ttest_kfold_cv",
  "mlxtend.evaluate.paired_ttest_resampled",
  "mlxtend.evaluate.permutation",
  "mlxtend.evaluate.permutation.nottest",
  "mlxtend.evaluate.permutation.permutation_test",
  "mlxtend.evaluate.permutation_test",
  "mlxtend.evaluate.scoring",
  "mlxtend.evaluate.scoring._accuracy",
  "mlxtend.evaluate.scoring._error",
  "mlxtend.evaluate.scoring._macro",
  "mlxtend.evaluate.scoring.confusion_matrix",
  "mlxtend.evaluate.scoring.scoring",
  "mlxtend.evaluate.ttest",
  "mlxtend.evaluate.ttest.paired_ttest_5x2cv",
  "mlxtend.evaluate.ttest.paired_ttest_kfold_cv",
  "mlxtend.evaluate.ttest.paired_ttest_resampled",
  "mlxtend.externals",
  "mlxtend.externals.name_estimators",
  "mlxtend.externals.name_estimators._name_estimators",
  "mlxtend.externals.six",
  "mlxtend.externals.six.BytesIO",
  "mlxtend.externals.six.Iterator",
  "mlxtend.externals.six.MAXSIZE",
  "mlxtend.externals.six.Module_six_moves_urllib",
  "mlxtend.externals.six.MovedAttribute",
  "mlxtend.externals.six.MovedModule",
  "mlxtend.externals.six.PY2",
  "mlxtend.externals.six.PY3",
  "mlxtend.externals.six.PY34",
  "mlxtend.externals.six.StringIO",
  "mlxtend.externals.six._LazyDescr",
  "mlxtend.externals.six._LazyModule",
  "mlxtend.externals.six._MovedItems",
  "mlxtend.externals.six._SixMetaPathImporter",
  "mlxtend.externals.six.__author__",
  "mlxtend.externals.six.__package__",
  "mlxtend.externals.six.__path__",
  "mlxtend.externals.six.__version__",
  "mlxtend.externals.six._add_doc",
  "mlxtend.externals.six._assertCountEqual",
  "mlxtend.externals.six._assertRaisesRegex",
  "mlxtend.externals.six._assertRegex",
  "mlxtend.externals.six._func_closure",
  "mlxtend.externals.six._func_code",
  "mlxtend.externals.six._func_defaults",
  "mlxtend.externals.six._func_globals",
  "mlxtend.externals.six._import_module",
  "mlxtend.externals.six._importer",
  "mlxtend.externals.six._meth_func",
  "mlxtend.externals.six._meth_self",
  "mlxtend.externals.six._moved_attributes",
  "mlxtend.externals.six._print",
  "mlxtend.externals.six._urllib_error_moved_attributes",
  "mlxtend.externals.six._urllib_parse_moved_attributes",
  "mlxtend.externals.six._urllib_request_moved_attributes",
  "mlxtend.externals.six._urllib_response_moved_attributes",
  "mlxtend.externals.six._urllib_robotparser_moved_attributes",
  "mlxtend.externals.six.add_metaclass",
  "mlxtend.externals.six.add_move",
  "mlxtend.externals.six.advance_iterator",
  "mlxtend.externals.six.assertCountEqual",
  "mlxtend.externals.six.assertRaisesRegex",
  "mlxtend.externals.six.assertRegex",
  "mlxtend.externals.six.b",
  "mlxtend.externals.six.callable",
  "mlxtend.externals.six.class_types",
  "mlxtend.externals.six.create_bound_method",
  "mlxtend.externals.six.create_unbound_method",
  "mlxtend.externals.six.exec_",
  "mlxtend.externals.six.get_function_closure",
  "mlxtend.externals.six.get_function_code",
  "mlxtend.externals.six.get_function_defaults",
  "mlxtend.externals.six.get_function_globals",
  "mlxtend.externals.six.get_method_function",
  "mlxtend.externals.six.get_method_self",
  "mlxtend.externals.six.get_unbound_function",
  "mlxtend.externals.six.indexbytes",
  "mlxtend.externals.six.int2byte",
  "mlxtend.externals.six.integer_types",
  "mlxtend.externals.six.iterbytes",
  "mlxtend.externals.six.iteritems",
  "mlxtend.externals.six.iterkeys",
  "mlxtend.externals.six.iterlists",
  "mlxtend.externals.six.itervalues",
  "mlxtend.externals.six.moves",
  "mlxtend.externals.six.next",
  "mlxtend.externals.six.print_",
  "mlxtend.externals.six.python_2_unicode_compatible",
  "mlxtend.externals.six.raise_from",
  "mlxtend.externals.six.remove_move",
  "mlxtend.externals.six.reraise",
  "mlxtend.externals.six.string_types",
  "mlxtend.externals.six.text_type",
  "mlxtend.externals.six.u",
  "mlxtend.externals.six.viewitems",
  "mlxtend.externals.six.viewkeys",
  "mlxtend.externals.six.viewvalues",
  "mlxtend.externals.six.with_metaclass",
  "mlxtend.externals.six.wraps",
  "mlxtend.feature_extraction",
  "mlxtend.feature_extraction.LinearDiscriminantAnalysis",
  "mlxtend.feature_extraction.PrincipalComponentAnalysis",
  "mlxtend.feature_extraction.RBFKernelPCA",
  "mlxtend.feature_extraction.__all__",
  "mlxtend.feature_extraction.base",
  "mlxtend.feature_extraction.base._BaseFeatureExtractor",
  "mlxtend.feature_extraction.linear_discriminant_analysis",
  "mlxtend.feature_extraction.linear_discriminant_analysis.LinearDiscriminantAnalysis",
  "mlxtend.feature_extraction.principal_component_analysis",
  "mlxtend.feature_extraction.principal_component_analysis.PrincipalComponentAnalysis",
  "mlxtend.feature_extraction.rbf_kernel_pca",
  "mlxtend.feature_extraction.rbf_kernel_pca.RBFKernelPCA",
  "mlxtend.feature_selection",
  "mlxtend.feature_selection.ColumnSelector",
  "mlxtend.feature_selection.ExhaustiveFeatureSelector",
  "mlxtend.feature_selection.SequentialFeatureSelector",
  "mlxtend.feature_selection.__all__",
  "mlxtend.feature_selection.column_selector",
  "mlxtend.feature_selection.column_selector.ColumnSelector",
  "mlxtend.feature_selection.exhaustive_feature_selector",
  "mlxtend.feature_selection.exhaustive_feature_selector.ExhaustiveFeatureSelector",
  "mlxtend.feature_selection.exhaustive_feature_selector._calc_score",
  "mlxtend.feature_selection.sequential_feature_selector",
  "mlxtend.feature_selection.sequential_feature_selector.SequentialFeatureSelector",
  "mlxtend.feature_selection.sequential_feature_selector._calc_score",
  "mlxtend.file_io",
  "mlxtend.file_io.__all__",
  "mlxtend.file_io.find_filegroups",
  "mlxtend.file_io.find_filegroups.find_filegroups",
  "mlxtend.file_io.find_files",
  "mlxtend.file_io.find_files.find_files",
  "mlxtend.frequent_patterns",
  "mlxtend.frequent_patterns.__all__",
  "mlxtend.frequent_patterns.apriori",
  "mlxtend.frequent_patterns.apriori.apriori",
  "mlxtend.frequent_patterns.apriori.generate_new_combinations",
  "mlxtend.frequent_patterns.association_rules",
  "mlxtend.frequent_patterns.association_rules.association_rules",
  "mlxtend.math",
  "mlxtend.math.__all__",
  "mlxtend.math.counting",
  "mlxtend.math.counting.factorial",
  "mlxtend.math.counting.num_combinations",
  "mlxtend.math.counting.num_permutations",
  "mlxtend.math.factorial",
  "mlxtend.math.num_combinations",
  "mlxtend.math.num_permutations",
  "mlxtend.plotting",
  "mlxtend.plotting.__all__",
  "mlxtend.plotting.category_scatter",
  "mlxtend.plotting.checkerboard",
  "mlxtend.plotting.checkerboard.checkerboard_plot",
  "mlxtend.plotting.checkerboard_plot",
  "mlxtend.plotting.decision_regions",
  "mlxtend.plotting.decision_regions.get_feature_range_mask",
  "mlxtend.plotting.decision_regions.plot_decision_regions",
  "mlxtend.plotting.ecdf",
  "mlxtend.plotting.ecdf.ecdf",
  "mlxtend.plotting.enrichment_plot",
  "mlxtend.plotting.enrichment_plot.enrichment_plot",
  "mlxtend.plotting.learning_curves",
  "mlxtend.plotting.learning_curves.plot_learning_curves",
  "mlxtend.plotting.plot_confusion_matrix",
  "mlxtend.plotting.plot_confusion_matrix.plot_confusion_matrix",
  "mlxtend.plotting.plot_decision_regions",
  "mlxtend.plotting.plot_learning_curves",
  "mlxtend.plotting.plot_linear_regression",
  "mlxtend.plotting.plot_linear_regression.plot_linear_regression",
  "mlxtend.plotting.plot_sequential_feature_selection",
  "mlxtend.plotting.plot_sequential_feature_selection.plot_sequential_feature_selection",
  "mlxtend.plotting.remove_borders",
  "mlxtend.plotting.remove_chartjunk",
  "mlxtend.plotting.remove_chartjunk.remove_borders",
  "mlxtend.plotting.scatter",
  "mlxtend.plotting.scatter.category_scatter",
  "mlxtend.plotting.stacked_barplot",
  "mlxtend.plotting.stacked_barplot.stacked_barplot",
  "mlxtend.preprocessing",
  "mlxtend.preprocessing.CopyTransformer",
  "mlxtend.preprocessing.DenseTransformer",
  "mlxtend.preprocessing.MeanCenterer",
  "mlxtend.preprocessing.OnehotTransactions",
  "mlxtend.preprocessing.TransactionEncoder",
  "mlxtend.preprocessing.__all__",
  "mlxtend.preprocessing.copy_transformer",
  "mlxtend.preprocessing.copy_transformer.CopyTransformer",
  "mlxtend.preprocessing.dense_transformer",
  "mlxtend.preprocessing.dense_transformer.DenseTransformer",
  "mlxtend.preprocessing.mean_centering",
  "mlxtend.preprocessing.mean_centering.MeanCenterer",
  "mlxtend.preprocessing.minmax_scaling",
  "mlxtend.preprocessing.one_hot",
  "mlxtend.preprocessing.onehot",
  "mlxtend.preprocessing.onehot.OnehotTransactions",
  "mlxtend.preprocessing.onehot.one_hot",
  "mlxtend.preprocessing.scaling",
  "mlxtend.preprocessing.scaling.minmax_scaling",
  "mlxtend.preprocessing.scaling.standardize",
  "mlxtend.preprocessing.shuffle",
  "mlxtend.preprocessing.shuffle.check_Xy",
  "mlxtend.preprocessing.shuffle.shuffle_arrays_unison",
  "mlxtend.preprocessing.shuffle.shuffled_split",
  "mlxtend.preprocessing.shuffle_arrays_unison",
  "mlxtend.preprocessing.standardize",
  "mlxtend.preprocessing.transactionencoder",
  "mlxtend.preprocessing.transactionencoder.TransactionEncoder",
  "mlxtend.regressor",
  "mlxtend.regressor.LinearRegression",
  "mlxtend.regressor.StackingCVRegressor",
  "mlxtend.regressor.StackingRegressor",
  "mlxtend.regressor.__all__",
  "mlxtend.regressor.linear_regression",
  "mlxtend.regressor.linear_regression.LinearRegression",
  "mlxtend.regressor.stacking_cv_regression",
  "mlxtend.regressor.stacking_cv_regression.StackingCVRegressor",
  "mlxtend.regressor.stacking_regression",
  "mlxtend.regressor.stacking_regression.StackingRegressor",
  "mlxtend.text",
  "mlxtend.text.__all__",
  "mlxtend.text.generalize_names",
  "mlxtend.text.names",
  "mlxtend.text.names.generalize_names",
  "mlxtend.text.tokenizer",
  "mlxtend.text.tokenizer.tokenizer_emoticons",
  "mlxtend.text.tokenizer.tokenizer_words_and_emoticons",
  "mlxtend.text.tokenizer_emoticons",
  "mlxtend.text.tokenizer_words_and_emoticons",
  "mlxtend.utils",
  "mlxtend.utils.Counter",
  "mlxtend.utils.__all__",
  "mlxtend.utils.assert_raises",
  "mlxtend.utils.check_Xy",
  "mlxtend.utils.checking",
  "mlxtend.utils.checking.check_Xy",
  "mlxtend.utils.checking.format_kwarg_dictionaries",
  "mlxtend.utils.counter",
  "mlxtend.utils.counter.Counter",
  "mlxtend.utils.format_kwarg_dictionaries",
  "mlxtend.utils.testing",
  "mlxtend.utils.testing.assert_raises"
 ]
}