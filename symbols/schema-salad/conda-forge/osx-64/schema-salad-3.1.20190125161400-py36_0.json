{
 "errors": {
  "schema_salad.__main__": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "schema_salad.codegen_base": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "schema_salad.makedoc": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "schema_salad.python_codegen": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  }
 },
 "symbols": [
  "schema_salad.__author__",
  "schema_salad.__main__",
  "schema_salad._logger",
  "schema_salad.avro",
  "schema_salad.avro.__all__",
  "schema_salad.avro.schema",
  "schema_salad.avro.schema.ArraySchema",
  "schema_salad.avro.schema.AvroException",
  "schema_salad.avro.schema.EnumSchema",
  "schema_salad.avro.schema.FIELD_RESERVED_PROPS",
  "schema_salad.avro.schema.Field",
  "schema_salad.avro.schema.NAMED_TYPES",
  "schema_salad.avro.schema.Name",
  "schema_salad.avro.schema.Names",
  "schema_salad.avro.schema.PRIMITIVE_TYPES",
  "schema_salad.avro.schema.PrimitiveSchema",
  "schema_salad.avro.schema.RecordSchema",
  "schema_salad.avro.schema.SCHEMA_RESERVED_PROPS",
  "schema_salad.avro.schema.Schema",
  "schema_salad.avro.schema.UnionSchema",
  "schema_salad.avro.schema.VALID_FIELD_SORT_ORDERS",
  "schema_salad.avro.schema.VALID_TYPES",
  "schema_salad.avro.schema.get_other_props",
  "schema_salad.avro.schema.make_avsc_object",
  "schema_salad.codegen",
  "schema_salad.codegen.codegen",
  "schema_salad.codegen_base",
  "schema_salad.java_codegen",
  "schema_salad.java_codegen.JavaCodeGen",
  "schema_salad.jsonld_context",
  "schema_salad.jsonld_context._logger",
  "schema_salad.jsonld_context.fix_jsonld_ids",
  "schema_salad.jsonld_context.makerdf",
  "schema_salad.jsonld_context.process_type",
  "schema_salad.jsonld_context.salad_to_jsonld_context",
  "schema_salad.main",
  "schema_salad.main._logger",
  "schema_salad.main.chunk_messages",
  "schema_salad.main.main",
  "schema_salad.main.printrdf",
  "schema_salad.main.reformat_yaml_exception_message",
  "schema_salad.main.regex_chunk",
  "schema_salad.main.to_one_line_messages",
  "schema_salad.makedoc",
  "schema_salad.metaschema",
  "schema_salad.metaschema.AnyLoader",
  "schema_salad.metaschema.Any_type",
  "schema_salad.metaschema.ArraySchema",
  "schema_salad.metaschema.DocType",
  "schema_salad.metaschema.Documentation",
  "schema_salad.metaschema.Documented",
  "schema_salad.metaschema.EnumSchema",
  "schema_salad.metaschema.JsonldPredicate",
  "schema_salad.metaschema.LoadingOptions",
  "schema_salad.metaschema.NamedType",
  "schema_salad.metaschema.None_type",
  "schema_salad.metaschema.PrimitiveTypeLoader",
  "schema_salad.metaschema.RecordField",
  "schema_salad.metaschema.RecordSchema",
  "schema_salad.metaschema.SaladEnumSchema",
  "schema_salad.metaschema.SaladRecordField",
  "schema_salad.metaschema.SaladRecordSchema",
  "schema_salad.metaschema.Savable",
  "schema_salad.metaschema.SchemaDefinedType",
  "schema_salad.metaschema.SourceLine",
  "schema_salad.metaschema.SpecializeDef",
  "schema_salad.metaschema.ValidationException",
  "schema_salad.metaschema._AnyLoader",
  "schema_salad.metaschema._ArrayLoader",
  "schema_salad.metaschema._EnumLoader",
  "schema_salad.metaschema._IdMapLoader",
  "schema_salad.metaschema._Loader",
  "schema_salad.metaschema._PrimitiveLoader",
  "schema_salad.metaschema._RecordLoader",
  "schema_salad.metaschema._TypeDSLLoader",
  "schema_salad.metaschema._URILoader",
  "schema_salad.metaschema._UnionLoader",
  "schema_salad.metaschema._add_lc_filename",
  "schema_salad.metaschema._document_load",
  "schema_salad.metaschema._rvocab",
  "schema_salad.metaschema._vocab",
  "schema_salad.metaschema.add_lc_filename",
  "schema_salad.metaschema.array_of_RecordFieldLoader",
  "schema_salad.metaschema.array_of_SaladRecordFieldLoader",
  "schema_salad.metaschema.array_of_SpecializeDefLoader",
  "schema_salad.metaschema.array_of_strtype",
  "schema_salad.metaschema.array_of_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype",
  "schema_salad.metaschema.array_of_union_of_SaladRecordSchemaLoader_or_SaladEnumSchemaLoader_or_DocumentationLoader",
  "schema_salad.metaschema.booltype",
  "schema_salad.metaschema.bullets",
  "schema_salad.metaschema.cmap",
  "schema_salad.metaschema.enum_056429f0e9355680bd9b2411dc96a69c7ff2e76bLoader",
  "schema_salad.metaschema.enum_d062602be0b4b8fd33e69e29a841317b6ab665bcLoader",
  "schema_salad.metaschema.enum_d961d79c225752b9fadb617367615ab176b47d77Loader",
  "schema_salad.metaschema.enum_d9cba076fca539106791a4f46d198c7fcfbdb779Loader",
  "schema_salad.metaschema.expand_url",
  "schema_salad.metaschema.file_uri",
  "schema_salad.metaschema.floattype",
  "schema_salad.metaschema.idmap_fields_union_of_None_type_or_array_of_RecordFieldLoader",
  "schema_salad.metaschema.idmap_fields_union_of_None_type_or_array_of_SaladRecordFieldLoader",
  "schema_salad.metaschema.idmap_specialize_union_of_None_type_or_array_of_SpecializeDefLoader",
  "schema_salad.metaschema.indent",
  "schema_salad.metaschema.inttype",
  "schema_salad.metaschema.lineno_re",
  "schema_salad.metaschema.load_document",
  "schema_salad.metaschema.load_field",
  "schema_salad.metaschema.prefix_url",
  "schema_salad.metaschema.reflow",
  "schema_salad.metaschema.relname",
  "schema_salad.metaschema.save",
  "schema_salad.metaschema.strip_dup_lineno",
  "schema_salad.metaschema.strtype",
  "schema_salad.metaschema.typedsl_enum_056429f0e9355680bd9b2411dc96a69c7ff2e76bLoader_2",
  "schema_salad.metaschema.typedsl_enum_d062602be0b4b8fd33e69e29a841317b6ab665bcLoader_2",
  "schema_salad.metaschema.typedsl_enum_d961d79c225752b9fadb617367615ab176b47d77Loader_2",
  "schema_salad.metaschema.typedsl_enum_d9cba076fca539106791a4f46d198c7fcfbdb779Loader_2",
  "schema_salad.metaschema.typedsl_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype_or_array_of_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype_2",
  "schema_salad.metaschema.union_of_None_type_or_Any_type",
  "schema_salad.metaschema.union_of_None_type_or_array_of_RecordFieldLoader",
  "schema_salad.metaschema.union_of_None_type_or_array_of_SaladRecordFieldLoader",
  "schema_salad.metaschema.union_of_None_type_or_array_of_SpecializeDefLoader",
  "schema_salad.metaschema.union_of_None_type_or_booltype",
  "schema_salad.metaschema.union_of_None_type_or_inttype",
  "schema_salad.metaschema.union_of_None_type_or_strtype",
  "schema_salad.metaschema.union_of_None_type_or_strtype_or_JsonldPredicateLoader",
  "schema_salad.metaschema.union_of_None_type_or_strtype_or_array_of_strtype",
  "schema_salad.metaschema.union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype",
  "schema_salad.metaschema.union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype_or_array_of_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype",
  "schema_salad.metaschema.union_of_SaladRecordSchemaLoader_or_SaladEnumSchemaLoader_or_DocumentationLoader",
  "schema_salad.metaschema.union_of_SaladRecordSchemaLoader_or_SaladEnumSchemaLoader_or_DocumentationLoader_or_array_of_union_of_SaladRecordSchemaLoader_or_SaladEnumSchemaLoader_or_DocumentationLoader",
  "schema_salad.metaschema.uri_array_of_strtype_True_False_None",
  "schema_salad.metaschema.uri_strtype_False_False_1",
  "schema_salad.metaschema.uri_strtype_True_False_None",
  "schema_salad.metaschema.uri_union_of_None_type_or_strtype_False_False_None",
  "schema_salad.metaschema.uri_union_of_None_type_or_strtype_True_False_None",
  "schema_salad.metaschema.uri_union_of_None_type_or_strtype_or_array_of_strtype_False_False_1",
  "schema_salad.metaschema.uri_union_of_None_type_or_strtype_or_array_of_strtype_False_False_None",
  "schema_salad.metaschema.uri_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype_or_array_of_union_of_PrimitiveTypeLoader_or_RecordSchemaLoader_or_EnumSchemaLoader_or_ArraySchemaLoader_or_strtype_False_True_2",
  "schema_salad.onWindows",
  "schema_salad.python_codegen",
  "schema_salad.python_codegen_support",
  "schema_salad.python_codegen_support.LoadingOptions",
  "schema_salad.python_codegen_support.Savable",
  "schema_salad.python_codegen_support.ValidationException",
  "schema_salad.python_codegen_support._AnyLoader",
  "schema_salad.python_codegen_support._ArrayLoader",
  "schema_salad.python_codegen_support._EnumLoader",
  "schema_salad.python_codegen_support._IdMapLoader",
  "schema_salad.python_codegen_support._Loader",
  "schema_salad.python_codegen_support._PrimitiveLoader",
  "schema_salad.python_codegen_support._RecordLoader",
  "schema_salad.python_codegen_support._TypeDSLLoader",
  "schema_salad.python_codegen_support._URILoader",
  "schema_salad.python_codegen_support._UnionLoader",
  "schema_salad.python_codegen_support._document_load",
  "schema_salad.python_codegen_support.expand_url",
  "schema_salad.python_codegen_support.file_uri",
  "schema_salad.python_codegen_support.load_field",
  "schema_salad.python_codegen_support.prefix_url",
  "schema_salad.python_codegen_support.save",
  "schema_salad.ref_resolver",
  "schema_salad.ref_resolver.ContextType",
  "schema_salad.ref_resolver.D",
  "schema_salad.ref_resolver.DefaultFetcher",
  "schema_salad.ref_resolver.DocumentOrStrType",
  "schema_salad.ref_resolver.DocumentType",
  "schema_salad.ref_resolver.Fetcher",
  "schema_salad.ref_resolver.Loader",
  "schema_salad.ref_resolver.NormDict",
  "schema_salad.ref_resolver.SubLoader",
  "schema_salad.ref_resolver._copy_dict_without_key",
  "schema_salad.ref_resolver._logger",
  "schema_salad.ref_resolver._re_drive",
  "schema_salad.ref_resolver.file_uri",
  "schema_salad.ref_resolver.merge_properties",
  "schema_salad.ref_resolver.uri_file_path",
  "schema_salad.schema",
  "schema_salad.schema.Avro",
  "schema_salad.schema.SALAD_FILES",
  "schema_salad.schema.add_dictlist",
  "schema_salad.schema.add_namespaces",
  "schema_salad.schema.aslist",
  "schema_salad.schema.avro_name",
  "schema_salad.schema.collect_namespaces",
  "schema_salad.schema.convert_to_dict",
  "schema_salad.schema.deepcopy_strip",
  "schema_salad.schema.extend_and_specialize",
  "schema_salad.schema.flatten",
  "schema_salad.schema.get_anon_name",
  "schema_salad.schema.get_metaschema",
  "schema_salad.schema.json_dumps",
  "schema_salad.schema.load_and_validate",
  "schema_salad.schema.load_schema",
  "schema_salad.schema.make_avro",
  "schema_salad.schema.make_valid_avro",
  "schema_salad.schema.print_fieldrefs",
  "schema_salad.schema.print_inheritance",
  "schema_salad.schema.replace_type",
  "schema_salad.schema.shortname",
  "schema_salad.schema.validate_doc",
  "schema_salad.sourceline",
  "schema_salad.sourceline.SourceLine",
  "schema_salad.sourceline._add_lc_filename",
  "schema_salad.sourceline.add_lc_filename",
  "schema_salad.sourceline.bullets",
  "schema_salad.sourceline.cmap",
  "schema_salad.sourceline.indent",
  "schema_salad.sourceline.lineno_re",
  "schema_salad.sourceline.reflow",
  "schema_salad.sourceline.relname",
  "schema_salad.sourceline.strip_dup_lineno",
  "schema_salad.tests",
  "schema_salad.tests.matcher",
  "schema_salad.tests.matcher.JsonDiffMatcher",
  "schema_salad.tests.matcher.StripYAMLComments",
  "schema_salad.tests.matcher.json_dumps",
  "schema_salad.tests.test_cg",
  "schema_salad.tests.test_cg.TestGeneratedMetaschema",
  "schema_salad.tests.test_cg.file_uri",
  "schema_salad.tests.test_cg.metaschema",
  "schema_salad.tests.test_cli_args",
  "schema_salad.tests.test_cli_args.ParseCliArgs",
  "schema_salad.tests.test_cli_args.captured_output",
  "schema_salad.tests.test_cli_args.main",
  "schema_salad.tests.test_errors",
  "schema_salad.tests.test_errors.Names",
  "schema_salad.tests.test_errors.TestErrors",
  "schema_salad.tests.test_errors.ValidationException",
  "schema_salad.tests.test_errors.load_and_validate",
  "schema_salad.tests.test_errors.load_schema",
  "schema_salad.tests.test_examples",
  "schema_salad.tests.test_examples.SourceLine",
  "schema_salad.tests.test_examples.SourceLineTest",
  "schema_salad.tests.test_examples.TestSchemas",
  "schema_salad.tests.test_examples.cmap",
  "schema_salad.tests.test_examples.makerdf",
  "schema_salad.tests.test_fetch",
  "schema_salad.tests.test_fetch.TestFetcher",
  "schema_salad.tests.test_fetch.makerdf",
  "schema_salad.tests.test_fp",
  "schema_salad.tests.test_fp.Names",
  "schema_salad.tests.test_fp.TestForeignProperties",
  "schema_salad.tests.test_fp.ValidationException",
  "schema_salad.tests.test_fp.load_and_validate",
  "schema_salad.tests.test_fp.load_schema",
  "schema_salad.tests.test_print_oneline",
  "schema_salad.tests.test_print_oneline.TestPrintOneline",
  "schema_salad.tests.test_print_oneline.ValidationException",
  "schema_salad.tests.test_print_oneline.load_and_validate",
  "schema_salad.tests.test_print_oneline.load_schema",
  "schema_salad.tests.test_print_oneline.reformat_yaml_exception_message",
  "schema_salad.tests.test_print_oneline.strip_dup_lineno",
  "schema_salad.tests.test_print_oneline.to_one_line_messages",
  "schema_salad.tests.test_real_cwl",
  "schema_salad.tests.test_real_cwl.TestRealWorldCWL",
  "schema_salad.tests.test_real_cwl.ValidationException",
  "schema_salad.tests.test_real_cwl.load_and_validate",
  "schema_salad.tests.test_real_cwl.load_schema",
  "schema_salad.tests.test_real_cwl.reformat_yaml_exception_message",
  "schema_salad.tests.test_real_cwl.strip_dup_lineno",
  "schema_salad.tests.test_real_cwl.test_dir_name",
  "schema_salad.tests.test_real_cwl.to_one_line_messages",
  "schema_salad.tests.test_ref_resolver",
  "schema_salad.tests.test_ref_resolver.DefaultFetcher",
  "schema_salad.tests.test_ref_resolver.test_DefaultFetcher_urljoin_linux",
  "schema_salad.tests.test_ref_resolver.test_DefaultFetcher_urljoin_win32",
  "schema_salad.tests.test_ref_resolver.test_Loader_initialisation_for_HOME_env_var",
  "schema_salad.tests.test_ref_resolver.test_Loader_initialisation_for_TMP_env_var",
  "schema_salad.tests.test_ref_resolver.test_Loader_initialisation_with_neither_TMP_HOME_set",
  "schema_salad.tests.util",
  "schema_salad.tests.util.get_data",
  "schema_salad.utils",
  "schema_salad.utils.add_dictlist",
  "schema_salad.utils.aslist",
  "schema_salad.utils.convert_to_dict",
  "schema_salad.utils.flatten",
  "schema_salad.utils.json_dump",
  "schema_salad.utils.json_dumps",
  "schema_salad.utils.onWindows",
  "schema_salad.validate",
  "schema_salad.validate.ClassValidationException",
  "schema_salad.validate.INT_MAX_VALUE",
  "schema_salad.validate.INT_MIN_VALUE",
  "schema_salad.validate.LONG_MAX_VALUE",
  "schema_salad.validate.LONG_MIN_VALUE",
  "schema_salad.validate.ValidationException",
  "schema_salad.validate._logger",
  "schema_salad.validate.friendly",
  "schema_salad.validate.validate",
  "schema_salad.validate.vpformat"
 ]
}