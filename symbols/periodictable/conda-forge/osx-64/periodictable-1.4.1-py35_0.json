{
 "errors": {
  "periodictable.core": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "periodictable.__all__",
  "periodictable.__docformat__",
  "periodictable.__version__",
  "periodictable._load_covalent_radius",
  "periodictable._load_crystal_structure",
  "periodictable._load_emission_lines",
  "periodictable._load_magnetic_ff",
  "periodictable._load_neutron",
  "periodictable._load_xray",
  "periodictable.activation",
  "periodictable.activation.Activation",
  "periodictable.activation.BOOL_COLUMNS",
  "periodictable.activation.COLUMN_NAMES",
  "periodictable.activation.FLOAT_COLUMNS",
  "periodictable.activation.IAEA1987_isotopic_abundance",
  "periodictable.activation.INT_COLUMNS",
  "periodictable.activation.LN2",
  "periodictable.activation.NIST2001_isotopic_abundance",
  "periodictable.activation.Sample",
  "periodictable.activation.activity",
  "periodictable.activation.find_root",
  "periodictable.activation.init",
  "periodictable.activation.sorted_activity",
  "periodictable.chemicals",
  "periodictable.constants",
  "periodictable.constants.atomic_mass_constant",
  "periodictable.constants.avogadro_number",
  "periodictable.constants.electron_mass",
  "periodictable.constants.electron_radius",
  "periodictable.constants.electron_volt",
  "periodictable.constants.neutron_mass",
  "periodictable.constants.plancks_constant",
  "periodictable.constants.speed_of_light",
  "periodictable.core",
  "periodictable.covalent_radius",
  "periodictable.covalent_radius.Cordero",
  "periodictable.covalent_radius.CorderoPyykko",
  "periodictable.covalent_radius.init",
  "periodictable.cromermann",
  "periodictable.cromermann.CromerMannFormula",
  "periodictable.cromermann.__id__",
  "periodictable.cromermann._cmformulas",
  "periodictable.cromermann._update_cmformulas",
  "periodictable.cromermann.core",
  "periodictable.cromermann.fxrayatq",
  "periodictable.cromermann.fxrayatstol",
  "periodictable.cromermann.getCMformula",
  "periodictable.crystal_structure",
  "periodictable.crystal_structure.crystal_structures",
  "periodictable.crystal_structure.init",
  "periodictable.data_files",
  "periodictable.density",
  "periodictable.density.density",
  "periodictable.density.element_densities",
  "periodictable.density.init",
  "periodictable.density.interatomic_distance",
  "periodictable.density.number_density",
  "periodictable.elements",
  "periodictable.formula",
  "periodictable.formulas.Formula",
  "periodictable.formulas.PACKING_FACTORS",
  "periodictable.formulas._PARSER_CACHE",
  "periodictable.formulas._change_table",
  "periodictable.formulas._convert_to_hill_notation",
  "periodictable.formulas._count_atoms",
  "periodictable.formulas._hill_compare",
  "periodictable.formulas._hill_key",
  "periodictable.formulas._immutable",
  "periodictable.formulas._is_string_like",
  "periodictable.formulas._mix_by_volume_pairs",
  "periodictable.formulas._mix_by_weight_pairs",
  "periodictable.formulas._str_atoms",
  "periodictable.formulas.formula",
  "periodictable.formulas.mix_by_volume",
  "periodictable.formulas.mix_by_weight",
  "periodictable.formulas.parse_formula",
  "periodictable.magnetic_ff",
  "periodictable.magnetic_ff.CFML_DATA",
  "periodictable.magnetic_ff.MagneticFormFactor",
  "periodictable.magnetic_ff.formfactor_0",
  "periodictable.magnetic_ff.formfactor_n",
  "periodictable.magnetic_ff.init",
  "periodictable.mass",
  "periodictable.mass.abundance",
  "periodictable.mass.getval",
  "periodictable.mass.init",
  "periodictable.mass.mass",
  "periodictable.mix_by_volume",
  "periodictable.mix_by_weight",
  "periodictable.neutron_scattering",
  "periodictable.neutron_sld",
  "periodictable.nsf",
  "periodictable.nsf.ABSORPTION_WAVELENGTH",
  "periodictable.nsf.ENERGY_FACTOR",
  "periodictable.nsf.Neutron",
  "periodictable.nsf.VELOCITY_FACTOR",
  "periodictable.nsf._CHECK_scattering_potential",
  "periodictable.nsf.__all__",
  "periodictable.nsf._diff",
  "periodictable.nsf._sum_piece",
  "periodictable.nsf.absorption_comparison_table",
  "periodictable.nsf.coherent_comparison_table",
  "periodictable.nsf.compare",
  "periodictable.nsf.energy_dependent_table",
  "periodictable.nsf.fix_number",
  "periodictable.nsf.incoherent_comparison_table",
  "periodictable.nsf.init",
  "periodictable.nsf.neutron_composite_sld",
  "periodictable.nsf.neutron_energy",
  "periodictable.nsf.neutron_scattering",
  "periodictable.nsf.neutron_sld",
  "periodictable.nsf.neutron_wavelength",
  "periodictable.nsf.nsftable",
  "periodictable.nsf.nsftableI",
  "periodictable.nsf.sld_plot",
  "periodictable.nsf.sld_table",
  "periodictable.nsf.total_comparison_table",
  "periodictable.plot",
  "periodictable.plot.__all__",
  "periodictable.plot.table_plot",
  "periodictable.util",
  "periodictable.util.cell_volume",
  "periodictable.util.require_keywords",
  "periodictable.xray_sld",
  "periodictable.xsf",
  "periodictable.xsf.Xray",
  "periodictable.xsf.__all__",
  "periodictable.xsf.emission_table",
  "periodictable.xsf.index_of_refraction",
  "periodictable.xsf.init",
  "periodictable.xsf.mirror_reflectivity",
  "periodictable.xsf.plot_xsf",
  "periodictable.xsf.sld_table",
  "periodictable.xsf.spectral_lines_data",
  "periodictable.xsf.xray_energy",
  "periodictable.xsf.xray_sld",
  "periodictable.xsf.xray_wavelength"
 ]
}