{
 "errors": {
  "mock": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in values",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in <listcomp>",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 70, in wrapper",
    "    and context.get_value() is inference_state.builtins_module:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "mock.ANY",
  "mock.CallableMixin",
  "mock.DEFAULT",
  "mock.MagicMock",
  "mock.Mock",
  "mock.NonCallableMagicMock",
  "mock.NonCallableMock",
  "mock.PropertyMock",
  "mock.call",
  "mock.create_autospec",
  "mock.mock.ANY",
  "mock.mock.Base",
  "mock.mock.CallableMixin",
  "mock.mock.ClassType",
  "mock.mock.ClassTypes",
  "mock.mock.DEFAULT",
  "mock.mock.DescriptorTypes",
  "mock.mock.FILTER_DIR",
  "mock.mock.FunctionTypes",
  "mock.mock.MagicMixin",
  "mock.mock.MagicMock",
  "mock.mock.MagicProxy",
  "mock.mock.MethodWrapperTypes",
  "mock.mock.Mock",
  "mock.mock.NonCallableMagicMock",
  "mock.mock.NonCallableMock",
  "mock.mock.OldStyleClass",
  "mock.mock.PropertyMock",
  "mock.mock._ANY",
  "mock.mock._Call",
  "mock.mock._CallList",
  "mock.mock._MockIter",
  "mock.mock._Sentinel",
  "mock.mock._SpecState",
  "mock.mock.__all__",
  "mock.mock.__version__",
  "mock.mock._all_magics",
  "mock.mock._allowed_names",
  "mock.mock._builtins",
  "mock.mock._calculate_return_value",
  "mock.mock._callable",
  "mock.mock._check_and_set_parent",
  "mock.mock._check_signature",
  "mock.mock._clear_dict",
  "mock.mock._copy",
  "mock.mock._delegating_property",
  "mock.mock._deleted",
  "mock.mock._dot_lookup",
  "mock.mock._format_call_signature",
  "mock.mock._get_class",
  "mock.mock._get_eq",
  "mock.mock._get_iter",
  "mock.mock._get_method",
  "mock.mock._get_ne",
  "mock.mock._get_signature_object",
  "mock.mock._get_target",
  "mock.mock._importer",
  "mock.mock._instance_callable",
  "mock.mock._is_exception",
  "mock.mock._is_instance_mock",
  "mock.mock._is_list",
  "mock.mock._is_magic",
  "mock.mock._is_started",
  "mock.mock._isidentifier",
  "mock.mock._iterate_read_data",
  "mock.mock._magics",
  "mock.mock._missing",
  "mock.mock._must_skip",
  "mock.mock._non_defaults",
  "mock.mock._patch",
  "mock.mock._return_values",
  "mock.mock._safe_super",
  "mock.mock._set_return_value",
  "mock.mock._set_signature",
  "mock.mock._setup_func",
  "mock.mock._side_effect_methods",
  "mock.mock._slotted",
  "mock.mock._try_iter",
  "mock.mock._unsupported_magics",
  "mock.mock._v",
  "mock.mock.basestring",
  "mock.mock.builtin",
  "mock.mock.call",
  "mock.mock.create_autospec",
  "mock.mock.extra",
  "mock.mock.file_spec",
  "mock.mock.inplace",
  "mock.mock.inspectsignature",
  "mock.mock.long",
  "mock.mock.magic_methods",
  "mock.mock.mock_open",
  "mock.mock.numerics",
  "mock.mock.patch",
  "mock.mock.regex",
  "mock.mock.right",
  "mock.mock.sentinel",
  "mock.mock.unicode",
  "mock.mock.version_info",
  "mock.mock_open",
  "mock.patch",
  "mock.sentinel",
  "mock.tests.__main__",
  "mock.tests.__main__.load_tests",
  "mock.tests.support",
  "mock.tests.support.SomeClass",
  "mock.tests.support.X",
  "mock.tests.support.callable",
  "mock.tests.support.info",
  "mock.tests.support.is_instance",
  "mock.tests.support.next",
  "mock.tests.support.with_available",
  "mock.tests.testcallable",
  "mock.tests.testcallable.CallableMixin",
  "mock.tests.testcallable.MagicMock",
  "mock.tests.testcallable.Mock",
  "mock.tests.testcallable.NonCallableMagicMock",
  "mock.tests.testcallable.NonCallableMock",
  "mock.tests.testcallable.SomeClass",
  "mock.tests.testcallable.TestCallable",
  "mock.tests.testcallable.X",
  "mock.tests.testcallable.create_autospec",
  "mock.tests.testcallable.is_instance",
  "mock.tests.testcallable.patch",
  "mock.tests.testhelpers",
  "mock.tests.testhelpers.ANY",
  "mock.tests.testhelpers.AnyTest",
  "mock.tests.testhelpers.CallTest",
  "mock.tests.testhelpers.MagicMock",
  "mock.tests.testhelpers.Mock",
  "mock.tests.testhelpers.PropertyMock",
  "mock.tests.testhelpers.SomeClass",
  "mock.tests.testhelpers.SpecSignatureTest",
  "mock.tests.testhelpers.TestCallList",
  "mock.tests.testhelpers._Call",
  "mock.tests.testhelpers.call",
  "mock.tests.testhelpers.create_autospec",
  "mock.tests.testhelpers.patch",
  "mock.tests.testmagicmethods",
  "mock.tests.testmagicmethods.MagicMock",
  "mock.tests.testmagicmethods.Mock",
  "mock.tests.testmagicmethods.TestMockingMagicMethods",
  "mock.tests.testmagicmethods._magics",
  "mock.tests.testmagicmethods.long",
  "mock.tests.testmagicmethods.unicode",
  "mock.tests.testmock",
  "mock.tests.testmock.DEFAULT",
  "mock.tests.testmock.Iter",
  "mock.tests.testmock.MagicMock",
  "mock.tests.testmock.Mock",
  "mock.tests.testmock.MockTest",
  "mock.tests.testmock.NonCallableMagicMock",
  "mock.tests.testmock.NonCallableMock",
  "mock.tests.testmock.Something",
  "mock.tests.testmock.Subclass",
  "mock.tests.testmock.Thing",
  "mock.tests.testmock._CallList",
  "mock.tests.testmock.call",
  "mock.tests.testmock.callable",
  "mock.tests.testmock.create_autospec",
  "mock.tests.testmock.is_instance",
  "mock.tests.testmock.next",
  "mock.tests.testmock.patch",
  "mock.tests.testmock.sentinel",
  "mock.tests.testmock.unicode",
  "mock.tests.testpatch",
  "mock.tests.testpatch.CallableMixin",
  "mock.tests.testpatch.Container",
  "mock.tests.testpatch.DEFAULT",
  "mock.tests.testpatch.Foo",
  "mock.tests.testpatch.MODNAME",
  "mock.tests.testpatch.MagicMock",
  "mock.tests.testpatch.Mock",
  "mock.tests.testpatch.NonCallableMagicMock",
  "mock.tests.testpatch.NonCallableMock",
  "mock.tests.testpatch.PTModule",
  "mock.tests.testpatch.PatchTest",
  "mock.tests.testpatch.SomeClass",
  "mock.tests.testpatch._get_proxy",
  "mock.tests.testpatch._get_target",
  "mock.tests.testpatch._patch",
  "mock.tests.testpatch.builtin_string",
  "mock.tests.testpatch.call",
  "mock.tests.testpatch.callable",
  "mock.tests.testpatch.foo_name",
  "mock.tests.testpatch.function",
  "mock.tests.testpatch.is_instance",
  "mock.tests.testpatch.patch",
  "mock.tests.testpatch.sentinel",
  "mock.tests.testpatch.something",
  "mock.tests.testpatch.something_else",
  "mock.tests.testpatch.support",
  "mock.tests.testpatch.unicode",
  "mock.tests.testsentinel",
  "mock.tests.testsentinel.DEFAULT",
  "mock.tests.testsentinel.SentinelTest",
  "mock.tests.testsentinel.sentinel",
  "mock.tests.testwith",
  "mock.tests.testwith.MagicMock",
  "mock.tests.testwith.Mock",
  "mock.tests.testwith.TestMockOpen",
  "mock.tests.testwith.WithTest",
  "mock.tests.testwith.call",
  "mock.tests.testwith.is_instance",
  "mock.tests.testwith.mock_open",
  "mock.tests.testwith.patch",
  "mock.tests.testwith.sentinel",
  "mock.tests.testwith.something",
  "mock.tests.testwith.something_else"
 ]
}