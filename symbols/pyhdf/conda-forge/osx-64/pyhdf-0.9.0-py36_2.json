{
 "errors": {
  "pyhdf.error": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 70, in wrapper",
    "    and context.get_value() is inference_state.builtins_module:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  }
 },
 "symbols": [
  "pyhdf.HC",
  "pyhdf.HC.HC",
  "pyhdf.HDF",
  "pyhdf.HDF.HDF",
  "pyhdf.HDF.__all__",
  "pyhdf.HDF._array_to_ret",
  "pyhdf.HDF._array_to_str",
  "pyhdf.HDF.getlibversion",
  "pyhdf.HDF.ishdf",
  "pyhdf.SD",
  "pyhdf.SD.SD",
  "pyhdf.SD.__all__",
  "pyhdf.SD._array_to_ret",
  "pyhdf.SD._array_to_str",
  "pyhdf.SD._getattr",
  "pyhdf.SD._setattr",
  "pyhdf.V",
  "pyhdf.V.V",
  "pyhdf.V.__all__",
  "pyhdf.V._array_to_ret",
  "pyhdf.V._array_to_str",
  "pyhdf.V._setattr",
  "pyhdf.VS",
  "pyhdf.VS.VD",
  "pyhdf.VS.VS",
  "pyhdf.VS.__all__",
  "pyhdf.VS._array_to_ret",
  "pyhdf.VS._array_to_str",
  "pyhdf.VS._setattr",
  "pyhdf.error",
  "pyhdf.hdfext",
  "pyhdf.hdfext.ATTRIB_BUFFER_SIZE",
  "pyhdf.hdfext.CHAR_BUFFER_SIZE",
  "pyhdf.hdfext.COMP_CODE_DEFLATE",
  "pyhdf.hdfext.COMP_CODE_NBIT",
  "pyhdf.hdfext.COMP_CODE_NONE",
  "pyhdf.hdfext.COMP_CODE_RLE",
  "pyhdf.hdfext.COMP_CODE_SKPHUFF",
  "pyhdf.hdfext.COMP_CODE_SZIP",
  "pyhdf.hdfext.DFACC_ALL",
  "pyhdf.hdfext.DFACC_APPENDABLE",
  "pyhdf.hdfext.DFACC_BUFFER",
  "pyhdf.hdfext.DFACC_CLOBBER",
  "pyhdf.hdfext.DFACC_CREATE",
  "pyhdf.hdfext.DFACC_CURRENT",
  "pyhdf.hdfext.DFACC_OLD",
  "pyhdf.hdfext.DFACC_RDONLY",
  "pyhdf.hdfext.DFACC_RDWR",
  "pyhdf.hdfext.DFACC_READ",
  "pyhdf.hdfext.DFACC_WRITE",
  "pyhdf.hdfext.DFNT_CHAR",
  "pyhdf.hdfext.DFNT_CHAR16",
  "pyhdf.hdfext.DFNT_CHAR8",
  "pyhdf.hdfext.DFNT_DOUBLE",
  "pyhdf.hdfext.DFNT_FLOAT",
  "pyhdf.hdfext.DFNT_FLOAT128",
  "pyhdf.hdfext.DFNT_FLOAT32",
  "pyhdf.hdfext.DFNT_FLOAT64",
  "pyhdf.hdfext.DFNT_INT128",
  "pyhdf.hdfext.DFNT_INT16",
  "pyhdf.hdfext.DFNT_INT32",
  "pyhdf.hdfext.DFNT_INT64",
  "pyhdf.hdfext.DFNT_INT8",
  "pyhdf.hdfext.DFNT_NONE",
  "pyhdf.hdfext.DFNT_QUERY",
  "pyhdf.hdfext.DFNT_UCHAR",
  "pyhdf.hdfext.DFNT_UCHAR16",
  "pyhdf.hdfext.DFNT_UCHAR8",
  "pyhdf.hdfext.DFNT_UINT128",
  "pyhdf.hdfext.DFNT_UINT16",
  "pyhdf.hdfext.DFNT_UINT32",
  "pyhdf.hdfext.DFNT_UINT64",
  "pyhdf.hdfext.DFNT_UINT8",
  "pyhdf.hdfext.DFNT_VERSION",
  "pyhdf.hdfext.DFTAG_NDG",
  "pyhdf.hdfext.DFTAG_VG",
  "pyhdf.hdfext.DFTAG_VH",
  "pyhdf.hdfext.HEstring",
  "pyhdf.hdfext.HEvalue",
  "pyhdf.hdfext.Hclose",
  "pyhdf.hdfext.Hgetfileversion",
  "pyhdf.hdfext.Hgetlibversion",
  "pyhdf.hdfext.Hishdf",
  "pyhdf.hdfext.Hopen",
  "pyhdf.hdfext.SD_FILL",
  "pyhdf.hdfext.SD_NOFILL",
  "pyhdf.hdfext.SD_UNLIMITED",
  "pyhdf.hdfext.SDattrinfo",
  "pyhdf.hdfext.SDcheckempty",
  "pyhdf.hdfext.SDcreate",
  "pyhdf.hdfext.SDdiminfo",
  "pyhdf.hdfext.SDend",
  "pyhdf.hdfext.SDendaccess",
  "pyhdf.hdfext.SDfileinfo",
  "pyhdf.hdfext.SDfindattr",
  "pyhdf.hdfext.SDgetcal",
  "pyhdf.hdfext.SDgetdatastrs",
  "pyhdf.hdfext.SDgetdimid",
  "pyhdf.hdfext.SDgetdimscale",
  "pyhdf.hdfext.SDgetdimstrs",
  "pyhdf.hdfext.SDgetfillvalue",
  "pyhdf.hdfext.SDgetinfo",
  "pyhdf.hdfext.SDgetrange",
  "pyhdf.hdfext.SDidtoref",
  "pyhdf.hdfext.SDiscoordvar",
  "pyhdf.hdfext.SDisrecord",
  "pyhdf.hdfext.SDnametoindex",
  "pyhdf.hdfext.SDreadattr",
  "pyhdf.hdfext.SDreftoindex",
  "pyhdf.hdfext.SDselect",
  "pyhdf.hdfext.SDsetattr",
  "pyhdf.hdfext.SDsetcal",
  "pyhdf.hdfext.SDsetdatastrs",
  "pyhdf.hdfext.SDsetdimname",
  "pyhdf.hdfext.SDsetdimscale",
  "pyhdf.hdfext.SDsetdimstrs",
  "pyhdf.hdfext.SDsetexternalfile",
  "pyhdf.hdfext.SDsetfillmode",
  "pyhdf.hdfext.SDsetfillvalue",
  "pyhdf.hdfext.SDsetrange",
  "pyhdf.hdfext.SDstart",
  "pyhdf.hdfext.VFfieldesize",
  "pyhdf.hdfext.VFfieldisize",
  "pyhdf.hdfext.VFfieldname",
  "pyhdf.hdfext.VFfieldorder",
  "pyhdf.hdfext.VFfieldtype",
  "pyhdf.hdfext.VFnfields",
  "pyhdf.hdfext.VHstoredata",
  "pyhdf.hdfext.VHstoredatam",
  "pyhdf.hdfext.VQueryref",
  "pyhdf.hdfext.VQuerytag",
  "pyhdf.hdfext.VSQueryref",
  "pyhdf.hdfext.VSQuerytag",
  "pyhdf.hdfext.VSattach",
  "pyhdf.hdfext.VSattrinfo",
  "pyhdf.hdfext.VSdetach",
  "pyhdf.hdfext.VSelts",
  "pyhdf.hdfext.VSfdefine",
  "pyhdf.hdfext.VSfexist",
  "pyhdf.hdfext.VSfind",
  "pyhdf.hdfext.VSfindattr",
  "pyhdf.hdfext.VSfindex",
  "pyhdf.hdfext.VSfnattrs",
  "pyhdf.hdfext.VSfpack",
  "pyhdf.hdfext.VSgetattr",
  "pyhdf.hdfext.VSgetclass",
  "pyhdf.hdfext.VSgetfields",
  "pyhdf.hdfext.VSgetid",
  "pyhdf.hdfext.VSgetinterlace",
  "pyhdf.hdfext.VSgetname",
  "pyhdf.hdfext.VSinquire",
  "pyhdf.hdfext.VSisattr",
  "pyhdf.hdfext.VSnattrs",
  "pyhdf.hdfext.VSread",
  "pyhdf.hdfext.VSseek",
  "pyhdf.hdfext.VSsetattr",
  "pyhdf.hdfext.VSsetclass",
  "pyhdf.hdfext.VSsetfields",
  "pyhdf.hdfext.VSsetinterlace",
  "pyhdf.hdfext.VSsetname",
  "pyhdf.hdfext.VSsizeof",
  "pyhdf.hdfext.VSwrite",
  "pyhdf.hdfext.Vaddtagref",
  "pyhdf.hdfext.Vattach",
  "pyhdf.hdfext.Vattrinfo",
  "pyhdf.hdfext.Vdelete",
  "pyhdf.hdfext.Vdeletetagref",
  "pyhdf.hdfext.Vdetach",
  "pyhdf.hdfext.Vfind",
  "pyhdf.hdfext.Vfindattr",
  "pyhdf.hdfext.Vfindclass",
  "pyhdf.hdfext.Vfinish",
  "pyhdf.hdfext.Vgetattr",
  "pyhdf.hdfext.Vgetclass",
  "pyhdf.hdfext.Vgetid",
  "pyhdf.hdfext.Vgetname",
  "pyhdf.hdfext.Vgettagref",
  "pyhdf.hdfext.Vgettagrefs",
  "pyhdf.hdfext.Vgetversion",
  "pyhdf.hdfext.Vinitialize",
  "pyhdf.hdfext.Vinqtagref",
  "pyhdf.hdfext.Vinsert",
  "pyhdf.hdfext.Visvg",
  "pyhdf.hdfext.Visvs",
  "pyhdf.hdfext.Vnattrs",
  "pyhdf.hdfext.Vnrefs",
  "pyhdf.hdfext.Vntagrefs",
  "pyhdf.hdfext.Vsetattr",
  "pyhdf.hdfext.Vsetclass",
  "pyhdf.hdfext.Vsetname",
  "pyhdf.hdfext._HEprint",
  "pyhdf.hdfext._SDgetcompress",
  "pyhdf.hdfext._SDreaddata_0",
  "pyhdf.hdfext._SDsetcompress",
  "pyhdf.hdfext._SDwritedata_0",
  "pyhdf.hdfext._hdfext",
  "pyhdf.hdfext._newclass",
  "pyhdf.hdfext._object",
  "pyhdf.hdfext._swig_getattr",
  "pyhdf.hdfext._swig_property",
  "pyhdf.hdfext._swig_repr",
  "pyhdf.hdfext._swig_setattr",
  "pyhdf.hdfext.array_byte",
  "pyhdf.hdfext.array_float32",
  "pyhdf.hdfext.array_float64",
  "pyhdf.hdfext.array_int16",
  "pyhdf.hdfext.array_int32",
  "pyhdf.hdfext.array_int8",
  "pyhdf.hdfext.array_uint16",
  "pyhdf.hdfext.array_uint32",
  "pyhdf.hdfext.array_voidp_getitem",
  "pyhdf.hdfext.array_voidp_setitem",
  "pyhdf.hdfext.delete_array_voidp",
  "pyhdf.hdfext.new_array_voidp",
  "pyhdf.six",
  "pyhdf.six.BytesIO",
  "pyhdf.six.Iterator",
  "pyhdf.six.MAXSIZE",
  "pyhdf.six.MovedAttribute",
  "pyhdf.six.MovedModule",
  "pyhdf.six.PY3",
  "pyhdf.six.StringIO",
  "pyhdf.six._LazyDescr",
  "pyhdf.six._MovedItems",
  "pyhdf.six.__author__",
  "pyhdf.six.__version__",
  "pyhdf.six._add_doc",
  "pyhdf.six._func_closure",
  "pyhdf.six._func_code",
  "pyhdf.six._func_defaults",
  "pyhdf.six._func_globals",
  "pyhdf.six._import_module",
  "pyhdf.six._iteritems",
  "pyhdf.six._iterkeys",
  "pyhdf.six._iterlists",
  "pyhdf.six._itervalues",
  "pyhdf.six._meth_func",
  "pyhdf.six._meth_self",
  "pyhdf.six._moved_attributes",
  "pyhdf.six.add_move",
  "pyhdf.six.advance_iterator",
  "pyhdf.six.b",
  "pyhdf.six.callable",
  "pyhdf.six.class_types",
  "pyhdf.six.exec_",
  "pyhdf.six.get_function_closure",
  "pyhdf.six.get_function_code",
  "pyhdf.six.get_function_defaults",
  "pyhdf.six.get_function_globals",
  "pyhdf.six.get_method_function",
  "pyhdf.six.get_method_self",
  "pyhdf.six.get_unbound_function",
  "pyhdf.six.int2byte",
  "pyhdf.six.integer_types",
  "pyhdf.six.iteritems",
  "pyhdf.six.iterkeys",
  "pyhdf.six.iterlists",
  "pyhdf.six.itervalues",
  "pyhdf.six.moves",
  "pyhdf.six.next",
  "pyhdf.six.print_",
  "pyhdf.six.remove_move",
  "pyhdf.six.reraise",
  "pyhdf.six.string_types",
  "pyhdf.six.text_type",
  "pyhdf.six.u",
  "pyhdf.six.with_metaclass"
 ]
}