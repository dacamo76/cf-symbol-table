{
 "errors": {
  "vcr.request": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "vcr.NullHandler",
  "vcr.VCR",
  "vcr._handle_coroutine",
  "vcr._handle_coroutine.handle_coroutine",
  "vcr.cassette",
  "vcr.cassette.Cassette",
  "vcr.cassette.handle_coroutine",
  "vcr.cassette.iscoroutinefunction",
  "vcr.cassette.log",
  "vcr.compat",
  "vcr.compat.__all__",
  "vcr.config",
  "vcr.config.VCR",
  "vcr.default_vcr",
  "vcr.errors",
  "vcr.errors.CannotOverwriteExistingCassetteException",
  "vcr.errors.UnhandledHTTPRequestError",
  "vcr.filters",
  "vcr.filters.decode_response",
  "vcr.filters.remove_headers",
  "vcr.filters.remove_post_data_parameters",
  "vcr.filters.remove_query_parameters",
  "vcr.filters.replace_headers",
  "vcr.filters.replace_post_data_parameters",
  "vcr.filters.replace_query_parameters",
  "vcr.matchers",
  "vcr.matchers._checker_transformer_pairs",
  "vcr.matchers._get_transformer",
  "vcr.matchers._header_checker",
  "vcr.matchers._identity",
  "vcr.matchers._log_matches",
  "vcr.matchers._transform_json",
  "vcr.matchers._xml_header_checker",
  "vcr.matchers._xmlrpc_header_checker",
  "vcr.matchers.body",
  "vcr.matchers.headers",
  "vcr.matchers.host",
  "vcr.matchers.log",
  "vcr.matchers.method",
  "vcr.matchers.path",
  "vcr.matchers.port",
  "vcr.matchers.query",
  "vcr.matchers.raw_body",
  "vcr.matchers.requests_match",
  "vcr.matchers.scheme",
  "vcr.matchers.uri",
  "vcr.migration",
  "vcr.migration.PARTS",
  "vcr.migration._already_migrated",
  "vcr.migration._list_of_tuples_to_dict",
  "vcr.migration._migrate",
  "vcr.migration.build_uri",
  "vcr.migration.main",
  "vcr.migration.migrate",
  "vcr.migration.preprocess_yaml",
  "vcr.migration.try_migrate",
  "vcr.patch",
  "vcr.patch.CassettePatcherBuilder",
  "vcr.patch.ConnectionRemover",
  "vcr.patch._AiohttpClientSessionRequest",
  "vcr.patch._Boto3VerifiedHTTPSConnection",
  "vcr.patch._CertValidatingHTTPSConnection",
  "vcr.patch._CurlAsyncHTTPClient_fetch_impl",
  "vcr.patch._HTTPConnection",
  "vcr.patch._HTTPConnectionWithTimeout",
  "vcr.patch._HTTPSConnection",
  "vcr.patch._HTTPSConnectionWithTimeout",
  "vcr.patch._SCHEME_TO_CONNECTION",
  "vcr.patch._SimpleAsyncHTTPClient_fetch_impl",
  "vcr.patch._VerifiedHTTPSConnection",
  "vcr.patch._cpoolBoto3HTTPConnection",
  "vcr.patch._cpoolBoto3HTTPSConnection",
  "vcr.patch._cpoolHTTPConnection",
  "vcr.patch._cpoolHTTPSConnection",
  "vcr.patch.force_reset",
  "vcr.patch.reset_patchers",
  "vcr.persisters",
  "vcr.persisters.filesystem",
  "vcr.persisters.filesystem.FilesystemPersister",
  "vcr.request",
  "vcr.request.Request",
  "vcr.serialize",
  "vcr.serialize.CASSETTE_FORMAT_VERSION",
  "vcr.serialize.Request",
  "vcr.serialize._looks_like_an_old_cassette",
  "vcr.serialize._warn_about_old_cassette_format",
  "vcr.serialize.compat",
  "vcr.serialize.deserialize",
  "vcr.serialize.serialize",
  "vcr.serializers",
  "vcr.serializers.compat",
  "vcr.serializers.compat._convert_string_to_unicode",
  "vcr.serializers.compat.convert_body_to_bytes",
  "vcr.serializers.compat.convert_body_to_unicode",
  "vcr.serializers.compat.convert_to_bytes",
  "vcr.serializers.compat.convert_to_unicode",
  "vcr.serializers.jsonserializer",
  "vcr.serializers.jsonserializer.deserialize",
  "vcr.serializers.jsonserializer.serialize",
  "vcr.serializers.yamlserializer",
  "vcr.serializers.yamlserializer.deserialize",
  "vcr.serializers.yamlserializer.serialize",
  "vcr.stubs",
  "vcr.stubs.CannotOverwriteExistingCassetteException",
  "vcr.stubs.Request",
  "vcr.stubs.VCRConnection",
  "vcr.stubs.VCRConnection.cassette",
  "vcr.stubs.VCRFakeSocket",
  "vcr.stubs.VCRHTTPConnection",
  "vcr.stubs.VCRHTTPResponse",
  "vcr.stubs.VCRHTTPSConnection",
  "vcr.stubs.VCRHTTPSConnection._baseclass",
  "vcr.stubs.VCRHTTPSConnection._protocol",
  "vcr.stubs.VCRHTTPSConnection.is_verified",
  "vcr.stubs.aiohttp_stubs",
  "vcr.stubs.aiohttp_stubs.MockClientResponse",
  "vcr.stubs.aiohttp_stubs.Request",
  "vcr.stubs.aiohttp_stubs.vcr_request",
  "vcr.stubs.boto3_stubs",
  "vcr.stubs.boto3_stubs.VCRRequestsHTTPConnection",
  "vcr.stubs.boto3_stubs.VCRRequestsHTTPSConnection",
  "vcr.stubs.boto3_stubs._protocol",
  "vcr.stubs.boto3_stubs.cassette",
  "vcr.stubs.boto3_stubs.is_verified",
  "vcr.stubs.boto_stubs",
  "vcr.stubs.boto_stubs.VCRCertValidatingHTTPSConnection",
  "vcr.stubs.boto_stubs._protocol",
  "vcr.stubs.boto_stubs.cassette",
  "vcr.stubs.boto_stubs.is_verified",
  "vcr.stubs.compat",
  "vcr.stubs.compat.get_header",
  "vcr.stubs.compat.get_httpmessage",
  "vcr.stubs.httplib2_stubs",
  "vcr.stubs.httplib2_stubs.VCRHTTPConnectionWithTimeout",
  "vcr.stubs.httplib2_stubs.VCRHTTPSConnectionWithTimeout",
  "vcr.stubs.httplib2_stubs._baseclass",
  "vcr.stubs.httplib2_stubs._protocol",
  "vcr.stubs.httplib2_stubs.cassette",
  "vcr.stubs.httplib2_stubs.is_verified",
  "vcr.stubs.k",
  "vcr.stubs.log",
  "vcr.stubs.parse_headers",
  "vcr.stubs.requests_stubs",
  "vcr.stubs.requests_stubs.VCRRequestsHTTPConnection",
  "vcr.stubs.requests_stubs.VCRRequestsHTTPSConnection",
  "vcr.stubs.requests_stubs._protocol",
  "vcr.stubs.requests_stubs.cassette",
  "vcr.stubs.requests_stubs.is_verified",
  "vcr.stubs.serialize_headers",
  "vcr.stubs.tornado_stubs",
  "vcr.stubs.tornado_stubs.CannotOverwriteExistingCassetteException",
  "vcr.stubs.tornado_stubs.Request",
  "vcr.stubs.tornado_stubs.vcr_fetch_impl",
  "vcr.stubs.urllib3_stubs",
  "vcr.stubs.urllib3_stubs.VCRRequestsHTTPConnection",
  "vcr.stubs.urllib3_stubs.VCRRequestsHTTPSConnection",
  "vcr.stubs.urllib3_stubs._protocol",
  "vcr.stubs.urllib3_stubs.cassette",
  "vcr.stubs.urllib3_stubs.is_verified",
  "vcr.stubs.v",
  "vcr.use_cassette",
  "vcr.util",
  "vcr.util.CaseInsensitiveDict",
  "vcr.util.auto_decorate",
  "vcr.util.compose",
  "vcr.util.partition_dict",
  "vcr.util.read_body"
 ]
}