{
 "errors": {
  "sourmash.search": {
   "exception": "<ForStmt: for v in self._signatures.values():             yield v@169,8>",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 134, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 116, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 266, in infer_trailer",
    "    ContextualizedNode(context, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 495, in get_item",
    "    return ValueSet.from_sets(_getitem(c, *args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 495, in <genexpr>",
    "    return ValueSet.from_sets(_getitem(c, *args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 389, in _getitem",
    "    result |= value.py__simple_getitem__(index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 236, in py__simple_getitem__",
    "    all_types = list(self.py__iter__())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 171, in py__iter__",
    "    for set_ in self._iterate():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 168, in _iterate",
    "    yield from self._nested(comp_fors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 147, in _nested",
    "    for i, lazy_value in enumerate(iterated):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 477, in iterate",
    "    for lazy_values in zip_longest(*type_iters):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 307, in get_yield_lazy_values",
    "    yield from self._get_yield_lazy_value(yield_in_same_for_stmt)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/contextlib.py\", line 119, in __exit__",
    "    next(self.gen)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 159, in predefine_names",
    "    del predefined[flow_scope]",
    "KeyError: <ForStmt: for v in self._signatures.values():             yield v@169,8>",
    ""
   ]
  }
 },
 "symbols": [
  "sourmash.DEFAULT_SEED",
  "sourmash.MAX_HASH",
  "sourmash.MinHash",
  "sourmash.SourmashSignature",
  "sourmash.VERSION",
  "sourmash.__main__",
  "sourmash.__main__.main",
  "sourmash._lowlevel",
  "sourmash._lowlevel.__all__",
  "sourmash._lowlevel.ffi",
  "sourmash._lowlevel.lib",
  "sourmash._lowlevel__ffi",
  "sourmash._lowlevel__ffi.ffi",
  "sourmash._minhash",
  "sourmash._minhash.MINHASH_DEFAULT_SEED",
  "sourmash._minhash.MINHASH_MAX_HASH",
  "sourmash._minhash.MinHash",
  "sourmash._minhash._HashesWrapper",
  "sourmash._minhash._get_max_hash_for_scaled",
  "sourmash._minhash._get_scaled_for_max_hash",
  "sourmash._minhash.get_minhash_default_seed",
  "sourmash._minhash.get_minhash_max_hash",
  "sourmash._minhash.hash_murmur",
  "sourmash._minhash.to_bytes",
  "sourmash._minhash.translate_codon",
  "sourmash.cli",
  "sourmash.cli.SourmashParser",
  "sourmash.cli.categorize",
  "sourmash.cli.categorize.add_ksize_arg",
  "sourmash.cli.categorize.add_moltype_args",
  "sourmash.cli.categorize.main",
  "sourmash.cli.categorize.subparser",
  "sourmash.cli.compare",
  "sourmash.cli.compare.add_ksize_arg",
  "sourmash.cli.compare.add_moltype_args",
  "sourmash.cli.compare.main",
  "sourmash.cli.compare.subparser",
  "sourmash.cli.compute",
  "sourmash.cli.compute.add_construct_moltype_args",
  "sourmash.cli.compute.compute",
  "sourmash.cli.compute.get_minhash_default_seed",
  "sourmash.cli.compute.ksize_parser",
  "sourmash.cli.compute.main",
  "sourmash.cli.compute.subparser",
  "sourmash.cli.compute.usage",
  "sourmash.cli.dump",
  "sourmash.cli.dump.add_ksize_arg",
  "sourmash.cli.dump.add_moltype_args",
  "sourmash.cli.dump.main",
  "sourmash.cli.dump.subparser",
  "sourmash.cli.gather",
  "sourmash.cli.gather.add_ksize_arg",
  "sourmash.cli.gather.add_moltype_args",
  "sourmash.cli.gather.main",
  "sourmash.cli.gather.subparser",
  "sourmash.cli.get_parser",
  "sourmash.cli.import_csv",
  "sourmash.cli.import_csv.main",
  "sourmash.cli.import_csv.subparser",
  "sourmash.cli.index",
  "sourmash.cli.index.add_ksize_arg",
  "sourmash.cli.index.add_moltype_args",
  "sourmash.cli.index.main",
  "sourmash.cli.index.subparser",
  "sourmash.cli.index.usage",
  "sourmash.cli.info",
  "sourmash.cli.info.info",
  "sourmash.cli.info.main",
  "sourmash.cli.info.notify",
  "sourmash.cli.info.subparser",
  "sourmash.cli.lca",
  "sourmash.cli.lca.classify",
  "sourmash.cli.lca.classify.main",
  "sourmash.cli.lca.classify.subparser",
  "sourmash.cli.lca.clidir",
  "sourmash.cli.lca.compare_csv",
  "sourmash.cli.lca.compare_csv.main",
  "sourmash.cli.lca.compare_csv.subparser",
  "sourmash.cli.lca.desc",
  "sourmash.cli.lca.docstring",
  "sourmash.cli.lca.gather",
  "sourmash.cli.lca.gather.main",
  "sourmash.cli.lca.gather.subparser",
  "sourmash.cli.lca.helpstring",
  "sourmash.cli.lca.index",
  "sourmash.cli.lca.index.add_ksize_arg",
  "sourmash.cli.lca.index.add_moltype_args",
  "sourmash.cli.lca.index.main",
  "sourmash.cli.lca.index.subparser",
  "sourmash.cli.lca.ops",
  "sourmash.cli.lca.rankinfo",
  "sourmash.cli.lca.rankinfo.main",
  "sourmash.cli.lca.rankinfo.subparser",
  "sourmash.cli.lca.s",
  "sourmash.cli.lca.subcmd",
  "sourmash.cli.lca.subparser",
  "sourmash.cli.lca.subparser.clidir",
  "sourmash.cli.lca.subparser.desc",
  "sourmash.cli.lca.subparser.docstring",
  "sourmash.cli.lca.subparser.helpstring",
  "sourmash.cli.lca.subparser.ops",
  "sourmash.cli.lca.subparser.s",
  "sourmash.cli.lca.subparser.subcmd",
  "sourmash.cli.lca.subparser.subparser",
  "sourmash.cli.lca.summarize",
  "sourmash.cli.lca.summarize.main",
  "sourmash.cli.lca.summarize.subparser",
  "sourmash.cli.migrate",
  "sourmash.cli.migrate.main",
  "sourmash.cli.migrate.subparser",
  "sourmash.cli.multigather",
  "sourmash.cli.multigather.add_ksize_arg",
  "sourmash.cli.multigather.add_moltype_args",
  "sourmash.cli.multigather.main",
  "sourmash.cli.multigather.subparser",
  "sourmash.cli.plot",
  "sourmash.cli.plot.main",
  "sourmash.cli.plot.subparser",
  "sourmash.cli.sbt_combine",
  "sourmash.cli.sbt_combine.main",
  "sourmash.cli.sbt_combine.subparser",
  "sourmash.cli.search",
  "sourmash.cli.search.add_ksize_arg",
  "sourmash.cli.search.add_moltype_args",
  "sourmash.cli.search.main",
  "sourmash.cli.search.subparser",
  "sourmash.cli.sig",
  "sourmash.cli.sig.cat",
  "sourmash.cli.sig.cat.error",
  "sourmash.cli.sig.cat.main",
  "sourmash.cli.sig.cat.notify",
  "sourmash.cli.sig.cat.print_results",
  "sourmash.cli.sig.cat.subparser",
  "sourmash.cli.sig.clidir",
  "sourmash.cli.sig.desc",
  "sourmash.cli.sig.describe",
  "sourmash.cli.sig.describe.error",
  "sourmash.cli.sig.describe.main",
  "sourmash.cli.sig.describe.notify",
  "sourmash.cli.sig.describe.print_results",
  "sourmash.cli.sig.describe.subparser",
  "sourmash.cli.sig.docstring",
  "sourmash.cli.sig.downsample",
  "sourmash.cli.sig.downsample.add_ksize_arg",
  "sourmash.cli.sig.downsample.add_moltype_args",
  "sourmash.cli.sig.downsample.main",
  "sourmash.cli.sig.downsample.subparser",
  "sourmash.cli.sig.export",
  "sourmash.cli.sig.export.add_ksize_arg",
  "sourmash.cli.sig.export.add_moltype_args",
  "sourmash.cli.sig.export.main",
  "sourmash.cli.sig.export.subparser",
  "sourmash.cli.sig.extract",
  "sourmash.cli.sig.extract.add_ksize_arg",
  "sourmash.cli.sig.extract.add_moltype_args",
  "sourmash.cli.sig.extract.main",
  "sourmash.cli.sig.extract.subparser",
  "sourmash.cli.sig.filter",
  "sourmash.cli.sig.filter.add_ksize_arg",
  "sourmash.cli.sig.filter.add_moltype_args",
  "sourmash.cli.sig.filter.main",
  "sourmash.cli.sig.filter.subparser",
  "sourmash.cli.sig.flatten",
  "sourmash.cli.sig.flatten.add_ksize_arg",
  "sourmash.cli.sig.flatten.add_moltype_args",
  "sourmash.cli.sig.flatten.main",
  "sourmash.cli.sig.flatten.subparser",
  "sourmash.cli.sig.helpstring",
  "sourmash.cli.sig.ingest",
  "sourmash.cli.sig.ingest.main",
  "sourmash.cli.sig.ingest.subparser",
  "sourmash.cli.sig.intersect",
  "sourmash.cli.sig.intersect.add_ksize_arg",
  "sourmash.cli.sig.intersect.add_moltype_args",
  "sourmash.cli.sig.intersect.main",
  "sourmash.cli.sig.intersect.subparser",
  "sourmash.cli.sig.merge",
  "sourmash.cli.sig.merge.add_ksize_arg",
  "sourmash.cli.sig.merge.add_moltype_args",
  "sourmash.cli.sig.merge.main",
  "sourmash.cli.sig.merge.subparser",
  "sourmash.cli.sig.ops",
  "sourmash.cli.sig.overlap",
  "sourmash.cli.sig.overlap.add_ksize_arg",
  "sourmash.cli.sig.overlap.add_moltype_args",
  "sourmash.cli.sig.overlap.main",
  "sourmash.cli.sig.overlap.subparser",
  "sourmash.cli.sig.rename",
  "sourmash.cli.sig.rename.add_ksize_arg",
  "sourmash.cli.sig.rename.add_moltype_args",
  "sourmash.cli.sig.rename.main",
  "sourmash.cli.sig.rename.subparser",
  "sourmash.cli.sig.s",
  "sourmash.cli.sig.split",
  "sourmash.cli.sig.split.main",
  "sourmash.cli.sig.split.subparser",
  "sourmash.cli.sig.subcmd",
  "sourmash.cli.sig.subparser",
  "sourmash.cli.sig.subparser.clidir",
  "sourmash.cli.sig.subparser.desc",
  "sourmash.cli.sig.subparser.docstring",
  "sourmash.cli.sig.subparser.helpstring",
  "sourmash.cli.sig.subparser.ops",
  "sourmash.cli.sig.subparser.s",
  "sourmash.cli.sig.subparser.subcmd",
  "sourmash.cli.sig.subparser.subparser",
  "sourmash.cli.sig.subtract",
  "sourmash.cli.sig.subtract.add_ksize_arg",
  "sourmash.cli.sig.subtract.add_moltype_args",
  "sourmash.cli.sig.subtract.main",
  "sourmash.cli.sig.subtract.subparser",
  "sourmash.cli.signature",
  "sourmash.cli.storage",
  "sourmash.cli.storage.clidir",
  "sourmash.cli.storage.convert",
  "sourmash.cli.storage.convert.main",
  "sourmash.cli.storage.convert.subparser",
  "sourmash.cli.storage.desc",
  "sourmash.cli.storage.docstring",
  "sourmash.cli.storage.helpstring",
  "sourmash.cli.storage.ops",
  "sourmash.cli.storage.s",
  "sourmash.cli.storage.subcmd",
  "sourmash.cli.storage.subparser",
  "sourmash.cli.storage.subparser.clidir",
  "sourmash.cli.storage.subparser.desc",
  "sourmash.cli.storage.subparser.docstring",
  "sourmash.cli.storage.subparser.helpstring",
  "sourmash.cli.storage.subparser.ops",
  "sourmash.cli.storage.subparser.s",
  "sourmash.cli.storage.subparser.subcmd",
  "sourmash.cli.storage.subparser.subparser",
  "sourmash.cli.utils",
  "sourmash.cli.utils.add_construct_moltype_args",
  "sourmash.cli.utils.add_ksize_arg",
  "sourmash.cli.utils.add_moltype_args",
  "sourmash.cli.utils.command_list",
  "sourmash.cli.utils.opfilter",
  "sourmash.cli.watch",
  "sourmash.cli.watch.add_ksize_arg",
  "sourmash.cli.watch.add_moltype_args",
  "sourmash.cli.watch.main",
  "sourmash.cli.watch.subparser",
  "sourmash.command_compute",
  "sourmash.command_compute.ComputeParameters",
  "sourmash.command_compute.DEFAULT_COMPUTE_K",
  "sourmash.command_compute.DEFAULT_LINE_COUNT",
  "sourmash.command_compute.__dealloc_func__",
  "sourmash.command_compute._compute_individual",
  "sourmash.command_compute._compute_merged",
  "sourmash.command_compute._objptr",
  "sourmash.command_compute._shared",
  "sourmash.command_compute.add_seq",
  "sourmash.command_compute.build_siglist",
  "sourmash.command_compute.compute",
  "sourmash.command_compute.make_minhashes",
  "sourmash.command_compute.save_siglist",
  "sourmash.commands",
  "sourmash.commands.DEFAULT_N",
  "sourmash.commands.WATERMARK_SIZE",
  "sourmash.commands.categorize",
  "sourmash.commands.compare",
  "sourmash.commands.dump",
  "sourmash.commands.gather",
  "sourmash.commands.import_csv",
  "sourmash.commands.index",
  "sourmash.commands.migrate",
  "sourmash.commands.multigather",
  "sourmash.commands.plot",
  "sourmash.commands.sbt_combine",
  "sourmash.commands.search",
  "sourmash.commands.watch",
  "sourmash.compare",
  "sourmash.compare.compare_all_pairs",
  "sourmash.compare.compare_parallel",
  "sourmash.compare.compare_serial",
  "sourmash.compare.get_similarities_at_index",
  "sourmash.compare.similarity_args_unpack",
  "sourmash.compare.to_memmap",
  "sourmash.create_sbt_index",
  "sourmash.exceptions",
  "sourmash.exceptions.IndexNotSupported",
  "sourmash.exceptions.SourmashError",
  "sourmash.exceptions.__all__",
  "sourmash.exceptions._get_error_base",
  "sourmash.exceptions._make_error",
  "sourmash.exceptions._make_exceptions",
  "sourmash.exceptions.exceptions_by_code",
  "sourmash.ffi",
  "sourmash.fig",
  "sourmash.fig.load_matrix_and_labels",
  "sourmash.fig.plot_composite_matrix",
  "sourmash.get_minhash_default_seed",
  "sourmash.get_minhash_max_hash",
  "sourmash.index",
  "sourmash.index.Index",
  "sourmash.index.LinearIndex",
  "sourmash.lca",
  "sourmash.lca.LCA_Database",
  "sourmash.lca.LineagePair",
  "sourmash.lca.__main__",
  "sourmash.lca.__main__.main",
  "sourmash.lca.__main__.usage",
  "sourmash.lca.build_tree",
  "sourmash.lca.classify",
  "sourmash.lca.command_classify",
  "sourmash.lca.command_classify.DEFAULT_THRESHOLD",
  "sourmash.lca.command_classify.classify",
  "sourmash.lca.command_compare_csv",
  "sourmash.lca.command_compare_csv.compare_csv",
  "sourmash.lca.command_gather",
  "sourmash.lca.command_gather.LCAGatherResult",
  "sourmash.lca.command_gather.format_lineage",
  "sourmash.lca.command_gather.gather_main",
  "sourmash.lca.command_gather.gather_signature",
  "sourmash.lca.command_index",
  "sourmash.lca.command_index.DEFAULT_LOAD_K",
  "sourmash.lca.command_index.debug",
  "sourmash.lca.command_index.error",
  "sourmash.lca.command_index.generate_report",
  "sourmash.lca.command_index.index",
  "sourmash.lca.command_index.load_file_as_signatures",
  "sourmash.lca.command_index.load_signatures",
  "sourmash.lca.command_index.load_taxonomy_assignments",
  "sourmash.lca.command_index.notify",
  "sourmash.lca.command_index.set_quiet",
  "sourmash.lca.command_index.sourmash_args",
  "sourmash.lca.command_rankinfo",
  "sourmash.lca.command_rankinfo.make_lca_counts",
  "sourmash.lca.command_rankinfo.rankinfo_main",
  "sourmash.lca.command_summarize",
  "sourmash.lca.command_summarize.DEFAULT_THRESHOLD",
  "sourmash.lca.command_summarize.count_signature",
  "sourmash.lca.command_summarize.load_and_combine",
  "sourmash.lca.command_summarize.load_singletons_and_count",
  "sourmash.lca.command_summarize.output_csv",
  "sourmash.lca.command_summarize.output_results",
  "sourmash.lca.command_summarize.summarize",
  "sourmash.lca.count_lca_for_assignments",
  "sourmash.lca.display_lineage",
  "sourmash.lca.find_lca",
  "sourmash.lca.gather_assignments",
  "sourmash.lca.gather_main",
  "sourmash.lca.index",
  "sourmash.lca.lca_db",
  "sourmash.lca.lca_db.Index",
  "sourmash.lca.lca_db.LCA_Database",
  "sourmash.lca.lca_db._get_max_hash_for_scaled",
  "sourmash.lca.lca_db.cached_property",
  "sourmash.lca.lca_db.debug",
  "sourmash.lca.lca_db.error",
  "sourmash.lca.lca_db.load_databases",
  "sourmash.lca.lca_db.load_single_database",
  "sourmash.lca.lca_db.notify",
  "sourmash.lca.lca_utils",
  "sourmash.lca.lca_utils.LineagePair",
  "sourmash.lca.lca_utils.__all__",
  "sourmash.lca.lca_utils.build_tree",
  "sourmash.lca.lca_utils.check_files_exist",
  "sourmash.lca.lca_utils.count_lca_for_assignments",
  "sourmash.lca.lca_utils.debug",
  "sourmash.lca.lca_utils.display_lineage",
  "sourmash.lca.lca_utils.error",
  "sourmash.lca.lca_utils.filter_null",
  "sourmash.lca.lca_utils.find_lca",
  "sourmash.lca.lca_utils.gather_assignments",
  "sourmash.lca.lca_utils.is_lineage_match",
  "sourmash.lca.lca_utils.make_lineage",
  "sourmash.lca.lca_utils.notify",
  "sourmash.lca.lca_utils.null_names",
  "sourmash.lca.lca_utils.pop_to_rank",
  "sourmash.lca.lca_utils.taxlist",
  "sourmash.lca.lca_utils.zip_lineage",
  "sourmash.lca.main",
  "sourmash.lca.rankinfo_main",
  "sourmash.lca.summarize_main",
  "sourmash.lca.taxlist",
  "sourmash.lca.zip_lineage",
  "sourmash.lib",
  "sourmash.load_file_as_index",
  "sourmash.load_file_as_signatures",
  "sourmash.load_one_signature",
  "sourmash.load_sbt_index",
  "sourmash.load_signatures",
  "sourmash.logging",
  "sourmash.logging._debug",
  "sourmash.logging.debug",
  "sourmash.logging.error",
  "sourmash.logging.notify",
  "sourmash.logging.print_results",
  "sourmash.logging.set_quiet",
  "sourmash.logging.test_error",
  "sourmash.logging.test_notify",
  "sourmash.minhash",
  "sourmash.minhash.MINHASH_DEFAULT_SEED",
  "sourmash.minhash.MINHASH_MAX_HASH",
  "sourmash.minhash.MinHash",
  "sourmash.minhash._HashesWrapper",
  "sourmash.minhash.__dealloc_func__",
  "sourmash.minhash._get_max_hash_for_scaled",
  "sourmash.minhash._get_scaled_for_max_hash",
  "sourmash.minhash._objptr",
  "sourmash.minhash._shared",
  "sourmash.minhash.get_minhash_default_seed",
  "sourmash.minhash.get_minhash_max_hash",
  "sourmash.minhash.hash_murmur",
  "sourmash.minhash.to_bytes",
  "sourmash.minhash.translate_codon",
  "sourmash.nodegraph",
  "sourmash.nodegraph.Nodegraph",
  "sourmash.nodegraph.calc_expected_collisions",
  "sourmash.nodegraph.extract_nodegraph_info",
  "sourmash.np_utils",
  "sourmash.np_utils.to_memmap",
  "sourmash.save_signatures",
  "sourmash.sbt",
  "sourmash.sbt.GraphFactory",
  "sourmash.sbt.Leaf",
  "sourmash.sbt.Node",
  "sourmash.sbt.SBT",
  "sourmash.sbt.STORAGES",
  "sourmash.sbt.convert_cmd",
  "sourmash.sbt.filter_distance",
  "sourmash.sbt_storage",
  "sourmash.sbt_storage.FSStorage",
  "sourmash.sbt_storage.IPFSStorage",
  "sourmash.sbt_storage.RedisStorage",
  "sourmash.sbt_storage.Storage",
  "sourmash.sbt_storage.TarStorage",
  "sourmash.sbt_storage.ZipStorage",
  "sourmash.sbtmh",
  "sourmash.sbtmh.GatherMinHashes",
  "sourmash.sbtmh.SearchMinHashesFindBest",
  "sourmash.sbtmh.SigLeaf",
  "sourmash.sbtmh._max_jaccard_underneath_internal_node",
  "sourmash.sbtmh.create_sbt_index",
  "sourmash.sbtmh.load_sbt_index",
  "sourmash.sbtmh.search_minhashes",
  "sourmash.sbtmh.search_sbt_index",
  "sourmash.search",
  "sourmash.search_sbt_index",
  "sourmash.sig",
  "sourmash.sig.__main__",
  "sourmash.sig.__main__.FileOutput",
  "sourmash.sig.__main__._check_abundance_compatibility",
  "sourmash.sig.__main__._get_max_hash_for_scaled",
  "sourmash.sig.__main__._set_num_scaled",
  "sourmash.sig.__main__.cat",
  "sourmash.sig.__main__.debug",
  "sourmash.sig.__main__.describe",
  "sourmash.sig.__main__.downsample",
  "sourmash.sig.__main__.error",
  "sourmash.sig.__main__.export",
  "sourmash.sig.__main__.extract",
  "sourmash.sig.__main__.filter",
  "sourmash.sig.__main__.flatten",
  "sourmash.sig.__main__.intersect",
  "sourmash.sig.__main__.main",
  "sourmash.sig.__main__.merge",
  "sourmash.sig.__main__.notify",
  "sourmash.sig.__main__.overlap",
  "sourmash.sig.__main__.print_results",
  "sourmash.sig.__main__.rename",
  "sourmash.sig.__main__.set_quiet",
  "sourmash.sig.__main__.sig_import",
  "sourmash.sig.__main__.sourmash_args",
  "sourmash.sig.__main__.split",
  "sourmash.sig.__main__.subtract",
  "sourmash.sig.__main__.usage",
  "sourmash.sig.main",
  "sourmash.signature",
  "sourmash.signature.SIGNATURE_VERSION",
  "sourmash.signature.SigInput",
  "sourmash.signature.SourmashSignature",
  "sourmash.signature._detect_input_type",
  "sourmash.signature.load_one_signature",
  "sourmash.signature.load_signatures",
  "sourmash.signature.save_signatures",
  "sourmash.sourmash_args",
  "sourmash.sourmash_args.DEFAULT_LOAD_K",
  "sourmash.sourmash_args.DEFAULT_N",
  "sourmash.sourmash_args.DatabaseType",
  "sourmash.sourmash_args.FileOutput",
  "sourmash.sourmash_args.LoadSingleSignatures",
  "sourmash.sourmash_args.SignatureLoadingProgress",
  "sourmash.sourmash_args._load_database",
  "sourmash.sourmash_args._select_sigs",
  "sourmash.sourmash_args.calculate_moltype",
  "sourmash.sourmash_args.check_lca_db_is_compatible",
  "sourmash.sourmash_args.check_signatures_are_compatible",
  "sourmash.sourmash_args.check_tree_is_compatible",
  "sourmash.sourmash_args.filter_compatible_signatures",
  "sourmash.sourmash_args.get_moltype",
  "sourmash.sourmash_args.load_dbs_and_sigs",
  "sourmash.sourmash_args.load_file_as_index",
  "sourmash.sourmash_args.load_file_as_signatures",
  "sourmash.sourmash_args.load_file_list_of_signatures",
  "sourmash.sourmash_args.load_query_signature",
  "sourmash.sourmash_args.load_sbt_index",
  "sourmash.sourmash_args.load_single_database",
  "sourmash.sourmash_args.traverse_find_sigs",
  "sourmash.utils",
  "sourmash.utils.RustObject",
  "sourmash.utils.RustObject.__dealloc_func__",
  "sourmash.utils.RustObject._objptr",
  "sourmash.utils.RustObject._shared",
  "sourmash.utils.attached_refs",
  "sourmash.utils.decode_str",
  "sourmash.utils.encode_str",
  "sourmash.utils.rustcall",
  "sourmash.version",
  "sourmash.version.version"
 ]
}