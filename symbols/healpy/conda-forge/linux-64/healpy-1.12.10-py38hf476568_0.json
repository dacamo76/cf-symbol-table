{
 "errors": {
  "healpy.zoomtool": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/numpy/lib/shape_base.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 413, in _infer_expr_stmt",
    "    value_set = check_tuple_assignments(n, value_set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 839, in check_tuple_assignments",
    "    value_set = lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 71, in get_filters",
    "    yield from self.iter_star_filters()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 124, in star_imports",
    "    modules += module.star_imports()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "healpy.Alm",
  "healpy.Rotator",
  "healpy.UNSEEN",
  "healpy.__version__",
  "healpy.alm2cl",
  "healpy.alm2map",
  "healpy.almxfl",
  "healpy.anafast",
  "healpy.ang2pix",
  "healpy.ang2vec",
  "healpy.azeqview",
  "healpy.beam2bl",
  "healpy.bl2beam",
  "healpy.boundaries",
  "healpy.cartview",
  "healpy.check_max_nside",
  "healpy.cookbook",
  "healpy.cookbook.is_like2d",
  "healpy.cookbook.is_seq",
  "healpy.cookbook.len_array_or_arrays",
  "healpy.delgraticules",
  "healpy.dir2vec",
  "healpy.fit_dipole",
  "healpy.fit_monopole",
  "healpy.fitsfunc",
  "healpy.fitsfunc.HealpixFitsWarning",
  "healpy.fitsfunc._get_hdu",
  "healpy.fitsfunc.getformat",
  "healpy.fitsfunc.read_alm",
  "healpy.fitsfunc.read_cl",
  "healpy.fitsfunc.read_map",
  "healpy.fitsfunc.standard_column_names",
  "healpy.fitsfunc.write_alm",
  "healpy.fitsfunc.write_cl",
  "healpy.fitsfunc.write_map",
  "healpy.gauss_beam",
  "healpy.get_all_neighbours",
  "healpy.get_interp_val",
  "healpy.get_interp_weights",
  "healpy.get_map_size",
  "healpy.get_nside",
  "healpy.gnomview",
  "healpy.graticule",
  "healpy.isnpixok",
  "healpy.isnsideok",
  "healpy.ma",
  "healpy.mollview",
  "healpy.mollzoom",
  "healpy.nest2ring",
  "healpy.newvisufunc",
  "healpy.newvisufunc.ThetaFormatterShiftPi",
  "healpy.newvisufunc.__all__",
  "healpy.newvisufunc.lonlat",
  "healpy.newvisufunc.mollview",
  "healpy.newvisufunc.projplot",
  "healpy.npix2nside",
  "healpy.nside2npix",
  "healpy.nside2order",
  "healpy.nside2pixarea",
  "healpy.nside2resol",
  "healpy.order2nside",
  "healpy.orthview",
  "healpy.pix2ang",
  "healpy.pix2ring",
  "healpy.pix2vec",
  "healpy.pix2xyf",
  "healpy.pixelfunc",
  "healpy.pixelfunc.UNSEEN",
  "healpy.pixelfunc.__all__",
  "healpy.pixelfunc._ud_grade_core",
  "healpy.pixelfunc.accept_ma",
  "healpy.pixelfunc.ang2pix",
  "healpy.pixelfunc.ang2vec",
  "healpy.pixelfunc.check_nside",
  "healpy.pixelfunc.check_theta_valid",
  "healpy.pixelfunc.fit_dipole",
  "healpy.pixelfunc.fit_monopole",
  "healpy.pixelfunc.get_all_neighbours",
  "healpy.pixelfunc.get_interp_val",
  "healpy.pixelfunc.get_interp_weights",
  "healpy.pixelfunc.get_map_size",
  "healpy.pixelfunc.get_min_valid_nside",
  "healpy.pixelfunc.get_nside",
  "healpy.pixelfunc.is_ma",
  "healpy.pixelfunc.isnpixok",
  "healpy.pixelfunc.isnsideok",
  "healpy.pixelfunc.lonlat2thetaphi",
  "healpy.pixelfunc.ma",
  "healpy.pixelfunc.nest2ring",
  "healpy.pixelfunc.npix2nside",
  "healpy.pixelfunc.nside2npix",
  "healpy.pixelfunc.nside2order",
  "healpy.pixelfunc.nside2pixarea",
  "healpy.pixelfunc.nside2resol",
  "healpy.pixelfunc.order2nside",
  "healpy.pixelfunc.pix2ang",
  "healpy.pixelfunc.pix2vec",
  "healpy.pixelfunc.pix2xyf",
  "healpy.pixelfunc.remove_dipole",
  "healpy.pixelfunc.remove_monopole",
  "healpy.pixelfunc.reorder",
  "healpy.pixelfunc.ring2nest",
  "healpy.pixelfunc.thetaphi2lonlat",
  "healpy.pixelfunc.ud_grade",
  "healpy.pixelfunc.vec2ang",
  "healpy.pixelfunc.vec2pix",
  "healpy.pixelfunc.xyf2pix",
  "healpy.pixwin",
  "healpy.projaxes",
  "healpy.projaxes.AzimuthalAxes",
  "healpy.projaxes.BoundaryLocator",
  "healpy.projaxes.CartesianAxes",
  "healpy.projaxes.GnomonicAxes",
  "healpy.projaxes.HistEqNorm",
  "healpy.projaxes.HpxAzimuthalAxes",
  "healpy.projaxes.HpxCartesianAxes",
  "healpy.projaxes.HpxGnomonicAxes",
  "healpy.projaxes.HpxMollweideAxes",
  "healpy.projaxes.HpxOrthographicAxes",
  "healpy.projaxes.LinNorm2",
  "healpy.projaxes.LogNorm2",
  "healpy.projaxes.MollweideAxes",
  "healpy.projaxes.OrthographicAxes",
  "healpy.projaxes.SphericalProjAxes",
  "healpy.projaxes.create_colormap",
  "healpy.projaxes.dtor",
  "healpy.projaxes.get_color_table",
  "healpy.projaxes.pi",
  "healpy.projector",
  "healpy.projector.AzimuthalProj",
  "healpy.projector.CartesianProj",
  "healpy.projector.GnomonicProj",
  "healpy.projector.MollweideProj",
  "healpy.projector.OrthographicProj",
  "healpy.projector.SphericalProj",
  "healpy.projector.dtor",
  "healpy.projector.pi",
  "healpy.projplot",
  "healpy.projscatter",
  "healpy.projtext",
  "healpy.query_disc",
  "healpy.query_polygon",
  "healpy.query_strip",
  "healpy.read_alm",
  "healpy.read_cl",
  "healpy.read_map",
  "healpy.remove_dipole",
  "healpy.remove_monopole",
  "healpy.reorder",
  "healpy.ring2nest",
  "healpy.ringinfo",
  "healpy.rotate_alm",
  "healpy.rotator",
  "healpy.rotator.ConsistencyWarning",
  "healpy.rotator.Rotator",
  "healpy.rotator.angdist",
  "healpy.rotator.check_coord",
  "healpy.rotator.coordname",
  "healpy.rotator.coordsys2euler_zyz",
  "healpy.rotator.dir2vec",
  "healpy.rotator.euler",
  "healpy.rotator.get_coordconv_matrix",
  "healpy.rotator.get_rotation_matrix",
  "healpy.rotator.normalise_coord",
  "healpy.rotator.normalise_rot",
  "healpy.rotator.normalize_vec",
  "healpy.rotator.rotateDirection",
  "healpy.rotator.rotateVector",
  "healpy.rotator.vec2dir",
  "healpy.set_g_clim",
  "healpy.smoothalm",
  "healpy.smoothing",
  "healpy.sphtfunc",
  "healpy.sphtfunc.Alm",
  "healpy.sphtfunc.DATAPATH",
  "healpy.sphtfunc.DATAURL",
  "healpy.sphtfunc.FutureChangeWarning",
  "healpy.sphtfunc.MAX_NSIDE",
  "healpy.sphtfunc.alm2cl",
  "healpy.sphtfunc.alm2map",
  "healpy.sphtfunc.almxfl",
  "healpy.sphtfunc.anafast",
  "healpy.sphtfunc.beam2bl",
  "healpy.sphtfunc.bl2beam",
  "healpy.sphtfunc.check_max_nside",
  "healpy.sphtfunc.gauss_beam",
  "healpy.sphtfunc.load_sample_spectra",
  "healpy.sphtfunc.map2alm",
  "healpy.sphtfunc.new_to_old_spectra_order",
  "healpy.sphtfunc.pi",
  "healpy.sphtfunc.pixwin",
  "healpy.sphtfunc.smoothalm",
  "healpy.sphtfunc.smoothing",
  "healpy.sphtfunc.synalm",
  "healpy.sphtfunc.synfast",
  "healpy.synalm",
  "healpy.synfast",
  "healpy.test",
  "healpy.test.conftest",
  "healpy.test.conftest.pytest_configure",
  "healpy.test.test_fitsfunc",
  "healpy.test.test_fitsfunc.DATAPATH",
  "healpy.test.test_fitsfunc.DATAURL",
  "healpy.test.test_fitsfunc.FutureChangeWarning",
  "healpy.test.test_fitsfunc.HealpixFitsWarning",
  "healpy.test.test_fitsfunc.MAX_NSIDE",
  "healpy.test.test_fitsfunc.TestFitsFunc",
  "healpy.test.test_fitsfunc.TestReadWriteAlm",
  "healpy.test.test_fitsfunc.TestReadWriteCl",
  "healpy.test.test_fitsfunc._get_hdu",
  "healpy.test.test_fitsfunc.alm2cl",
  "healpy.test.test_fitsfunc.alm2map",
  "healpy.test.test_fitsfunc.almxfl",
  "healpy.test.test_fitsfunc.anafast",
  "healpy.test.test_fitsfunc.beam2bl",
  "healpy.test.test_fitsfunc.bl2beam",
  "healpy.test.test_fitsfunc.check_max_nside",
  "healpy.test.test_fitsfunc.gauss_beam",
  "healpy.test.test_fitsfunc.getformat",
  "healpy.test.test_fitsfunc.load_sample_spectra",
  "healpy.test.test_fitsfunc.map2alm",
  "healpy.test.test_fitsfunc.new_to_old_spectra_order",
  "healpy.test.test_fitsfunc.pi",
  "healpy.test.test_fitsfunc.pixwin",
  "healpy.test.test_fitsfunc.read_alm",
  "healpy.test.test_fitsfunc.read_cl",
  "healpy.test.test_fitsfunc.read_map",
  "healpy.test.test_fitsfunc.smoothalm",
  "healpy.test.test_fitsfunc.smoothing",
  "healpy.test.test_fitsfunc.standard_column_names",
  "healpy.test.test_fitsfunc.synalm",
  "healpy.test.test_fitsfunc.synfast",
  "healpy.test.test_fitsfunc.test_getformat",
  "healpy.test.test_fitsfunc.write_alm",
  "healpy.test.test_fitsfunc.write_cl",
  "healpy.test.test_fitsfunc.write_map",
  "healpy.test.test_pixelfunc",
  "healpy.test.test_pixelfunc.TestPixelFunc",
  "healpy.test.test_pixelfunc.UNSEEN",
  "healpy.test.test_pixelfunc.__all__",
  "healpy.test.test_pixelfunc._ud_grade_core",
  "healpy.test.test_pixelfunc.accept_ma",
  "healpy.test.test_pixelfunc.ang2pix",
  "healpy.test.test_pixelfunc.ang2vec",
  "healpy.test.test_pixelfunc.check_nside",
  "healpy.test.test_pixelfunc.check_theta_valid",
  "healpy.test.test_pixelfunc.fit_dipole",
  "healpy.test.test_pixelfunc.fit_monopole",
  "healpy.test.test_pixelfunc.get_all_neighbours",
  "healpy.test.test_pixelfunc.get_interp_val",
  "healpy.test.test_pixelfunc.get_interp_weights",
  "healpy.test.test_pixelfunc.get_map_size",
  "healpy.test.test_pixelfunc.get_min_valid_nside",
  "healpy.test.test_pixelfunc.get_nside",
  "healpy.test.test_pixelfunc.is_ma",
  "healpy.test.test_pixelfunc.isnpixok",
  "healpy.test.test_pixelfunc.isnsideok",
  "healpy.test.test_pixelfunc.lonlat2thetaphi",
  "healpy.test.test_pixelfunc.ma",
  "healpy.test.test_pixelfunc.nest2ring",
  "healpy.test.test_pixelfunc.npix2nside",
  "healpy.test.test_pixelfunc.nside2npix",
  "healpy.test.test_pixelfunc.nside2order",
  "healpy.test.test_pixelfunc.nside2pixarea",
  "healpy.test.test_pixelfunc.nside2resol",
  "healpy.test.test_pixelfunc.order2nside",
  "healpy.test.test_pixelfunc.pix2ang",
  "healpy.test.test_pixelfunc.pix2vec",
  "healpy.test.test_pixelfunc.pix2xyf",
  "healpy.test.test_pixelfunc.remove_dipole",
  "healpy.test.test_pixelfunc.remove_monopole",
  "healpy.test.test_pixelfunc.reorder",
  "healpy.test.test_pixelfunc.ring2nest",
  "healpy.test.test_pixelfunc.thetaphi2lonlat",
  "healpy.test.test_pixelfunc.ud_grade",
  "healpy.test.test_pixelfunc.vec2ang",
  "healpy.test.test_pixelfunc.vec2pix",
  "healpy.test.test_pixelfunc.xyf2pix",
  "healpy.test.test_pixelweights",
  "healpy.test.test_pixelweights.TestMap2Alm",
  "healpy.test.test_query_disc",
  "healpy.test.test_query_disc.TestQueryDisc",
  "healpy.test.test_rotator",
  "healpy.test.test_rotator.Rotator",
  "healpy.test.test_rotator.euler",
  "healpy.test.test_rotator.path",
  "healpy.test.test_rotator.set_random_seed",
  "healpy.test.test_rotator.test_euler",
  "healpy.test.test_rotator.test_rotate_dipole_and_back",
  "healpy.test.test_rotator.test_rotate_map_polarization",
  "healpy.test.test_rotator.test_rotate_vector",
  "healpy.test.test_rotator.test_rotator_eq",
  "healpy.test.test_rotator.test_rotator_input_lengths",
  "healpy.test.test_rotator.test_rotator_input_type",
  "healpy.test.test_sphtfunc",
  "healpy.test.test_sphtfunc.TestSphtFunc",
  "healpy.test.test_spinfunc",
  "healpy.test.test_spinfunc.TestSpinFunc",
  "healpy.test.test_spinfunc.calm",
  "healpy.test.test_spinfunc.clms",
  "healpy.test.test_spinfunc.galm",
  "healpy.test.test_spinfunc.glms",
  "healpy.test.test_spinfunc.lmax_precomputed",
  "healpy.test.test_spinfunc.maps",
  "healpy.test.test_spinfunc.nside_precomputed",
  "healpy.test.test_visufunc",
  "healpy.test.test_visufunc.TestNoCrash",
  "healpy.test.test_visufunc.__all__",
  "healpy.test.test_visufunc.azeqview",
  "healpy.test.test_visufunc.cartview",
  "healpy.test.test_visufunc.delgraticules",
  "healpy.test.test_visufunc.dtor",
  "healpy.test.test_visufunc.gnomview",
  "healpy.test.test_visufunc.graticule",
  "healpy.test.test_visufunc.mollview",
  "healpy.test.test_visufunc.orthview",
  "healpy.test.test_visufunc.pi",
  "healpy.test.test_visufunc.projplot",
  "healpy.test.test_visufunc.projscatter",
  "healpy.test.test_visufunc.projtext",
  "healpy.ud_grade",
  "healpy.vec2ang",
  "healpy.vec2dir",
  "healpy.vec2pix",
  "healpy.version",
  "healpy.version.__version__",
  "healpy.visufunc",
  "healpy.visufunc.__all__",
  "healpy.visufunc.azeqview",
  "healpy.visufunc.cartview",
  "healpy.visufunc.delgraticules",
  "healpy.visufunc.dtor",
  "healpy.visufunc.gnomview",
  "healpy.visufunc.graticule",
  "healpy.visufunc.mollview",
  "healpy.visufunc.orthview",
  "healpy.visufunc.pi",
  "healpy.visufunc.projplot",
  "healpy.visufunc.projscatter",
  "healpy.visufunc.projtext",
  "healpy.write_alm",
  "healpy.write_cl",
  "healpy.write_map",
  "healpy.xyf2pix",
  "healpy.zoomtool"
 ]
}