{
 "errors": {
  "orangecontrib.text.tests.test_guardian": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/unittest/case.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 311, in _complete_python",
    "    completion_names += self._complete_inherited(is_function=False)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 424, in _complete_inherited",
    "    next(filters)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 206, in get_filters",
    "    metaclasses = self.get_metaclasses()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 394, in get_metaclasses",
    "    for value in lazy_base.infer():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py\", line 45, in get_filters",
    "    stub_filters = self._get_stub_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/stub_value.py\", line 40, in _get_stub_filters",
    "    )] + list(self.iter_star_filters())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "orangecontrib.text.Corpus",
  "orangecontrib.text.__git_revision__",
  "orangecontrib.text.__version__",
  "orangecontrib.text.corpus",
  "orangecontrib.text.corpus.BowVectorizer",
  "orangecontrib.text.corpus.Corpus",
  "orangecontrib.text.corpus._check_arrays",
  "orangecontrib.text.corpus.get_sample_corpora_dir",
  "orangecontrib.text.country_codes",
  "orangecontrib.text.country_codes.CC_EUROPE",
  "orangecontrib.text.country_codes.CC_USA",
  "orangecontrib.text.country_codes.CC_WORLD",
  "orangecontrib.text.country_codes.EUROPE_CITIES",
  "orangecontrib.text.country_codes.INV_CC_EUROPE",
  "orangecontrib.text.country_codes.INV_CC_USA",
  "orangecontrib.text.country_codes.INV_CC_WORLD",
  "orangecontrib.text.country_codes.SET_CC_EUROPE",
  "orangecontrib.text.country_codes.SET_CC_USA",
  "orangecontrib.text.country_codes.US_CITIES",
  "orangecontrib.text.country_codes.WORLD_CITIES",
  "orangecontrib.text.country_codes._invert_mapping",
  "orangecontrib.text.country_codes.i",
  "orangecontrib.text.guardian",
  "orangecontrib.text.guardian.ARTICLES_PER_PAGE",
  "orangecontrib.text.guardian.BASE_URL",
  "orangecontrib.text.guardian.Corpus",
  "orangecontrib.text.guardian.TheGuardianAPI",
  "orangecontrib.text.guardian.TheGuardianCredentials",
  "orangecontrib.text.guardian.api",
  "orangecontrib.text.guardian.c",
  "orangecontrib.text.guardian.credentials",
  "orangecontrib.text.import_documents",
  "orangecontrib.text.import_documents.Corpus",
  "orangecontrib.text.import_documents.DefaultFormats",
  "orangecontrib.text.import_documents.DocxReader",
  "orangecontrib.text.import_documents.ImportDocuments",
  "orangecontrib.text.import_documents.OdtReader",
  "orangecontrib.text.import_documents.PdfReader",
  "orangecontrib.text.import_documents.Reader",
  "orangecontrib.text.import_documents.TextData",
  "orangecontrib.text.import_documents.TextDataError",
  "orangecontrib.text.import_documents.TxtReader",
  "orangecontrib.text.import_documents.XmlReader",
  "orangecontrib.text.import_documents.log",
  "orangecontrib.text.language_codes",
  "orangecontrib.text.language_codes.code2lang",
  "orangecontrib.text.language_codes.lang2code",
  "orangecontrib.text.misc",
  "orangecontrib.text.misc.environ",
  "orangecontrib.text.misc.environ.nltk_data_dir",
  "orangecontrib.text.misc.nltk_data_dir",
  "orangecontrib.text.nltk_data_dir",
  "orangecontrib.text.nyt",
  "orangecontrib.text.nyt.BASE_URL",
  "orangecontrib.text.nyt.BATCH_SIZE",
  "orangecontrib.text.nyt.Corpus",
  "orangecontrib.text.nyt.MAX_DOCS",
  "orangecontrib.text.nyt.MIN_DATE",
  "orangecontrib.text.nyt.NYT",
  "orangecontrib.text.nyt.SLEEP",
  "orangecontrib.text.nyt.TIMEOUT",
  "orangecontrib.text.preprocess",
  "orangecontrib.text.preprocess.BaseNormalizer",
  "orangecontrib.text.preprocess.BaseTokenFilter",
  "orangecontrib.text.preprocess.BaseTokenizer",
  "orangecontrib.text.preprocess.BaseTransformer",
  "orangecontrib.text.preprocess.DictionaryLookupNormalizer",
  "orangecontrib.text.preprocess.FrequencyFilter",
  "orangecontrib.text.preprocess.HtmlTransformer",
  "orangecontrib.text.preprocess.LexiconFilter",
  "orangecontrib.text.preprocess.LowercaseTransformer",
  "orangecontrib.text.preprocess.PorterStemmer",
  "orangecontrib.text.preprocess.Preprocessor",
  "orangecontrib.text.preprocess.PunktSentenceTokenizer",
  "orangecontrib.text.preprocess.RegexpFilter",
  "orangecontrib.text.preprocess.RegexpTokenizer",
  "orangecontrib.text.preprocess.SnowballStemmer",
  "orangecontrib.text.preprocess.StopwordsFilter",
  "orangecontrib.text.preprocess.StripAccentsTransformer",
  "orangecontrib.text.preprocess.TweetTokenizer",
  "orangecontrib.text.preprocess.UrlRemover",
  "orangecontrib.text.preprocess.WhitespaceTokenizer",
  "orangecontrib.text.preprocess.WordListMixin",
  "orangecontrib.text.preprocess.WordNetLemmatizer",
  "orangecontrib.text.preprocess.WordPunctTokenizer",
  "orangecontrib.text.preprocess.__all__",
  "orangecontrib.text.preprocess.base_preprocessor",
  "orangecontrib.text.preprocess.filter",
  "orangecontrib.text.preprocess.filter.BaseTokenFilter",
  "orangecontrib.text.preprocess.filter.FrequencyFilter",
  "orangecontrib.text.preprocess.filter.LexiconFilter",
  "orangecontrib.text.preprocess.filter.RegexpFilter",
  "orangecontrib.text.preprocess.filter.StopwordsFilter",
  "orangecontrib.text.preprocess.filter.WordListMixin",
  "orangecontrib.text.preprocess.filter.__all__",
  "orangecontrib.text.preprocess.filter.stopwords_listdir",
  "orangecontrib.text.preprocess.normalize",
  "orangecontrib.text.preprocess.normalize.BaseNormalizer",
  "orangecontrib.text.preprocess.normalize.DictionaryLookupNormalizer",
  "orangecontrib.text.preprocess.normalize.PorterStemmer",
  "orangecontrib.text.preprocess.normalize.SnowballStemmer",
  "orangecontrib.text.preprocess.normalize.WordNetLemmatizer",
  "orangecontrib.text.preprocess.normalize.__all__",
  "orangecontrib.text.preprocess.preprocess",
  "orangecontrib.text.preprocess.preprocess.FrequencyFilter",
  "orangecontrib.text.preprocess.preprocess.Preprocessor",
  "orangecontrib.text.preprocess.preprocess.__all__",
  "orangecontrib.text.preprocess.stopwords_listdir",
  "orangecontrib.text.preprocess.tokenize",
  "orangecontrib.text.preprocess.tokenize.BaseTokenizer",
  "orangecontrib.text.preprocess.tokenize.PunktSentenceTokenizer",
  "orangecontrib.text.preprocess.tokenize.RegexpTokenizer",
  "orangecontrib.text.preprocess.tokenize.TweetTokenizer",
  "orangecontrib.text.preprocess.tokenize.WhitespaceTokenizer",
  "orangecontrib.text.preprocess.tokenize.WordPunctTokenizer",
  "orangecontrib.text.preprocess.tokenize.__all__",
  "orangecontrib.text.preprocess.transform",
  "orangecontrib.text.preprocess.transform.BaseTransformer",
  "orangecontrib.text.preprocess.transform.HtmlTransformer",
  "orangecontrib.text.preprocess.transform.LowercaseTransformer",
  "orangecontrib.text.preprocess.transform.StripAccentsTransformer",
  "orangecontrib.text.preprocess.transform.UrlRemover",
  "orangecontrib.text.preprocess.transform.__all__",
  "orangecontrib.text.pubmed",
  "orangecontrib.text.pubmed.BASE_ENTRY_URL",
  "orangecontrib.text.pubmed.Corpus",
  "orangecontrib.text.pubmed.PUBMED_FIELD_ABSTRACT",
  "orangecontrib.text.pubmed.PUBMED_FIELD_AUTHORS",
  "orangecontrib.text.pubmed.PUBMED_FIELD_DATE",
  "orangecontrib.text.pubmed.PUBMED_FIELD_HEADINGS",
  "orangecontrib.text.pubmed.PUBMED_FIELD_TITLE",
  "orangecontrib.text.pubmed.PUBMED_FIELD_URL",
  "orangecontrib.text.pubmed.PUBMED_TEXT_FIELDS",
  "orangecontrib.text.pubmed.Pubmed",
  "orangecontrib.text.pubmed._corpus_from_records",
  "orangecontrib.text.pubmed._date_to_iso",
  "orangecontrib.text.pubmed._mesh_headings_to_class",
  "orangecontrib.text.pubmed._records_to_corpus_entries",
  "orangecontrib.text.sentiment",
  "orangecontrib.text.sentiment.Corpus",
  "orangecontrib.text.sentiment.Liu_Hu_Sentiment",
  "orangecontrib.text.sentiment.SharedTransform",
  "orangecontrib.text.sentiment.Vader_Sentiment",
  "orangecontrib.text.sentiment.VectorizationComputeValue",
  "orangecontrib.text.sentiment.WordPunctTokenizer",
  "orangecontrib.text.sentiment.corpus",
  "orangecontrib.text.sentiment.corpus2",
  "orangecontrib.text.sentiment.liu",
  "orangecontrib.text.stats",
  "orangecontrib.text.stats._c",
  "orangecontrib.text.stats.false_discovery_rate",
  "orangecontrib.text.stats.hypergeom_p_values",
  "orangecontrib.text.stats.is_sorted",
  "orangecontrib.text.stats.m",
  "orangecontrib.text.tag",
  "orangecontrib.text.tag.POSTagger",
  "orangecontrib.text.tag.StanfordPOSTagger",
  "orangecontrib.text.tag.pos",
  "orangecontrib.text.tag.pos.POSTagger",
  "orangecontrib.text.tag.pos.StanfordPOSTagger",
  "orangecontrib.text.tag.pos.chunkable",
  "orangecontrib.text.tag.pos.taggers",
  "orangecontrib.text.tag.pos_tagger",
  "orangecontrib.text.tag.taggers",
  "orangecontrib.text.tests",
  "orangecontrib.text.tests.test_bowvectorizer",
  "orangecontrib.text.tests.test_bowvectorizer.BowVectorizationTest",
  "orangecontrib.text.tests.test_bowvectorizer.BowVectorizer",
  "orangecontrib.text.tests.test_bowvectorizer.Corpus",
  "orangecontrib.text.tests.test_bowvectorizer.preprocess",
  "orangecontrib.text.tests.test_corpus",
  "orangecontrib.text.tests.test_corpus.Corpus",
  "orangecontrib.text.tests.test_corpus.CorpusTests",
  "orangecontrib.text.tests.test_corpus.pos_tagger",
  "orangecontrib.text.tests.test_corpus.preprocess",
  "orangecontrib.text.tests.test_guardian",
  "orangecontrib.text.tests.test_nyt",
  "orangecontrib.text.tests.test_nyt.BATCH_SIZE",
  "orangecontrib.text.tests.test_nyt.CACHE",
  "orangecontrib.text.tests.test_nyt.Corpus",
  "orangecontrib.text.tests.test_nyt.MockHTTPErrors",
  "orangecontrib.text.tests.test_nyt.MockURLErrors",
  "orangecontrib.text.tests.test_nyt.MockUrlOpen",
  "orangecontrib.text.tests.test_nyt.NYT",
  "orangecontrib.text.tests.test_nyt.NYTTests",
  "orangecontrib.text.tests.test_nyt.Test403",
  "orangecontrib.text.tests.test_nyt.mock_urllib",
  "orangecontrib.text.tests.test_preprocess",
  "orangecontrib.text.tests.test_preprocess.Corpus",
  "orangecontrib.text.tests.test_preprocess.FilteringTests",
  "orangecontrib.text.tests.test_preprocess.PreprocessTests",
  "orangecontrib.text.tests.test_preprocess.Preprocessor",
  "orangecontrib.text.tests.test_preprocess.TokenNormalizerTests",
  "orangecontrib.text.tests.test_preprocess.TokenizerTests",
  "orangecontrib.text.tests.test_preprocess.TransformationTests",
  "orangecontrib.text.tests.test_preprocess.counted",
  "orangecontrib.text.tests.test_preprocess.preprocess",
  "orangecontrib.text.tests.test_pubmed",
  "orangecontrib.text.tests.test_pubmed.CACHE",
  "orangecontrib.text.tests.test_pubmed.MockEntrez",
  "orangecontrib.text.tests.test_pubmed.PUBMED_FIELD_DATE",
  "orangecontrib.text.tests.test_pubmed.PUBMED_TEXT_FIELDS",
  "orangecontrib.text.tests.test_pubmed.Pubmed",
  "orangecontrib.text.tests.test_pubmed.PubmedTests",
  "orangecontrib.text.tests.test_pubmed._corpus_from_records",
  "orangecontrib.text.tests.test_pubmed._date_to_iso",
  "orangecontrib.text.tests.test_pubmed._mesh_headings_to_class",
  "orangecontrib.text.tests.test_pubmed._records_to_corpus_entries",
  "orangecontrib.text.tests.test_pubmed.error_callback",
  "orangecontrib.text.tests.test_pubmed.mock_entrez",
  "orangecontrib.text.tests.test_pubmed.progress_callback",
  "orangecontrib.text.tests.test_sentiment",
  "orangecontrib.text.tests.test_sentiment.Corpus",
  "orangecontrib.text.tests.test_sentiment.LiuHuTest",
  "orangecontrib.text.tests.test_sentiment.Liu_Hu_Sentiment",
  "orangecontrib.text.tests.test_sentiment.VaderTest",
  "orangecontrib.text.tests.test_sentiment.Vader_Sentiment",
  "orangecontrib.text.tests.test_simhash",
  "orangecontrib.text.tests.test_simhash.Corpus",
  "orangecontrib.text.tests.test_simhash.SimhashVectorizer",
  "orangecontrib.text.tests.test_simhash.TestSimhash",
  "orangecontrib.text.tests.test_stats",
  "orangecontrib.text.tests.test_stats.StatsTests",
  "orangecontrib.text.tests.test_stats.false_discovery_rate",
  "orangecontrib.text.tests.test_stats.hypergeom_p_values",
  "orangecontrib.text.tests.test_stats.is_sorted",
  "orangecontrib.text.tests.test_tags",
  "orangecontrib.text.tests.test_tags.Corpus",
  "orangecontrib.text.tests.test_tags.POSTaggerTests",
  "orangecontrib.text.tests.test_tags.preprocess",
  "orangecontrib.text.tests.test_tags.tag",
  "orangecontrib.text.tests.test_topic_modeling",
  "orangecontrib.text.tests.test_topic_modeling.BaseTests",
  "orangecontrib.text.tests.test_topic_modeling.Corpus",
  "orangecontrib.text.tests.test_topic_modeling.HdpTest",
  "orangecontrib.text.tests.test_topic_modeling.HdpWrapper",
  "orangecontrib.text.tests.test_topic_modeling.LDATests",
  "orangecontrib.text.tests.test_topic_modeling.LdaWrapper",
  "orangecontrib.text.tests.test_topic_modeling.LsiTest",
  "orangecontrib.text.tests.test_topic_modeling.LsiWrapper",
  "orangecontrib.text.tests.test_topic_modeling.preprocess",
  "orangecontrib.text.tests.test_topic_modeling.vectorization",
  "orangecontrib.text.tests.test_tweetprofiler",
  "orangecontrib.text.tests.test_tweetprofiler.CHECK_ALIVE",
  "orangecontrib.text.tests.test_tweetprofiler.Corpus",
  "orangecontrib.text.tests.test_tweetprofiler.EMBEDDINGS_NUM",
  "orangecontrib.text.tests.test_tweetprofiler.MODELS",
  "orangecontrib.text.tests.test_tweetprofiler.MODES",
  "orangecontrib.text.tests.test_tweetprofiler.MockServerCall",
  "orangecontrib.text.tests.test_tweetprofiler.PROFILE_CLASSES",
  "orangecontrib.text.tests.test_tweetprofiler.SERVER_CALL",
  "orangecontrib.text.tests.test_tweetprofiler.TestErrorsRaising",
  "orangecontrib.text.tests.test_tweetprofiler.TestTweetProfiler",
  "orangecontrib.text.tests.test_tweetprofiler.TweetProfiler",
  "orangecontrib.text.tests.test_tweetprofiler.response_mock",
  "orangecontrib.text.tests.test_twitter",
  "orangecontrib.text.tests.test_twitter.CREDENTIALS_MSG",
  "orangecontrib.text.tests.test_twitter.Corpus",
  "orangecontrib.text.tests.test_twitter.MyCursor",
  "orangecontrib.text.tests.test_twitter.NO_CREDENTIALS",
  "orangecontrib.text.tests.test_twitter.Response",
  "orangecontrib.text.tests.test_twitter.TestCredentials",
  "orangecontrib.text.tests.test_twitter.TestTwitterAPI",
  "orangecontrib.text.tests.test_twitter.get_credentials",
  "orangecontrib.text.tests.test_twitter.twitter",
  "orangecontrib.text.tests.test_utils",
  "orangecontrib.text.tests.test_utils.ChunksTest",
  "orangecontrib.text.tests.test_utils.TestNpSpSum",
  "orangecontrib.text.tests.test_utils.chunks",
  "orangecontrib.text.tests.test_utils.np_sp_sum",
  "orangecontrib.text.tests.test_vectorization_base",
  "orangecontrib.text.tests.test_vectorization_base.BaseVectorizationTest",
  "orangecontrib.text.tests.test_vectorization_base.BaseVectorizer",
  "orangecontrib.text.tests.test_vectorization_base.Corpus",
  "orangecontrib.text.tests.test_wikipedia",
  "orangecontrib.text.tests.test_wikipedia.Corpus",
  "orangecontrib.text.tests.test_wikipedia.StoppingMock",
  "orangecontrib.text.tests.test_wikipedia.WikipediaAPI",
  "orangecontrib.text.tests.test_wikipedia.WikipediaTests",
  "orangecontrib.text.topics",
  "orangecontrib.text.topics.HdpWrapper",
  "orangecontrib.text.topics.LdaWrapper",
  "orangecontrib.text.topics.LsiWrapper",
  "orangecontrib.text.topics.Topic",
  "orangecontrib.text.topics.hdp",
  "orangecontrib.text.topics.hdp.HdpWrapper",
  "orangecontrib.text.topics.hdp.Model",
  "orangecontrib.text.topics.hdp.has_negative_weights",
  "orangecontrib.text.topics.hdp.name",
  "orangecontrib.text.topics.hdp.num_topics",
  "orangecontrib.text.topics.lda",
  "orangecontrib.text.topics.lda.LdaWrapper",
  "orangecontrib.text.topics.lda.has_negative_weights",
  "orangecontrib.text.topics.lda.num_topics",
  "orangecontrib.text.topics.lsi",
  "orangecontrib.text.topics.lsi.LsiWrapper",
  "orangecontrib.text.topics.lsi.num_topics",
  "orangecontrib.text.topics.topics",
  "orangecontrib.text.topics.topics.Corpus",
  "orangecontrib.text.topics.topics.GensimWrapper",
  "orangecontrib.text.topics.topics.GensimWrapper.Model",
  "orangecontrib.text.topics.topics.GensimWrapper.has_negative_weights",
  "orangecontrib.text.topics.topics.GensimWrapper.name",
  "orangecontrib.text.topics.topics.GensimWrapper.num_topics",
  "orangecontrib.text.topics.topics.MAX_WORDS",
  "orangecontrib.text.topics.topics.Topic",
  "orangecontrib.text.topics.topics.chunkable",
  "orangecontrib.text.tutorials",
  "orangecontrib.text.tweet_profiler",
  "orangecontrib.text.tweet_profiler.TweetProfiler",
  "orangecontrib.text.tweet_profiler.log",
  "orangecontrib.text.twitter",
  "orangecontrib.text.twitter.Corpus",
  "orangecontrib.text.twitter.Credentials",
  "orangecontrib.text.twitter.TwitterAPI",
  "orangecontrib.text.twitter.__all__",
  "orangecontrib.text.twitter.code2lang",
  "orangecontrib.text.twitter.coordinates_geoJSON",
  "orangecontrib.text.util",
  "orangecontrib.text.util.chunkable",
  "orangecontrib.text.util.chunks",
  "orangecontrib.text.util.np_sp_sum",
  "orangecontrib.text.vectorization",
  "orangecontrib.text.vectorization.BowVectorizer",
  "orangecontrib.text.vectorization.SimhashVectorizer",
  "orangecontrib.text.vectorization.bagofwords",
  "orangecontrib.text.vectorization.bagofwords.BaseVectorizer",
  "orangecontrib.text.vectorization.bagofwords.BowVectorizer",
  "orangecontrib.text.vectorization.bagofwords.SharedTransform",
  "orangecontrib.text.vectorization.bagofwords.VectorizationComputeValue",
  "orangecontrib.text.vectorization.base",
  "orangecontrib.text.vectorization.base.BaseVectorizer",
  "orangecontrib.text.vectorization.base.SharedTransform",
  "orangecontrib.text.vectorization.base.VectorizationComputeValue",
  "orangecontrib.text.vectorization.simhash",
  "orangecontrib.text.vectorization.simhash.BaseVectorizer",
  "orangecontrib.text.vectorization.simhash.SimhashVectorizer",
  "orangecontrib.text.version",
  "orangecontrib.text.version.full_version",
  "orangecontrib.text.version.git_revision",
  "orangecontrib.text.version.release",
  "orangecontrib.text.version.short_version",
  "orangecontrib.text.version.version",
  "orangecontrib.text.widgets",
  "orangecontrib.text.widgets.owbagofwords.BowVectorizer",
  "orangecontrib.text.widgets.owbagofwords.Corpus",
  "orangecontrib.text.widgets.owbagofwords.OWTBagOfWords",
  "orangecontrib.text.widgets.owbagofwords.app",
  "orangecontrib.text.widgets.owbagofwords.corpus",
  "orangecontrib.text.widgets.owbagofwords.owbasevectorizer",
  "orangecontrib.text.widgets.owbagofwords.widget",
  "orangecontrib.text.widgets.owbagofwords.widgets",
  "orangecontrib.text.widgets.owconcordance.ConcordanceModel",
  "orangecontrib.text.widgets.owconcordance.Corpus",
  "orangecontrib.text.widgets.owconcordance.DocumentSelectionModel",
  "orangecontrib.text.widgets.owconcordance.HorizontalGridDelegate",
  "orangecontrib.text.widgets.owconcordance.OWConcordance",
  "orangecontrib.text.widgets.owconcordance.Topic",
  "orangecontrib.text.widgets.owconcordance.WordPunctTokenizer",
  "orangecontrib.text.widgets.owconcordance.app",
  "orangecontrib.text.widgets.owconcordance.corpus",
  "orangecontrib.text.widgets.owconcordance.widget",
  "orangecontrib.text.widgets.owcorpus.Corpus",
  "orangecontrib.text.widgets.owcorpus.OWCorpus",
  "orangecontrib.text.widgets.owcorpus.app",
  "orangecontrib.text.widgets.owcorpus.get_sample_corpora_dir",
  "orangecontrib.text.widgets.owcorpus.widget",
  "orangecontrib.text.widgets.owcorpus.widgets",
  "orangecontrib.text.widgets.owcorpusviewer.Corpus",
  "orangecontrib.text.widgets.owcorpusviewer.OWCorpusViewer",
  "orangecontrib.text.widgets.owcorpusviewer.app",
  "orangecontrib.text.widgets.owcorpusviewer.corpus",
  "orangecontrib.text.widgets.owcorpusviewer.pos_tagger",
  "orangecontrib.text.widgets.owcorpusviewer.widget",
  "orangecontrib.text.widgets.owduplicates.Cluster",
  "orangecontrib.text.widgets.owduplicates.Corpus",
  "orangecontrib.text.widgets.owduplicates.Histogram",
  "orangecontrib.text.widgets.owduplicates.InfiniteLine",
  "orangecontrib.text.widgets.owduplicates.OWDuplicates",
  "orangecontrib.text.widgets.owduplicates.appl",
  "orangecontrib.text.widgets.owduplicates.data",
  "orangecontrib.text.widgets.owduplicates.dm",
  "orangecontrib.text.widgets.owduplicates.ow",
  "orangecontrib.text.widgets.owduplicates.pg_InfiniteLine",
  "orangecontrib.text.widgets.owgeomap.CC_EUROPE",
  "orangecontrib.text.widgets.owgeomap.CC_NAMES",
  "orangecontrib.text.widgets.owgeomap.CC_USA",
  "orangecontrib.text.widgets.owgeomap.CC_WORLD",
  "orangecontrib.text.widgets.owgeomap.Corpus",
  "orangecontrib.text.widgets.owgeomap.INV_CC_EUROPE",
  "orangecontrib.text.widgets.owgeomap.INV_CC_USA",
  "orangecontrib.text.widgets.owgeomap.INV_CC_WORLD",
  "orangecontrib.text.widgets.owgeomap.Map",
  "orangecontrib.text.widgets.owgeomap.OWGeoMap",
  "orangecontrib.text.widgets.owgeomap.SET_CC_EUROPE",
  "orangecontrib.text.widgets.owgeomap.SET_CC_USA",
  "orangecontrib.text.widgets.owgeomap.main",
  "orangecontrib.text.widgets.owguardian.CheckListLayout",
  "orangecontrib.text.widgets.owguardian.Corpus",
  "orangecontrib.text.widgets.owguardian.DatePickerInterval",
  "orangecontrib.text.widgets.owguardian.OWGuardian",
  "orangecontrib.text.widgets.owguardian.QueryBox",
  "orangecontrib.text.widgets.owguardian.TheGuardianAPI",
  "orangecontrib.text.widgets.owguardian.TheGuardianCredentials",
  "orangecontrib.text.widgets.owguardian.app",
  "orangecontrib.text.widgets.owguardian.asynchronous",
  "orangecontrib.text.widgets.owguardian.gui_require",
  "orangecontrib.text.widgets.owguardian.widget",
  "orangecontrib.text.widgets.owimportdocuments.Corpus",
  "orangecontrib.text.widgets.owimportdocuments.ImportDocuments",
  "orangecontrib.text.widgets.owimportdocuments.OWImportDocuments",
  "orangecontrib.text.widgets.owimportdocuments.RecentPath_asqstandarditem",
  "orangecontrib.text.widgets.owimportdocuments.RuntimeEvent",
  "orangecontrib.text.widgets.owimportdocuments.State",
  "orangecontrib.text.widgets.owimportdocuments.UserInterruptError",
  "orangecontrib.text.widgets.owimportdocuments.log",
  "orangecontrib.text.widgets.owimportdocuments.main",
  "orangecontrib.text.widgets.owimportdocuments.prettifypath",
  "orangecontrib.text.widgets.ownyt.CheckListLayout",
  "orangecontrib.text.widgets.ownyt.Corpus",
  "orangecontrib.text.widgets.ownyt.DatePickerInterval",
  "orangecontrib.text.widgets.ownyt.MIN_DATE",
  "orangecontrib.text.widgets.ownyt.NYT",
  "orangecontrib.text.widgets.ownyt.OWNYT",
  "orangecontrib.text.widgets.ownyt.QueryBox",
  "orangecontrib.text.widgets.ownyt.app",
  "orangecontrib.text.widgets.ownyt.asynchronous",
  "orangecontrib.text.widgets.ownyt.gui_require",
  "orangecontrib.text.widgets.ownyt.widget",
  "orangecontrib.text.widgets.owpreprocess.Corpus",
  "orangecontrib.text.widgets.owpreprocess.DummyKeepN",
  "orangecontrib.text.widgets.owpreprocess.FilteringModule",
  "orangecontrib.text.widgets.owpreprocess.MultipleMethodModule",
  "orangecontrib.text.widgets.owpreprocess.NgramsModule",
  "orangecontrib.text.widgets.owpreprocess.NormalizationModule",
  "orangecontrib.text.widgets.owpreprocess.OWPreprocess",
  "orangecontrib.text.widgets.owpreprocess.OnOffButton",
  "orangecontrib.text.widgets.owpreprocess.POSTaggingModule",
  "orangecontrib.text.widgets.owpreprocess.PreprocessorModule",
  "orangecontrib.text.widgets.owpreprocess.ResourceLoader",
  "orangecontrib.text.widgets.owpreprocess.SingleMethodModule",
  "orangecontrib.text.widgets.owpreprocess.StanfordPOSTagger",
  "orangecontrib.text.widgets.owpreprocess.TokenizerModule",
  "orangecontrib.text.widgets.owpreprocess.TransformationModule",
  "orangecontrib.text.widgets.owpreprocess._i",
  "orangecontrib.text.widgets.owpreprocess.app",
  "orangecontrib.text.widgets.owpreprocess.asynchronous",
  "orangecontrib.text.widgets.owpreprocess.corpus",
  "orangecontrib.text.widgets.owpreprocess.nltk_data_dir",
  "orangecontrib.text.widgets.owpreprocess.preprocess",
  "orangecontrib.text.widgets.owpreprocess.taggers",
  "orangecontrib.text.widgets.owpreprocess.widget",
  "orangecontrib.text.widgets.owpreprocess.widgets",
  "orangecontrib.text.widgets.owpubmed.CalendarDialog",
  "orangecontrib.text.widgets.owpubmed.Corpus",
  "orangecontrib.text.widgets.owpubmed.OWPubmed",
  "orangecontrib.text.widgets.owpubmed.Output",
  "orangecontrib.text.widgets.owpubmed.PUBMED_TEXT_FIELDS",
  "orangecontrib.text.widgets.owpubmed.Pubmed",
  "orangecontrib.text.widgets.owpubmed._i",
  "orangecontrib.text.widgets.owpubmed.app",
  "orangecontrib.text.widgets.owpubmed.widget",
  "orangecontrib.text.widgets.owsentimentanalysis.Corpus",
  "orangecontrib.text.widgets.owsentimentanalysis.Liu_Hu_Sentiment",
  "orangecontrib.text.widgets.owsentimentanalysis.METHODS",
  "orangecontrib.text.widgets.owsentimentanalysis.OWSentimentAnalysis",
  "orangecontrib.text.widgets.owsentimentanalysis.Vader_Sentiment",
  "orangecontrib.text.widgets.owsentimentanalysis.main",
  "orangecontrib.text.widgets.owsimhash.Corpus",
  "orangecontrib.text.widgets.owsimhash.OWSimhash",
  "orangecontrib.text.widgets.owsimhash.SimhashVectorizer",
  "orangecontrib.text.widgets.owsimhash.app",
  "orangecontrib.text.widgets.owsimhash.corpus",
  "orangecontrib.text.widgets.owsimhash.owbasevectorizer",
  "orangecontrib.text.widgets.owsimhash.widget",
  "orangecontrib.text.widgets.owtopicmodeling.Corpus",
  "orangecontrib.text.widgets.owtopicmodeling.HTMLDelegate",
  "orangecontrib.text.widgets.owtopicmodeling.HdpWidget",
  "orangecontrib.text.widgets.owtopicmodeling.HdpWrapper",
  "orangecontrib.text.widgets.owtopicmodeling.LdaWidget",
  "orangecontrib.text.widgets.owtopicmodeling.LdaWrapper",
  "orangecontrib.text.widgets.owtopicmodeling.LsiWidget",
  "orangecontrib.text.widgets.owtopicmodeling.LsiWrapper",
  "orangecontrib.text.widgets.owtopicmodeling.OWTopicModeling",
  "orangecontrib.text.widgets.owtopicmodeling.Topic",
  "orangecontrib.text.widgets.owtopicmodeling.TopicViewer",
  "orangecontrib.text.widgets.owtopicmodeling.TopicWidget",
  "orangecontrib.text.widgets.owtopicmodeling.app",
  "orangecontrib.text.widgets.owtopicmodeling.asynchronous",
  "orangecontrib.text.widgets.owtopicmodeling.require",
  "orangecontrib.text.widgets.owtopicmodeling.widget",
  "orangecontrib.text.widgets.owtweetprofiler.Corpus",
  "orangecontrib.text.widgets.owtweetprofiler.OWTweetProfiler",
  "orangecontrib.text.widgets.owtweetprofiler.TweetProfiler",
  "orangecontrib.text.widgets.owtweetprofiler.app",
  "orangecontrib.text.widgets.owtweetprofiler.corpus",
  "orangecontrib.text.widgets.owtweetprofiler.widget",
  "orangecontrib.text.widgets.owtwitter.CheckListLayout",
  "orangecontrib.text.widgets.owtwitter.ComboBox",
  "orangecontrib.text.widgets.owtwitter.Corpus",
  "orangecontrib.text.widgets.owtwitter.ListEdit",
  "orangecontrib.text.widgets.owtwitter.OWTwitter",
  "orangecontrib.text.widgets.owtwitter.app",
  "orangecontrib.text.widgets.owtwitter.asynchronous",
  "orangecontrib.text.widgets.owtwitter.gui_require",
  "orangecontrib.text.widgets.owtwitter.lang2code",
  "orangecontrib.text.widgets.owtwitter.twitter",
  "orangecontrib.text.widgets.owtwitter.widget",
  "orangecontrib.text.widgets.owwikipedia.CheckListLayout",
  "orangecontrib.text.widgets.owwikipedia.ComboBox",
  "orangecontrib.text.widgets.owwikipedia.Corpus",
  "orangecontrib.text.widgets.owwikipedia.ListEdit",
  "orangecontrib.text.widgets.owwikipedia.OWWikipedia",
  "orangecontrib.text.widgets.owwikipedia.WikipediaAPI",
  "orangecontrib.text.widgets.owwikipedia.app",
  "orangecontrib.text.widgets.owwikipedia.asynchronous",
  "orangecontrib.text.widgets.owwikipedia.code2lang",
  "orangecontrib.text.widgets.owwikipedia.lang2code",
  "orangecontrib.text.widgets.owwikipedia.widget",
  "orangecontrib.text.widgets.owwordcloud.Corpus",
  "orangecontrib.text.widgets.owwordcloud.OWWordCloud",
  "orangecontrib.text.widgets.owwordcloud.Topic",
  "orangecontrib.text.widgets.owwordcloud.main",
  "orangecontrib.text.widgets.owwordenrichment.Corpus",
  "orangecontrib.text.widgets.owwordenrichment.EATreeWidgetItem",
  "orangecontrib.text.widgets.owwordenrichment.OWWordEnrichment",
  "orangecontrib.text.widgets.owwordenrichment.false_discovery_rate",
  "orangecontrib.text.widgets.owwordenrichment.fp",
  "orangecontrib.text.widgets.owwordenrichment.fpt",
  "orangecontrib.text.widgets.owwordenrichment.hypergeom_p_values",
  "orangecontrib.text.widgets.owwordenrichment.np_sp_sum",
  "orangecontrib.text.widgets.tests.test_concordances",
  "orangecontrib.text.widgets.tests.test_concordances.ConcordanceModel",
  "orangecontrib.text.widgets.tests.test_concordances.Corpus",
  "orangecontrib.text.widgets.tests.test_concordances.OWConcordance",
  "orangecontrib.text.widgets.tests.test_concordances.TestConcordanceModel",
  "orangecontrib.text.widgets.tests.test_concordances.TestConcordanceWidget",
  "orangecontrib.text.widgets.tests.test_owbagofwords",
  "orangecontrib.text.widgets.tests.test_owbagofwords.Corpus",
  "orangecontrib.text.widgets.tests.test_owbagofwords.OWTBagOfWords",
  "orangecontrib.text.widgets.tests.test_owbagofwords.TestBagOfWords",
  "orangecontrib.text.widgets.tests.test_owpreprocess",
  "orangecontrib.text.widgets.tests.test_owpreprocess.Corpus",
  "orangecontrib.text.widgets.tests.test_owpreprocess.OWPreprocess",
  "orangecontrib.text.widgets.tests.test_owpreprocess.TestConcordanceWidget",
  "orangecontrib.text.widgets.tests.test_owworldclooud",
  "orangecontrib.text.widgets.tests.test_owworldclooud.Corpus",
  "orangecontrib.text.widgets.tests.test_owworldclooud.OWWordCloud",
  "orangecontrib.text.widgets.tests.test_owworldclooud.TestWorldCloudWidget",
  "orangecontrib.text.widgets.utils.AbsoluteRelativeSpinBox",
  "orangecontrib.text.widgets.utils.CheckListLayout",
  "orangecontrib.text.widgets.utils.ComboBox",
  "orangecontrib.text.widgets.utils.DatePicker",
  "orangecontrib.text.widgets.utils.DatePickerInterval",
  "orangecontrib.text.widgets.utils.FileWidget",
  "orangecontrib.text.widgets.utils.ListEdit",
  "orangecontrib.text.widgets.utils.QueryBox",
  "orangecontrib.text.widgets.utils.RangeWidget",
  "orangecontrib.text.widgets.utils.ResourceLoader",
  "orangecontrib.text.widgets.utils.ValidatedLineEdit",
  "orangecontrib.text.widgets.utils.asynchronous",
  "orangecontrib.text.widgets.utils.concurrent",
  "orangecontrib.text.widgets.utils.concurrent.AsyncMethod",
  "orangecontrib.text.widgets.utils.concurrent.BoundAsyncMethod",
  "orangecontrib.text.widgets.utils.concurrent.CallbackFunction",
  "orangecontrib.text.widgets.utils.concurrent.CallbackMethod",
  "orangecontrib.text.widgets.utils.concurrent.StopExecution",
  "orangecontrib.text.widgets.utils.concurrent.asynchronous",
  "orangecontrib.text.widgets.utils.concurrent.callback",
  "orangecontrib.text.widgets.utils.decorators",
  "orangecontrib.text.widgets.utils.decorators.gui_require",
  "orangecontrib.text.widgets.utils.get_sample_corpora_dir",
  "orangecontrib.text.widgets.utils.gui_require",
  "orangecontrib.text.widgets.utils.owbasevectorizer",
  "orangecontrib.text.widgets.utils.owbasevectorizer.Corpus",
  "orangecontrib.text.widgets.utils.owbasevectorizer.OWBaseVectorizer",
  "orangecontrib.text.widgets.utils.widgets",
  "orangecontrib.text.widgets.utils.widgets.AbsoluteRelativeSpinBox",
  "orangecontrib.text.widgets.utils.widgets.CheckListLayout",
  "orangecontrib.text.widgets.utils.widgets.ComboBox",
  "orangecontrib.text.widgets.utils.widgets.DatePicker",
  "orangecontrib.text.widgets.utils.widgets.FileWidget",
  "orangecontrib.text.widgets.utils.widgets.ListEdit",
  "orangecontrib.text.widgets.utils.widgets.QueryBox",
  "orangecontrib.text.widgets.utils.widgets.RangeWidget",
  "orangecontrib.text.widgets.utils.widgets.ResourceLoader",
  "orangecontrib.text.widgets.utils.widgets.ValidatedLineEdit",
  "orangecontrib.text.widgets.utils.widgets.get_sample_corpora_dir",
  "orangecontrib.text.wikipedia",
  "orangecontrib.text.wikipedia.Corpus",
  "orangecontrib.text.wikipedia.NetworkException",
  "orangecontrib.text.wikipedia.WikipediaAPI"
 ]
}