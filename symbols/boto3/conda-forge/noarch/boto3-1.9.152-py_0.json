{
 "errors": {
  "boto3.docs.subresource": {
   "exception": "The subprocess /usr/share/miniconda/envs/test/bin/python has crashed (EOFError('Ran out of input'), stderr=).",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 248, in _send",
    "    is_exception, traceback, result = pickle_load(self._get_process().stdout)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 28, in pickle_load",
    "    return pickle.load(file)",
    "EOFError: Ran out of input",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 83, in py__getattribute__",
    "    values = self.py__getattribute__alternatives(n)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 225, in py__getattribute__alternatives",
    "    name = compiled.create_simple_object(self.inference_state, string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/__init__.py\", line 53, in create_simple_object",
    "    inference_state.compiled_subprocess.create_simple_object(obj)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 260, in _send",
    "    stderr,",
    "jedi.api.exceptions.InternalError: The subprocess /usr/share/miniconda/envs/test/bin/python has crashed (EOFError('Ran out of input'), stderr=).",
    ""
   ]
  }
 },
 "symbols": [
  "boto3.DEFAULT_SESSION",
  "boto3.NullHandler",
  "boto3.Session",
  "boto3.__author__",
  "boto3.__version__",
  "boto3._get_default_session",
  "boto3.client",
  "boto3.compat",
  "boto3.compat.SOCKET_ERROR",
  "boto3.compat.collections_abc",
  "boto3.compat.rename_file",
  "boto3.docs",
  "boto3.docs.ServiceDocumenter",
  "boto3.docs.action",
  "boto3.docs.action.ActionDocumenter",
  "boto3.docs.action.BaseDocumenter",
  "boto3.docs.action.add_resource_type_overview",
  "boto3.docs.action.document_action",
  "boto3.docs.action.document_load_reload_action",
  "boto3.docs.action.document_model_driven_resource_method",
  "boto3.docs.action.get_resource_ignore_params",
  "boto3.docs.action.get_resource_public_actions",
  "boto3.docs.attr",
  "boto3.docs.attr.ResourceShapeDocumenter",
  "boto3.docs.attr.document_attribute",
  "boto3.docs.attr.document_identifier",
  "boto3.docs.attr.document_reference",
  "boto3.docs.attr.get_identifier_description",
  "boto3.docs.base",
  "boto3.docs.base.BaseDocumenter",
  "boto3.docs.client",
  "boto3.docs.client.Boto3ClientDocumenter",
  "boto3.docs.collection",
  "boto3.docs.collection.BaseDocumenter",
  "boto3.docs.collection.CollectionDocumenter",
  "boto3.docs.collection.add_resource_type_overview",
  "boto3.docs.collection.document_batch_action",
  "boto3.docs.collection.document_collection_method",
  "boto3.docs.collection.document_collection_object",
  "boto3.docs.collection.document_model_driven_resource_method",
  "boto3.docs.collection.get_resource_ignore_params",
  "boto3.docs.docstring",
  "boto3.docs.docstring.ActionDocstring",
  "boto3.docs.docstring.AttributeDocstring",
  "boto3.docs.docstring.BatchActionDocstring",
  "boto3.docs.docstring.CollectionDocstring",
  "boto3.docs.docstring.CollectionMethodDocstring",
  "boto3.docs.docstring.IdentifierDocstring",
  "boto3.docs.docstring.LoadReloadDocstring",
  "boto3.docs.docstring.ReferenceDocstring",
  "boto3.docs.docstring.ResourceWaiterDocstring",
  "boto3.docs.docstring.SubResourceDocstring",
  "boto3.docs.docstring.document_action",
  "boto3.docs.docstring.document_attribute",
  "boto3.docs.docstring.document_batch_action",
  "boto3.docs.docstring.document_collection_method",
  "boto3.docs.docstring.document_collection_object",
  "boto3.docs.docstring.document_identifier",
  "boto3.docs.docstring.document_load_reload_action",
  "boto3.docs.docstring.document_reference",
  "boto3.docs.docstring.document_resource_waiter",
  "boto3.docs.docstring.document_sub_resource",
  "boto3.docs.generate_docs",
  "boto3.docs.method",
  "boto3.docs.method._method_returns_resource_list",
  "boto3.docs.method.document_model_driven_resource_method",
  "boto3.docs.resource",
  "boto3.docs.resource.ActionDocumenter",
  "boto3.docs.resource.BaseDocumenter",
  "boto3.docs.resource.CollectionDocumenter",
  "boto3.docs.resource.ResourceDocumenter",
  "boto3.docs.resource.ServiceResourceDocumenter",
  "boto3.docs.resource.SubResourceDocumenter",
  "boto3.docs.resource.WaiterResourceDocumenter",
  "boto3.docs.resource.add_resource_type_overview",
  "boto3.docs.resource.document_attribute",
  "boto3.docs.resource.document_identifier",
  "boto3.docs.resource.document_reference",
  "boto3.docs.resource.get_identifier_args_for_signature",
  "boto3.docs.resource.get_identifier_description",
  "boto3.docs.resource.get_identifier_values_for_example",
  "boto3.docs.service",
  "boto3.docs.service.Boto3ClientDocumenter",
  "boto3.docs.service.ResourceDocumenter",
  "boto3.docs.service.ServiceContext",
  "boto3.docs.service.ServiceDocumenter",
  "boto3.docs.service.ServiceResourceDocumenter",
  "boto3.docs.subresource",
  "boto3.docs.subresource.SubResourceDocumenter",
  "boto3.docs.subresource.document_sub_resource",
  "boto3.docs.utils",
  "boto3.docs.utils.DocumentModifiedShape",
  "boto3.docs.utils.add_resource_type_overview",
  "boto3.docs.utils.get_identifier_args_for_signature",
  "boto3.docs.utils.get_identifier_description",
  "boto3.docs.utils.get_identifier_values_for_example",
  "boto3.docs.utils.get_resource_ignore_params",
  "boto3.docs.utils.get_resource_public_actions",
  "boto3.docs.utils.is_resource_action",
  "boto3.docs.waiter",
  "boto3.docs.waiter.BaseDocumenter",
  "boto3.docs.waiter.WaiterResourceDocumenter",
  "boto3.docs.waiter.add_resource_type_overview",
  "boto3.docs.waiter.document_resource_waiter",
  "boto3.docs.waiter.get_resource_ignore_params",
  "boto3.dynamodb",
  "boto3.dynamodb.conditions",
  "boto3.dynamodb.conditions.ATTR_NAME_REGEX",
  "boto3.dynamodb.conditions.And",
  "boto3.dynamodb.conditions.Attr",
  "boto3.dynamodb.conditions.BeginsWith",
  "boto3.dynamodb.conditions.Between",
  "boto3.dynamodb.conditions.BuiltConditionExpression",
  "boto3.dynamodb.conditions.ComparisonCondition",
  "boto3.dynamodb.conditions.ConditionAttributeBase",
  "boto3.dynamodb.conditions.ConditionBase",
  "boto3.dynamodb.conditions.ConditionExpressionBuilder",
  "boto3.dynamodb.conditions.Contains",
  "boto3.dynamodb.conditions.DynamoDBNeedsConditionError",
  "boto3.dynamodb.conditions.DynamoDBNeedsKeyConditionError",
  "boto3.dynamodb.conditions.DynamoDBOperationNotSupportedError",
  "boto3.dynamodb.conditions.Equals",
  "boto3.dynamodb.conditions.GreaterThan",
  "boto3.dynamodb.conditions.In",
  "boto3.dynamodb.conditions.Key",
  "boto3.dynamodb.conditions.LessThan",
  "boto3.dynamodb.conditions.Not",
  "boto3.dynamodb.conditions.Or",
  "boto3.dynamodb.conditions.Size",
  "boto3.dynamodb.table",
  "boto3.dynamodb.table.BatchWriter",
  "boto3.dynamodb.table.TableResource",
  "boto3.dynamodb.table.logger",
  "boto3.dynamodb.table.register_table_methods",
  "boto3.dynamodb.transform",
  "boto3.dynamodb.transform.ConditionBase",
  "boto3.dynamodb.transform.ConditionExpressionBuilder",
  "boto3.dynamodb.transform.ConditionExpressionTransformation",
  "boto3.dynamodb.transform.DocumentModifiedShape",
  "boto3.dynamodb.transform.DynamoDBHighLevelResource",
  "boto3.dynamodb.transform.ParameterTransformer",
  "boto3.dynamodb.transform.TransformationInjector",
  "boto3.dynamodb.transform.TypeDeserializer",
  "boto3.dynamodb.transform.TypeSerializer",
  "boto3.dynamodb.transform.collections_abc",
  "boto3.dynamodb.transform.copy_dynamodb_params",
  "boto3.dynamodb.transform.register_high_level_interface",
  "boto3.dynamodb.types",
  "boto3.dynamodb.types.BINARY",
  "boto3.dynamodb.types.BINARY_SET",
  "boto3.dynamodb.types.BINARY_TYPES",
  "boto3.dynamodb.types.BOOLEAN",
  "boto3.dynamodb.types.Binary",
  "boto3.dynamodb.types.DYNAMODB_CONTEXT",
  "boto3.dynamodb.types.LIST",
  "boto3.dynamodb.types.MAP",
  "boto3.dynamodb.types.NULL",
  "boto3.dynamodb.types.NUMBER",
  "boto3.dynamodb.types.NUMBER_SET",
  "boto3.dynamodb.types.STRING",
  "boto3.dynamodb.types.STRING_SET",
  "boto3.dynamodb.types.TypeDeserializer",
  "boto3.dynamodb.types.TypeSerializer",
  "boto3.dynamodb.types.collections_abc",
  "boto3.ec2",
  "boto3.ec2.createtags",
  "boto3.ec2.createtags.create_tags",
  "boto3.ec2.createtags.inject_create_tags",
  "boto3.ec2.deletetags",
  "boto3.ec2.deletetags.CustomModeledAction",
  "boto3.ec2.deletetags.delete_tags",
  "boto3.ec2.deletetags.inject_delete_tags",
  "boto3.exceptions",
  "boto3.exceptions.Boto3Error",
  "boto3.exceptions.DynamoDBNeedsConditionError",
  "boto3.exceptions.DynamoDBNeedsKeyConditionError",
  "boto3.exceptions.DynamoDBOperationNotSupportedError",
  "boto3.exceptions.DynanmoDBOperationNotSupportedError",
  "boto3.exceptions.NoVersionFound",
  "boto3.exceptions.ResourceLoadException",
  "boto3.exceptions.ResourceNotExistsError",
  "boto3.exceptions.RetriesExceededError",
  "boto3.exceptions.S3TransferFailedError",
  "boto3.exceptions.S3UploadFailedError",
  "boto3.exceptions.UnknownAPIVersionError",
  "boto3.resource",
  "boto3.resources.action",
  "boto3.resources.action.ActionDocstring",
  "boto3.resources.action.BatchAction",
  "boto3.resources.action.CustomModeledAction",
  "boto3.resources.action.ServiceAction",
  "boto3.resources.action.WaiterAction",
  "boto3.resources.action.inject_attribute",
  "boto3.resources.action.logger",
  "boto3.resources.base",
  "boto3.resources.base.ResourceMeta",
  "boto3.resources.base.ServiceResource",
  "boto3.resources.base.logger",
  "boto3.resources.collection",
  "boto3.resources.collection.CollectionFactory",
  "boto3.resources.collection.CollectionManager",
  "boto3.resources.collection.ResourceCollection",
  "boto3.resources.collection.logger",
  "boto3.resources.factory",
  "boto3.resources.factory.ResourceFactory",
  "boto3.resources.factory.logger",
  "boto3.resources.model",
  "boto3.resources.model.Action",
  "boto3.resources.model.Collection",
  "boto3.resources.model.DefinitionWithParams",
  "boto3.resources.model.Identifier",
  "boto3.resources.model.Parameter",
  "boto3.resources.model.Request",
  "boto3.resources.model.ResourceModel",
  "boto3.resources.model.ResponseResource",
  "boto3.resources.model.Waiter",
  "boto3.resources.model.logger",
  "boto3.resources.params",
  "boto3.resources.params.INDEX_RE",
  "boto3.resources.params.build_param_structure",
  "boto3.resources.params.create_request_parameters",
  "boto3.resources.params.get_data_member",
  "boto3.resources.response",
  "boto3.resources.response.RawHandler",
  "boto3.resources.response.ResourceHandler",
  "boto3.resources.response.all_not_none",
  "boto3.resources.response.build_empty_response",
  "boto3.resources.response.build_identifiers",
  "boto3.s3",
  "boto3.s3.inject",
  "boto3.s3.inject.ProgressCallbackInvoker",
  "boto3.s3.inject.S3Transfer",
  "boto3.s3.inject.TransferConfig",
  "boto3.s3.inject.bucket_copy",
  "boto3.s3.inject.bucket_download_file",
  "boto3.s3.inject.bucket_load",
  "boto3.s3.inject.bucket_upload_file",
  "boto3.s3.inject.copy",
  "boto3.s3.inject.create_transfer_manager",
  "boto3.s3.inject.download_file",
  "boto3.s3.inject.inject_bucket_methods",
  "boto3.s3.inject.inject_object_methods",
  "boto3.s3.inject.inject_object_summary_methods",
  "boto3.s3.inject.inject_s3_transfer_methods",
  "boto3.s3.inject.object_copy",
  "boto3.s3.inject.object_download_file",
  "boto3.s3.inject.object_summary_load",
  "boto3.s3.inject.object_upload_file",
  "boto3.s3.inject.upload_file",
  "boto3.s3.inject.utils",
  "boto3.s3.transfer",
  "boto3.s3.transfer.KB",
  "boto3.s3.transfer.MB",
  "boto3.s3.transfer.ProgressCallbackInvoker",
  "boto3.s3.transfer.RetriesExceededError",
  "boto3.s3.transfer.S3Transfer",
  "boto3.s3.transfer.S3UploadFailedError",
  "boto3.s3.transfer.TransferConfig",
  "boto3.s3.transfer.create_transfer_manager",
  "boto3.session",
  "boto3.session.ResourceNotExistsError",
  "boto3.session.Session",
  "boto3.session.UnknownAPIVersionError",
  "boto3.set_stream_logger",
  "boto3.setup_default_session",
  "boto3.utils",
  "boto3.utils.LazyLoadedWaiterModel",
  "boto3.utils.ServiceContext",
  "boto3.utils._ServiceContext",
  "boto3.utils.import_module",
  "boto3.utils.inject_attribute",
  "boto3.utils.lazy_call"
 ]
}