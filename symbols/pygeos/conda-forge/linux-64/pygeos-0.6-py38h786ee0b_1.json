{
 "errors": {
  "pygeos.geometry": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "pygeos.linear": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "pygeos.BufferCapStyles",
  "pygeos.BufferJoinStyles",
  "pygeos.GEOSException",
  "pygeos.Geometry",
  "pygeos.GeometryType",
  "pygeos.STRtree",
  "pygeos.ShapelyGeometry",
  "pygeos.__all__",
  "pygeos.__version__",
  "pygeos._version",
  "pygeos._version.get_versions",
  "pygeos._version.version_json",
  "pygeos._wrap_construct_ufunc",
  "pygeos.apply",
  "pygeos.area",
  "pygeos.boundary",
  "pygeos.bounds",
  "pygeos.box",
  "pygeos.buffer",
  "pygeos.centroid",
  "pygeos.constructive",
  "pygeos.constructive.BufferCapStyles",
  "pygeos.constructive.BufferJoinStyles",
  "pygeos.constructive.__all__",
  "pygeos.constructive.boundary",
  "pygeos.constructive.buffer",
  "pygeos.constructive.centroid",
  "pygeos.constructive.convex_hull",
  "pygeos.constructive.delaunay_triangles",
  "pygeos.constructive.envelope",
  "pygeos.constructive.extract_unique_points",
  "pygeos.constructive.point_on_surface",
  "pygeos.constructive.simplify",
  "pygeos.constructive.snap",
  "pygeos.constructive.voronoi_polygons",
  "pygeos.contains",
  "pygeos.convex_hull",
  "pygeos.coordinates",
  "pygeos.coordinates.__all__",
  "pygeos.coordinates.apply",
  "pygeos.coordinates.count_coordinates",
  "pygeos.coordinates.get_coordinates",
  "pygeos.coordinates.set_coordinates",
  "pygeos.count_coordinates",
  "pygeos.covered_by",
  "pygeos.covers",
  "pygeos.creation",
  "pygeos.creation.__all__",
  "pygeos.creation._wrap_construct_ufunc",
  "pygeos.creation.box",
  "pygeos.creation.geometrycollections",
  "pygeos.creation.linearrings",
  "pygeos.creation.linestrings",
  "pygeos.creation.multilinestrings",
  "pygeos.creation.multipoints",
  "pygeos.creation.multipolygons",
  "pygeos.creation.points",
  "pygeos.creation.polygons",
  "pygeos.crosses",
  "pygeos.delaunay_triangles",
  "pygeos.difference",
  "pygeos.disjoint",
  "pygeos.distance",
  "pygeos.envelope",
  "pygeos.equals",
  "pygeos.extract_unique_points",
  "pygeos.from_shapely",
  "pygeos.from_wkb",
  "pygeos.from_wkt",
  "pygeos.geometry",
  "pygeos.geometry.GeometryType",
  "pygeos.geometry.__all__",
  "pygeos.geometry.get_coordinate_dimensions",
  "pygeos.geometry.get_dimensions",
  "pygeos.geometry.get_exterior_ring",
  "pygeos.geometry.get_geometry",
  "pygeos.geometry.get_interior_ring",
  "pygeos.geometry.get_num_coordinates",
  "pygeos.geometry.get_num_geometries",
  "pygeos.geometry.get_num_interior_rings",
  "pygeos.geometry.get_num_points",
  "pygeos.geometry.get_point",
  "pygeos.geometry.get_srid",
  "pygeos.geometry.get_type_id",
  "pygeos.geometry.get_x",
  "pygeos.geometry.get_y",
  "pygeos.geometry.set_srid",
  "pygeos.geometrycollections",
  "pygeos.geos_capi_version",
  "pygeos.geos_capi_version_string",
  "pygeos.geos_version",
  "pygeos.geos_version_string",
  "pygeos.get_coordinate_dimensions",
  "pygeos.get_coordinates",
  "pygeos.get_dimensions",
  "pygeos.get_exterior_ring",
  "pygeos.get_geometry",
  "pygeos.get_interior_ring",
  "pygeos.get_num_coordinates",
  "pygeos.get_num_geometries",
  "pygeos.get_num_interior_rings",
  "pygeos.get_num_points",
  "pygeos.get_point",
  "pygeos.get_srid",
  "pygeos.get_type_id",
  "pygeos.get_x",
  "pygeos.get_y",
  "pygeos.has_z",
  "pygeos.hausdorff_distance",
  "pygeos.intersection",
  "pygeos.intersects",
  "pygeos.io",
  "pygeos.io.ShapelyGeometry",
  "pygeos.io.__all__",
  "pygeos.io.from_shapely",
  "pygeos.io.from_wkb",
  "pygeos.io.from_wkt",
  "pygeos.io.shapely_geos_version",
  "pygeos.io.to_wkb",
  "pygeos.io.to_wkt",
  "pygeos.is_closed",
  "pygeos.is_empty",
  "pygeos.is_geometry",
  "pygeos.is_missing",
  "pygeos.is_ring",
  "pygeos.is_simple",
  "pygeos.is_valid",
  "pygeos.length",
  "pygeos.lib",
  "pygeos.line_interpolate_point",
  "pygeos.line_locate_point",
  "pygeos.line_merge",
  "pygeos.linear",
  "pygeos.linear.line_interpolate_point",
  "pygeos.linear.line_locate_point",
  "pygeos.linear.line_merge",
  "pygeos.linear.shared_paths",
  "pygeos.linearrings",
  "pygeos.linestrings",
  "pygeos.measurement",
  "pygeos.measurement.__all__",
  "pygeos.measurement.area",
  "pygeos.measurement.bounds",
  "pygeos.measurement.distance",
  "pygeos.measurement.hausdorff_distance",
  "pygeos.measurement.length",
  "pygeos.multilinestrings",
  "pygeos.multipoints",
  "pygeos.multipolygons",
  "pygeos.overlaps",
  "pygeos.point_on_surface",
  "pygeos.points",
  "pygeos.polygons",
  "pygeos.predicates",
  "pygeos.predicates.__all__",
  "pygeos.predicates.contains",
  "pygeos.predicates.covered_by",
  "pygeos.predicates.covers",
  "pygeos.predicates.crosses",
  "pygeos.predicates.disjoint",
  "pygeos.predicates.equals",
  "pygeos.predicates.has_z",
  "pygeos.predicates.intersects",
  "pygeos.predicates.is_closed",
  "pygeos.predicates.is_empty",
  "pygeos.predicates.is_geometry",
  "pygeos.predicates.is_missing",
  "pygeos.predicates.is_ring",
  "pygeos.predicates.is_simple",
  "pygeos.predicates.is_valid",
  "pygeos.predicates.overlaps",
  "pygeos.predicates.touches",
  "pygeos.predicates.within",
  "pygeos.set_coordinates",
  "pygeos.set_operations",
  "pygeos.set_operations.__all__",
  "pygeos.set_operations.difference",
  "pygeos.set_operations.intersection",
  "pygeos.set_operations.symmetric_difference",
  "pygeos.set_operations.union",
  "pygeos.set_srid",
  "pygeos.shapely_geos_version",
  "pygeos.shared_paths",
  "pygeos.simplify",
  "pygeos.snap",
  "pygeos.strtree",
  "pygeos.strtree.STRtree",
  "pygeos.strtree.__all__",
  "pygeos.strtree.lib",
  "pygeos.symmetric_difference",
  "pygeos.to_wkb",
  "pygeos.to_wkt",
  "pygeos.touches",
  "pygeos.union",
  "pygeos.voronoi_polygons",
  "pygeos.within"
 ]
}