{
 "errors": {
  "kwant._common": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 70, in wrapper",
    "    and context.get_value() is inference_state.builtins_module:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "kwant.kpm": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  },
  "kwant.version": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "kwant.KwantDeprecationWarning",
  "kwant.UserCodeError",
  "kwant.__all__",
  "kwant.__version__",
  "kwant._colormaps",
  "kwant._colormaps.kr_data",
  "kwant._colormaps.kwant_red",
  "kwant._common",
  "kwant._common.ensure_rng",
  "kwant._common.get_parameters",
  "kwant._kwant_version",
  "kwant._kwant_version.version",
  "kwant._plotter",
  "kwant._plotter.Line3DCollection",
  "kwant._plotter.LineCollection",
  "kwant._plotter.Path3DCollection",
  "kwant._plotter.PathCollection",
  "kwant._plotter.corners",
  "kwant._plotter.has3d",
  "kwant._plotter.isarray",
  "kwant._plotter.mpl_available",
  "kwant._plotter.nparray_if_array",
  "kwant._plotter.phi",
  "kwant._plotter.projected_length",
  "kwant._plotter.sort3d",
  "kwant._plotter.unit_sphere",
  "kwant._plotter.xyz",
  "kwant._system",
  "kwant._system.__bootstrap__",
  "kwant._system.__file__",
  "kwant._system.__loader__",
  "kwant.available",
  "kwant.builder",
  "kwant.builder.Builder",
  "kwant.builder.FiniteSystem",
  "kwant.builder.HermConjOfFunc",
  "kwant.builder.HoppingKind",
  "kwant.builder.InfiniteSystem",
  "kwant.builder.Lead",
  "kwant.builder.ModesLead",
  "kwant.builder.NoSymmetry",
  "kwant.builder.Other",
  "kwant.builder.SelfEnergyLead",
  "kwant.builder.SimpleSiteFamily",
  "kwant.builder.Site",
  "kwant.builder.Symmetry",
  "kwant.builder._FinalizedBuilderMixin",
  "kwant.builder._Substituted",
  "kwant.builder.__all__",
  "kwant.builder._ensure_signature",
  "kwant.builder._raise_user_error",
  "kwant.builder._site_ranges",
  "kwant.builder._substitute_params",
  "kwant.builder._translate_cons_law",
  "kwant.builder._value_params_pair_cache",
  "kwant.builder.edges",
  "kwant.builder.herm_conj",
  "kwant.builder.validate_hopping",
  "kwant.continuum",
  "kwant.continuum.__all__",
  "kwant.continuum._common",
  "kwant.continuum._common._expression_monomials",
  "kwant.continuum._common.extra_ns",
  "kwant.continuum._common.gcd",
  "kwant.continuum._common.lambdify",
  "kwant.continuum._common.make_commutative",
  "kwant.continuum._common.momentum_operators",
  "kwant.continuum._common.monomials",
  "kwant.continuum._common.pauli",
  "kwant.continuum._common.position_operators",
  "kwant.continuum._common.sympify",
  "kwant.continuum._common.sympy_classes",
  "kwant.continuum.build_discretized",
  "kwant.continuum.discretize",
  "kwant.continuum.discretizer._DiscretizedBuilder",
  "kwant.continuum.discretizer._NumericPrinter",
  "kwant.continuum.discretizer.__all__",
  "kwant.continuum.discretizer._assign_symbols",
  "kwant.continuum.discretizer._builder_value",
  "kwant.continuum.discretizer._differentiate",
  "kwant.continuum.discretizer._discretize_expression",
  "kwant.continuum.discretizer._discretize_summand",
  "kwant.continuum.discretizer._displacements",
  "kwant.continuum.discretizer._momentum_operators",
  "kwant.continuum.discretizer._position_operators",
  "kwant.continuum.discretizer._print_sympy",
  "kwant.continuum.discretizer._return_string",
  "kwant.continuum.discretizer._wf",
  "kwant.continuum.discretizer.build_discretized",
  "kwant.continuum.discretizer.discretize",
  "kwant.continuum.error",
  "kwant.continuum.lambdify",
  "kwant.continuum.momentum_operators",
  "kwant.continuum.msg",
  "kwant.continuum.position_operators",
  "kwant.continuum.sympify",
  "kwant.continuum.tests",
  "kwant.continuum.tests.test_common",
  "kwant.continuum.tests.test_common.A",
  "kwant.continuum.tests.test_common.B",
  "kwant.continuum.tests.test_common.a",
  "kwant.continuum.tests.test_common.b",
  "kwant.continuum.tests.test_common.com_A",
  "kwant.continuum.tests.test_common.com_B",
  "kwant.continuum.tests.test_common.com_C",
  "kwant.continuum.tests.test_common.com_x",
  "kwant.continuum.tests.test_common.com_y",
  "kwant.continuum.tests.test_common.expr1",
  "kwant.continuum.tests.test_common.fA",
  "kwant.continuum.tests.test_common.fB",
  "kwant.continuum.tests.test_common.fC",
  "kwant.continuum.tests.test_common.kx",
  "kwant.continuum.tests.test_common.ky",
  "kwant.continuum.tests.test_common.kz",
  "kwant.continuum.tests.test_common.lambdify",
  "kwant.continuum.tests.test_common.make_commutative",
  "kwant.continuum.tests.test_common.matr_com",
  "kwant.continuum.tests.test_common.matr_monomials",
  "kwant.continuum.tests.test_common.momentum_operators",
  "kwant.continuum.tests.test_common.monomials",
  "kwant.continuum.tests.test_common.position_operators",
  "kwant.continuum.tests.test_common.res_mat",
  "kwant.continuum.tests.test_common.sympify",
  "kwant.continuum.tests.test_common.test_lambdify",
  "kwant.continuum.tests.test_common.test_make_commutative",
  "kwant.continuum.tests.test_common.test_monomials",
  "kwant.continuum.tests.test_common.test_sympify",
  "kwant.continuum.tests.test_common.x",
  "kwant.continuum.tests.test_common.x_op",
  "kwant.continuum.tests.test_common.y",
  "kwant.continuum.tests.test_common.y_op",
  "kwant.continuum.tests.test_common.z",
  "kwant.continuum.tests.test_common.z_op",
  "kwant.continuum.tests.test_discretizer",
  "kwant.continuum.tests.test_discretizer.A",
  "kwant.continuum.tests.test_discretizer.B",
  "kwant.continuum.tests.test_discretizer.I",
  "kwant.continuum.tests.test_discretizer.Psi",
  "kwant.continuum.tests.test_discretizer.a",
  "kwant.continuum.tests.test_discretizer.ax",
  "kwant.continuum.tests.test_discretizer.ay",
  "kwant.continuum.tests.test_discretizer.az",
  "kwant.continuum.tests.test_discretizer.fA",
  "kwant.continuum.tests.test_discretizer.fB",
  "kwant.continuum.tests.test_discretizer.kx",
  "kwant.continuum.tests.test_discretizer.ky",
  "kwant.continuum.tests.test_discretizer.kz",
  "kwant.continuum.tests.test_discretizer.ns",
  "kwant.continuum.tests.test_discretizer.swallows_extra_kwargs",
  "kwant.continuum.tests.test_discretizer.test_check_symbol_names",
  "kwant.continuum.tests.test_discretizer.test_different_discrete_coordinates",
  "kwant.continuum.tests.test_discretizer.test_grid",
  "kwant.continuum.tests.test_discretizer.test_integer_float_input",
  "kwant.continuum.tests.test_discretizer.test_matrix_with_zeros",
  "kwant.continuum.tests.test_discretizer.test_non_expended_input",
  "kwant.continuum.tests.test_discretizer.test_numeric_function_coords_from_site",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_advance",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_basic_string",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_basic_symbolic",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_not_discrete_coords",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_with_parameter",
  "kwant.continuum.tests.test_discretizer.test_numeric_functions_with_subs",
  "kwant.continuum.tests.test_discretizer.test_onsite_hopping_function_name",
  "kwant.continuum.tests.test_discretizer.test_reading_coordinates",
  "kwant.continuum.tests.test_discretizer.test_reading_different_matrix_types",
  "kwant.continuum.tests.test_discretizer.test_rectangular_grid",
  "kwant.continuum.tests.test_discretizer.test_simple_derivations",
  "kwant.continuum.tests.test_discretizer.wf",
  "kwant.continuum.tests.test_discretizer.x",
  "kwant.continuum.tests.test_discretizer.y",
  "kwant.continuum.tests.test_discretizer.z",
  "kwant.digest",
  "kwant.digest.BPF",
  "kwant.digest.BPF_MASK",
  "kwant.digest.RECIP_BPF",
  "kwant.digest.TWOPI",
  "kwant.digest.__all__",
  "kwant.digest.gauss",
  "kwant.digest.str_to_bytes",
  "kwant.digest.test",
  "kwant.digest.uniform",
  "kwant.graph",
  "kwant.graph.Graph",
  "kwant.graph.__all__",
  "kwant.graph.core",
  "kwant.graph.core.DisabledFeatureError",
  "kwant.graph.core.EdgeDoesNotExistError",
  "kwant.graph.core.Graph",
  "kwant.graph.core.NodeDoesNotExistError",
  "kwant.graph.core.__bootstrap__",
  "kwant.graph.core.__file__",
  "kwant.graph.core.__loader__",
  "kwant.graph.defs",
  "kwant.graph.defs.__all__",
  "kwant.graph.defs.gint_dtype",
  "kwant.graph.dijkstra",
  "kwant.graph.dijkstra.__bootstrap__",
  "kwant.graph.dijkstra.__file__",
  "kwant.graph.dijkstra.__loader__",
  "kwant.graph.module",
  "kwant.graph.tests",
  "kwant.graph.tests.test_core",
  "kwant.graph.tests.test_core.DisabledFeatureError",
  "kwant.graph.tests.test_core.EdgeDoesNotExistError",
  "kwant.graph.tests.test_core.Graph",
  "kwant.graph.tests.test_core.NodeDoesNotExistError",
  "kwant.graph.tests.test_core.check_dot",
  "kwant.graph.tests.test_core.test_add_edges",
  "kwant.graph.tests.test_core.test_edge_ids",
  "kwant.graph.tests.test_core.test_empty",
  "kwant.graph.tests.test_core.test_large",
  "kwant.graph.tests.test_core.test_negative_node_ids",
  "kwant.graph.tests.test_core.test_num_nodes",
  "kwant.graph.tests.test_core.test_pickle",
  "kwant.graph.tests.test_core.test_small",
  "kwant.graph.tests.test_scotch",
  "kwant.graph.tests.test_scotch.Graph",
  "kwant.graph.tests.test_scotch._DISABLED_test_bisect",
  "kwant.graph.tests.test_scotch._DISABLED_test_reset",
  "kwant.kpm",
  "kwant.lattice",
  "kwant.lattice.Monatomic",
  "kwant.lattice.Polyatomic",
  "kwant.lattice.TranslationalSymmetry",
  "kwant.lattice.__all__",
  "kwant.lattice._check_prim_vecs",
  "kwant.lattice.chain",
  "kwant.lattice.cubic",
  "kwant.lattice.general",
  "kwant.lattice.honeycomb",
  "kwant.lattice.kagome",
  "kwant.lattice.short_array_repr",
  "kwant.lattice.short_array_str",
  "kwant.lattice.square",
  "kwant.lattice.tri",
  "kwant.lattice.triangular",
  "kwant.linalg",
  "kwant.linalg.__all__",
  "kwant.linalg._mumps",
  "kwant.linalg._mumps.__bootstrap__",
  "kwant.linalg._mumps.__file__",
  "kwant.linalg._mumps.__loader__",
  "kwant.linalg.cmumps",
  "kwant.linalg.cmumps.int_dtype",
  "kwant.linalg.convert_r2c_gen_schur",
  "kwant.linalg.convert_r2c_schur",
  "kwant.linalg.decomp_ev",
  "kwant.linalg.decomp_ev.__all__",
  "kwant.linalg.decomp_ev.gen_eig",
  "kwant.linalg.decomp_lu",
  "kwant.linalg.decomp_lu.__all__",
  "kwant.linalg.decomp_lu.lu_factor",
  "kwant.linalg.decomp_lu.lu_solve",
  "kwant.linalg.decomp_lu.rcond_from_lu",
  "kwant.linalg.decomp_schur",
  "kwant.linalg.decomp_schur.__all__",
  "kwant.linalg.decomp_schur.convert_r2c_gen_schur",
  "kwant.linalg.decomp_schur.convert_r2c_schur",
  "kwant.linalg.decomp_schur.evecs_from_gen_schur",
  "kwant.linalg.decomp_schur.evecs_from_schur",
  "kwant.linalg.decomp_schur.gen_schur",
  "kwant.linalg.decomp_schur.order_gen_schur",
  "kwant.linalg.decomp_schur.order_schur",
  "kwant.linalg.decomp_schur.schur",
  "kwant.linalg.evecs_from_gen_schur",
  "kwant.linalg.evecs_from_schur",
  "kwant.linalg.fortran_helpers",
  "kwant.linalg.fortran_helpers.assert_fortran_mat",
  "kwant.linalg.fortran_helpers.prepare_for_fortran",
  "kwant.linalg.gen_eig",
  "kwant.linalg.gen_schur",
  "kwant.linalg.lapack",
  "kwant.linalg.lapack.__bootstrap__",
  "kwant.linalg.lapack.__file__",
  "kwant.linalg.lapack.__loader__",
  "kwant.linalg.lll",
  "kwant.linalg.lll.__all__",
  "kwant.linalg.lll.cvp",
  "kwant.linalg.lll.gs",
  "kwant.linalg.lll.is_c_reduced",
  "kwant.linalg.lll.lll",
  "kwant.linalg.lll.voronoi",
  "kwant.linalg.lu_factor",
  "kwant.linalg.lu_solve",
  "kwant.linalg.module",
  "kwant.linalg.mumps",
  "kwant.linalg.mumps.AnalysisStatistics",
  "kwant.linalg.mumps.FactorizationStatistics",
  "kwant.linalg.mumps.MUMPSContext",
  "kwant.linalg.mumps.MUMPSError",
  "kwant.linalg.mumps.__all__",
  "kwant.linalg.mumps._make_assembled_from_coo",
  "kwant.linalg.mumps._make_mumps_index_array",
  "kwant.linalg.mumps._make_sparse_rhs_from_csc",
  "kwant.linalg.mumps.error_messages",
  "kwant.linalg.mumps.ordering_name",
  "kwant.linalg.mumps.orderings",
  "kwant.linalg.mumps.possible_orderings",
  "kwant.linalg.mumps.schur_complement",
  "kwant.linalg.order_gen_schur",
  "kwant.linalg.order_schur",
  "kwant.linalg.rcond_from_lu",
  "kwant.linalg.schur",
  "kwant.linalg.tests",
  "kwant.linalg.tests._test_utils",
  "kwant.linalg.tests._test_utils._Random",
  "kwant.linalg.tests._test_utils.assert_array_almost_equal",
  "kwant.linalg.tests.test_linalg",
  "kwant.linalg.tests.test_linalg.convert_r2c_gen_schur",
  "kwant.linalg.tests.test_linalg.convert_r2c_schur",
  "kwant.linalg.tests.test_linalg.evecs_from_gen_schur",
  "kwant.linalg.tests.test_linalg.evecs_from_schur",
  "kwant.linalg.tests.test_linalg.gen_eig",
  "kwant.linalg.tests.test_linalg.gen_schur",
  "kwant.linalg.tests.test_linalg.lu_factor",
  "kwant.linalg.tests.test_linalg.lu_solve",
  "kwant.linalg.tests.test_linalg.order_gen_schur",
  "kwant.linalg.tests.test_linalg.order_schur",
  "kwant.linalg.tests.test_linalg.rcond_from_lu",
  "kwant.linalg.tests.test_linalg.schur",
  "kwant.linalg.tests.test_linalg.test_convert_r2c_gen_schur",
  "kwant.linalg.tests.test_linalg.test_convert_r2c_schur",
  "kwant.linalg.tests.test_linalg.test_evecs_from_gen_schur",
  "kwant.linalg.tests.test_linalg.test_evecs_from_schur",
  "kwant.linalg.tests.test_linalg.test_gen_eig",
  "kwant.linalg.tests.test_linalg.test_gen_schur",
  "kwant.linalg.tests.test_linalg.test_lu",
  "kwant.linalg.tests.test_linalg.test_order_gen_schur",
  "kwant.linalg.tests.test_linalg.test_order_schur",
  "kwant.linalg.tests.test_linalg.test_rcond_from_lu",
  "kwant.linalg.tests.test_linalg.test_schur",
  "kwant.linalg.tests.test_lll",
  "kwant.linalg.tests.test_lll.ensure_rng",
  "kwant.linalg.tests.test_lll.lll",
  "kwant.linalg.tests.test_lll.test_cvp",
  "kwant.linalg.tests.test_lll.test_lll",
  "kwant.linalg.tests.test_mumps",
  "kwant.linalg.tests.test_mumps.Builder",
  "kwant.linalg.tests.test_mumps.HoppingKind",
  "kwant.linalg.tests.test_mumps.MUMPSContext",
  "kwant.linalg.tests.test_mumps.honeycomb",
  "kwant.linalg.tests.test_mumps.no_mumps",
  "kwant.linalg.tests.test_mumps.pytestmark",
  "kwant.linalg.tests.test_mumps.schur_complement",
  "kwant.linalg.tests.test_mumps.test_error_minus_9",
  "kwant.linalg.tests.test_mumps.test_factor_warning",
  "kwant.linalg.tests.test_mumps.test_lu_with_dense",
  "kwant.linalg.tests.test_mumps.test_schur_complement_with_dense",
  "kwant.module",
  "kwant.msg",
  "kwant.names",
  "kwant.operator",
  "kwant.operator.__bootstrap__",
  "kwant.operator.__file__",
  "kwant.operator.__loader__",
  "kwant.physics",
  "kwant.physics.DiscreteSymmetry",
  "kwant.physics.__all__",
  "kwant.physics.dispersion",
  "kwant.physics.dispersion.Bands",
  "kwant.physics.dispersion.__all__",
  "kwant.physics.gauge",
  "kwant.physics.gauge.__all__",
  "kwant.physics.gauge._add_coo_matrices",
  "kwant.physics.gauge._assign_csr",
  "kwant.physics.gauge._average_triangle",
  "kwant.physics.gauge._calculate_phases",
  "kwant.physics.gauge._check_composite_system",
  "kwant.physics.gauge._check_infinite_syst",
  "kwant.physics.gauge._const_triangle",
  "kwant.physics.gauge._distance_matrix",
  "kwant.physics.gauge._extended_scattering_region",
  "kwant.physics.gauge._find_loops",
  "kwant.physics.gauge._finite_wrapper",
  "kwant.physics.gauge._infinite_wrapper",
  "kwant.physics.gauge._interior_links",
  "kwant.physics.gauge._loops_in_composite",
  "kwant.physics.gauge._loops_in_finite",
  "kwant.physics.gauge._loops_in_infinite",
  "kwant.physics.gauge._make_metatree",
  "kwant.physics.gauge._order_links",
  "kwant.physics.gauge._peierls_composite",
  "kwant.physics.gauge._peierls_finite",
  "kwant.physics.gauge._peierls_infinite",
  "kwant.physics.gauge._previous_phase_composite",
  "kwant.physics.gauge._previous_phase_finite",
  "kwant.physics.gauge._previous_phase_infinite",
  "kwant.physics.gauge._quad_triangle",
  "kwant.physics.gauge._same_sparsity_structure",
  "kwant.physics.gauge._shift_diagonally",
  "kwant.physics.gauge._shortest_distance_forest",
  "kwant.physics.gauge._spanning_tree_composite",
  "kwant.physics.gauge._surface_integral",
  "kwant.physics.gauge.magnetic_gauge",
  "kwant.physics.leads",
  "kwant.physics.leads.Linsys",
  "kwant.physics.leads.PropagatingModes",
  "kwant.physics.leads.StabilizedModes",
  "kwant.physics.leads.__all__",
  "kwant.physics.leads.bdiag_broken",
  "kwant.physics.leads.block_diag",
  "kwant.physics.leads.compute_block_modes",
  "kwant.physics.leads.dot",
  "kwant.physics.leads.group_halves",
  "kwant.physics.leads.lstsq",
  "kwant.physics.leads.make_proper_modes",
  "kwant.physics.leads.modes",
  "kwant.physics.leads.nonzero_symm_projection",
  "kwant.physics.leads.phs_symmetrization",
  "kwant.physics.leads.selfenergy",
  "kwant.physics.leads.setup_linsys",
  "kwant.physics.leads.square_selfenergy",
  "kwant.physics.leads.transform_modes",
  "kwant.physics.leads.unified_eigenproblem",
  "kwant.physics.module",
  "kwant.physics.noise",
  "kwant.physics.noise.__all__",
  "kwant.physics.noise.two_terminal_shotnoise",
  "kwant.physics.symmetry",
  "kwant.physics.symmetry.DiscreteSymmetry",
  "kwant.physics.symmetry.__all__",
  "kwant.physics.symmetry._column_sum",
  "kwant.physics.symmetry._conj",
  "kwant.physics.symmetry._names",
  "kwant.physics.symmetry._signs",
  "kwant.physics.symmetry.almost_identity",
  "kwant.physics.symmetry.cond_conj",
  "kwant.physics.tests",
  "kwant.physics.tests.test_dispersion",
  "kwant.physics.tests.test_dispersion.make_lead",
  "kwant.physics.tests.test_dispersion.test_band_energies",
  "kwant.physics.tests.test_dispersion.test_band_velocities",
  "kwant.physics.tests.test_dispersion.test_band_velocity_derivative",
  "kwant.physics.tests.test_dispersion.test_eigenvector_calculation",
  "kwant.physics.tests.test_dispersion.test_raise_implemented",
  "kwant.physics.tests.test_dispersion.test_raise_nonhermitian",
  "kwant.physics.tests.test_dispersion.test_same_as_lead",
  "kwant.physics.tests.test_gauge",
  "kwant.physics.tests.test_gauge.Loop",
  "kwant.physics.tests.test_gauge._make_square_syst",
  "kwant.physics.tests.test_gauge._test_disconnected",
  "kwant.physics.tests.test_gauge._test_phase_loops",
  "kwant.physics.tests.test_gauge.a",
  "kwant.physics.tests.test_gauge.available_loops",
  "kwant.physics.tests.test_gauge.b",
  "kwant.physics.tests.test_gauge.ball",
  "kwant.physics.tests.test_gauge.check_loop_kind",
  "kwant.physics.tests.test_gauge.circle",
  "kwant.physics.tests.test_gauge.circular_field",
  "kwant.physics.tests.test_gauge.cubic",
  "kwant.physics.tests.test_gauge.cubic_lattice",
  "kwant.physics.tests.test_gauge.cubic_loops",
  "kwant.physics.tests.test_gauge.cuboid",
  "kwant.physics.tests.test_gauge.half_ring",
  "kwant.physics.tests.test_gauge.honeycomb",
  "kwant.physics.tests.test_gauge.honeycomb_lattice",
  "kwant.physics.tests.test_gauge.honeycomb_loops",
  "kwant.physics.tests.test_gauge.hypercube",
  "kwant.physics.tests.test_gauge.loop_to_links",
  "kwant.physics.tests.test_gauge.model",
  "kwant.physics.tests.test_gauge.no_symmetry",
  "kwant.physics.tests.test_gauge.random_loop",
  "kwant.physics.tests.test_gauge.rectangle",
  "kwant.physics.tests.test_gauge.ring",
  "kwant.physics.tests.test_gauge.special_ortho_group",
  "kwant.physics.tests.test_gauge.special_ortho_group_gen",
  "kwant.physics.tests.test_gauge.square",
  "kwant.physics.tests.test_gauge.square_lattice",
  "kwant.physics.tests.test_gauge.square_loops",
  "kwant.physics.tests.test_gauge.test_constant_surface_integral",
  "kwant.physics.tests.test_gauge.test_invalid_lead",
  "kwant.physics.tests.test_gauge.test_invariant_surface_integral",
  "kwant.physics.tests.test_gauge.test_minimal_cycle_basis",
  "kwant.physics.tests.test_gauge.test_overlapping_interfaces",
  "kwant.physics.tests.test_gauge.test_phase_sign",
  "kwant.physics.tests.test_gauge.test_phases",
  "kwant.physics.tests.test_gauge.test_unfixable_gauge",
  "kwant.physics.tests.test_gauge.test_uniform_magnetic_field",
  "kwant.physics.tests.test_gauge.translational_symmetry",
  "kwant.physics.tests.test_gauge.wedge",
  "kwant.physics.tests.test_leads",
  "kwant.physics.tests.test_leads.check_PHS",
  "kwant.physics.tests.test_leads.check_bdiag_modes",
  "kwant.physics.tests.test_leads.check_equivalence",
  "kwant.physics.tests.test_leads.check_identical_modes",
  "kwant.physics.tests.test_leads.check_symm_ham",
  "kwant.physics.tests.test_leads.current_conserving",
  "kwant.physics.tests.test_leads.ensure_rng",
  "kwant.physics.tests.test_leads.h_cell_s_func",
  "kwant.physics.tests.test_leads.leads",
  "kwant.physics.tests.test_leads.make_clean_lead",
  "kwant.physics.tests.test_leads.modes_se",
  "kwant.physics.tests.test_leads.random_onsite_hop",
  "kwant.physics.tests.test_leads.test_PHS_TRIM",
  "kwant.physics.tests.test_leads.test_analytic_numeric",
  "kwant.physics.tests.test_leads.test_block_relations_cons_PHS",
  "kwant.physics.tests.test_leads.test_blocks_symm_complex_projectors",
  "kwant.physics.tests.test_leads.test_chiral_symm",
  "kwant.physics.tests.test_leads.test_cons_blocks_sizes",
  "kwant.physics.tests.test_leads.test_cons_rectangular_hopping",
  "kwant.physics.tests.test_leads.test_cons_singular_hopping",
  "kwant.physics.tests.test_leads.test_dtype_linsys",
  "kwant.physics.tests.test_leads.test_for_all_evs_equal",
  "kwant.physics.tests.test_leads.test_modes",
  "kwant.physics.tests.test_leads.test_momenta",
  "kwant.physics.tests.test_leads.test_regular_degenerate_with_crossing",
  "kwant.physics.tests.test_leads.test_regular_fully_degenerate",
  "kwant.physics.tests.test_leads.test_singular",
  "kwant.physics.tests.test_leads.test_symm_algorithm_equivalence",
  "kwant.physics.tests.test_leads.test_zero_hopping",
  "kwant.physics.tests.test_noise",
  "kwant.physics.tests.test_noise.chain",
  "kwant.physics.tests.test_noise.ensure_rng",
  "kwant.physics.tests.test_noise.n",
  "kwant.physics.tests.test_noise.test_multiterminal_input",
  "kwant.physics.tests.test_noise.test_twoterminal",
  "kwant.physics.tests.test_noise.two_terminal_shotnoise",
  "kwant.physics.tests.test_noise.twoterminal_system",
  "kwant.physics.tests.test_symmetry",
  "kwant.physics.tests.test_symmetry.DiscreteSymmetry",
  "kwant.physics.tests.test_symmetry.ensure_rng",
  "kwant.physics.tests.test_symmetry.random_onsite_hop",
  "kwant.physics.tests.test_symmetry.test_projectors",
  "kwant.physics.tests.test_symmetry.test_set_discrete_symm",
  "kwant.physics.tests.test_symmetry.test_validate",
  "kwant.physics.two_terminal_shotnoise",
  "kwant.plot",
  "kwant.plotter",
  "kwant.plotter.__all__",
  "kwant.plotter._bump",
  "kwant.plotter._color_cycle",
  "kwant.plotter._create_field",
  "kwant.plotter._gamma_compress",
  "kwant.plotter._gamma_expand",
  "kwant.plotter._interpolate_field",
  "kwant.plotter._linear_cmap",
  "kwant.plotter._make_figure",
  "kwant.plotter._mask",
  "kwant.plotter._maybe_output_fig",
  "kwant.plotter._optimal_width",
  "kwant.plotter._p",
  "kwant.plotter._sample_array",
  "kwant.plotter._smoothing",
  "kwant.plotter.bands",
  "kwant.plotter.current",
  "kwant.plotter.defaults",
  "kwant.plotter.density",
  "kwant.plotter.get_symbol",
  "kwant.plotter.interpolate_current",
  "kwant.plotter.interpolate_density",
  "kwant.plotter.lines",
  "kwant.plotter.map",
  "kwant.plotter.mask_interpolate",
  "kwant.plotter.percentile_bound",
  "kwant.plotter.plot",
  "kwant.plotter.scalarplot",
  "kwant.plotter.set_colors",
  "kwant.plotter.spectrum",
  "kwant.plotter.streamplot",
  "kwant.plotter.symbol_dict",
  "kwant.plotter.symbols",
  "kwant.plotter.sys_leads_hopping_pos",
  "kwant.plotter.sys_leads_hoppings",
  "kwant.plotter.sys_leads_pos",
  "kwant.plotter.sys_leads_sites",
  "kwant.qsymm",
  "kwant.qsymm.__all__",
  "kwant.qsymm._get_builder_symmetries",
  "kwant.qsymm.builder_to_model",
  "kwant.qsymm.error",
  "kwant.qsymm.find_builder_symmetries",
  "kwant.qsymm.get_parameters",
  "kwant.qsymm.lattice",
  "kwant.qsymm.model_to_builder",
  "kwant.qsymm.msg",
  "kwant.rmt",
  "kwant.rmt.__all__",
  "kwant.rmt.c",
  "kwant.rmt.gaussian",
  "kwant.rmt.h_p_matrix",
  "kwant.rmt.h_t_matrix",
  "kwant.rmt.p",
  "kwant.rmt.qr",
  "kwant.rmt.sym_list",
  "kwant.rmt.t",
  "kwant.solvers",
  "kwant.solvers.__all__",
  "kwant.solvers.common",
  "kwant.solvers.common.BlockResult",
  "kwant.solvers.common.GreensFunction",
  "kwant.solvers.common.LinearSys",
  "kwant.solvers.common.SMatrix",
  "kwant.solvers.common.SparseSolver",
  "kwant.solvers.common.WaveFunction",
  "kwant.solvers.common.__all__",
  "kwant.solvers.default",
  "kwant.solvers.default.__all__",
  "kwant.solvers.default.greens_function",
  "kwant.solvers.default.hidden_instance",
  "kwant.solvers.default.ldos",
  "kwant.solvers.default.smatrix",
  "kwant.solvers.default.wave_function",
  "kwant.solvers.mumps",
  "kwant.solvers.mumps.Solver",
  "kwant.solvers.mumps.__all__",
  "kwant.solvers.mumps.default_solver",
  "kwant.solvers.mumps.greens_function",
  "kwant.solvers.mumps.ldos",
  "kwant.solvers.mumps.options",
  "kwant.solvers.mumps.reset_options",
  "kwant.solvers.mumps.smatrix",
  "kwant.solvers.mumps.wave_function",
  "kwant.solvers.sparse",
  "kwant.solvers.sparse.Solver",
  "kwant.solvers.sparse.__all__",
  "kwant.solvers.sparse.default_solver",
  "kwant.solvers.sparse.factorized",
  "kwant.solvers.sparse.greens_function",
  "kwant.solvers.sparse.ldos",
  "kwant.solvers.sparse.smatrix",
  "kwant.solvers.sparse.umfpack",
  "kwant.solvers.sparse.uses_umfpack",
  "kwant.solvers.sparse.wave_function",
  "kwant.solvers.tests",
  "kwant.solvers.tests._test_sparse",
  "kwant.solvers.tests._test_sparse.LeadWithOnlySelfEnergy",
  "kwant.solvers.tests._test_sparse.assert_modes_equal",
  "kwant.solvers.tests._test_sparse.chain",
  "kwant.solvers.tests._test_sparse.ensure_rng",
  "kwant.solvers.tests._test_sparse.n",
  "kwant.solvers.tests._test_sparse.sq",
  "kwant.solvers.tests._test_sparse.square",
  "kwant.solvers.tests._test_sparse.test_arg_passing",
  "kwant.solvers.tests._test_sparse.test_graph_system",
  "kwant.solvers.tests._test_sparse.test_ldos",
  "kwant.solvers.tests._test_sparse.test_many_leads",
  "kwant.solvers.tests._test_sparse.test_one_lead",
  "kwant.solvers.tests._test_sparse.test_output",
  "kwant.solvers.tests._test_sparse.test_selfenergy",
  "kwant.solvers.tests._test_sparse.test_singular_graph_system",
  "kwant.solvers.tests._test_sparse.test_smatrix_shape",
  "kwant.solvers.tests._test_sparse.test_tricky_singular_hopping",
  "kwant.solvers.tests._test_sparse.test_two_equal_leads",
  "kwant.solvers.tests._test_sparse.test_very_singular_leads",
  "kwant.solvers.tests._test_sparse.test_wavefunc_ldos_consistency",
  "kwant.solvers.tests.test_mumps",
  "kwant.solvers.tests.test_mumps.greens_function",
  "kwant.solvers.tests.test_mumps.ldos",
  "kwant.solvers.tests.test_mumps.no_mumps",
  "kwant.solvers.tests.test_mumps.opt_list",
  "kwant.solvers.tests.test_mumps.options",
  "kwant.solvers.tests.test_mumps.pytestmark",
  "kwant.solvers.tests.test_mumps.reset_options",
  "kwant.solvers.tests.test_mumps.smatrix",
  "kwant.solvers.tests.test_mumps.test_arg_passing",
  "kwant.solvers.tests.test_mumps.test_graph_system",
  "kwant.solvers.tests.test_mumps.test_ldos",
  "kwant.solvers.tests.test_mumps.test_many_leads",
  "kwant.solvers.tests.test_mumps.test_one_lead",
  "kwant.solvers.tests.test_mumps.test_output",
  "kwant.solvers.tests.test_mumps.test_selfenergy",
  "kwant.solvers.tests.test_mumps.test_singular_graph_system",
  "kwant.solvers.tests.test_mumps.test_smatrix_shape",
  "kwant.solvers.tests.test_mumps.test_tricky_singular_hopping",
  "kwant.solvers.tests.test_mumps.test_two_equal_leads",
  "kwant.solvers.tests.test_mumps.test_very_singular_leads",
  "kwant.solvers.tests.test_mumps.test_wavefunc_ldos_consistency",
  "kwant.solvers.tests.test_mumps.wave_function",
  "kwant.solvers.tests.test_sparse",
  "kwant.solvers.tests.test_sparse.greens_function",
  "kwant.solvers.tests.test_sparse.ldos",
  "kwant.solvers.tests.test_sparse.smatrix",
  "kwant.solvers.tests.test_sparse.test_arg_passing",
  "kwant.solvers.tests.test_sparse.test_graph_system",
  "kwant.solvers.tests.test_sparse.test_ldos",
  "kwant.solvers.tests.test_sparse.test_many_leads",
  "kwant.solvers.tests.test_sparse.test_one_lead",
  "kwant.solvers.tests.test_sparse.test_output",
  "kwant.solvers.tests.test_sparse.test_selfenergy",
  "kwant.solvers.tests.test_sparse.test_singular_graph_system",
  "kwant.solvers.tests.test_sparse.test_smatrix_shape",
  "kwant.solvers.tests.test_sparse.test_tricky_singular_hopping",
  "kwant.solvers.tests.test_sparse.test_two_equal_leads",
  "kwant.solvers.tests.test_sparse.test_very_singular_leads",
  "kwant.solvers.tests.test_sparse.test_wavefunc_ldos_consistency",
  "kwant.solvers.tests.test_sparse.wave_function",
  "kwant.system",
  "kwant.system.FiniteSystem",
  "kwant.system.InfiniteSystem",
  "kwant.system.PrecalculatedLead",
  "kwant.system.System",
  "kwant.system.__all__",
  "kwant.test",
  "kwant.tests.test_builder",
  "kwant.tests.test_builder.VerySimpleSymmetry",
  "kwant.tests.test_builder.builder",
  "kwant.tests.test_builder.check_construction_and_indexing",
  "kwant.tests.test_builder.check_hoppings",
  "kwant.tests.test_builder.check_id_by_site",
  "kwant.tests.test_builder.check_onsite",
  "kwant.tests.test_builder.ensure_rng",
  "kwant.tests.test_builder.inside_disc",
  "kwant.tests.test_builder.random_hopping_integral",
  "kwant.tests.test_builder.random_onsite_hamiltonian",
  "kwant.tests.test_builder.test_HoppingKind",
  "kwant.tests.test_builder.test_ModesLead_and_SelfEnergyLead",
  "kwant.tests.test_builder.test_argument_passing",
  "kwant.tests.test_builder.test_attach_lead",
  "kwant.tests.test_builder.test_attach_stores_padding",
  "kwant.tests.test_builder.test_bad_keys",
  "kwant.tests.test_builder.test_builder_with_symmetry",
  "kwant.tests.test_builder.test_closest",
  "kwant.tests.test_builder.test_construction_and_indexing",
  "kwant.tests.test_builder.test_dangling",
  "kwant.tests.test_builder.test_discrete_symmetries",
  "kwant.tests.test_builder.test_fill",
  "kwant.tests.test_builder.test_finalization",
  "kwant.tests.test_builder.test_hamiltonian_evaluation",
  "kwant.tests.test_builder.test_hermitian_conjugation",
  "kwant.tests.test_builder.test_invalid_HoppingKind",
  "kwant.tests.test_builder.test_neighbors_not_in_single_domain",
  "kwant.tests.test_builder.test_parameter_substitution",
  "kwant.tests.test_builder.test_site_families",
  "kwant.tests.test_builder.test_site_pickle",
  "kwant.tests.test_builder.test_site_ranges",
  "kwant.tests.test_builder.test_subs",
  "kwant.tests.test_builder.test_update",
  "kwant.tests.test_builder.test_value_equality_and_identity",
  "kwant.tests.test_comprehensive",
  "kwant.tests.test_comprehensive.hopping",
  "kwant.tests.test_comprehensive.onsite",
  "kwant.tests.test_comprehensive.test_qhe",
  "kwant.tests.test_kpm",
  "kwant.tests.test_kpm.SpectralDensity",
  "kwant.tests.test_kpm.TOL",
  "kwant.tests.test_kpm.TOL_SP",
  "kwant.tests.test_kpm.TOL_WEAK",
  "kwant.tests.test_kpm.assert_allclose",
  "kwant.tests.test_kpm.deviation_from_eigenvalues",
  "kwant.tests.test_kpm.dim",
  "kwant.tests.test_kpm.find_peaks_in_an_array",
  "kwant.tests.test_kpm.kpm_derivative",
  "kwant.tests.test_kpm.make_chain",
  "kwant.tests.test_kpm.make_spectrum",
  "kwant.tests.test_kpm.p",
  "kwant.tests.test_kpm.test_api_ham",
  "kwant.tests.test_kpm.test_api_operator",
  "kwant.tests.test_kpm.test_api_single_eigenvalue_error",
  "kwant.tests.test_kpm.test_bounds",
  "kwant.tests.test_kpm.test_call",
  "kwant.tests.test_kpm.test_check_convergence_decreasing_values",
  "kwant.tests.test_kpm.test_conductivity",
  "kwant.tests.test_kpm.test_convergence_custom_vector_factory",
  "kwant.tests.test_kpm.test_energy_resolution",
  "kwant.tests.test_kpm.test_increase_energy_resolution",
  "kwant.tests.test_kpm.test_increase_num_moments",
  "kwant.tests.test_kpm.test_increase_num_vectors",
  "kwant.tests.test_kpm.test_integrate",
  "kwant.tests.test_kpm.test_invalid_input",
  "kwant.tests.test_kpm.test_kwant_op",
  "kwant.tests.test_kpm.test_kwant_syst",
  "kwant.tests.test_kpm.test_mean_SD",
  "kwant.tests.test_kpm.test_operator_none",
  "kwant.tests.test_kpm.test_operator_user",
  "kwant.tests.test_kpm.test_rescale",
  "kwant.tests.test_kpm.test_vector_factory",
  "kwant.tests.test_kpm.test_where",
  "kwant.tests.test_lattice",
  "kwant.tests.test_lattice.builder",
  "kwant.tests.test_lattice.ensure_rng",
  "kwant.tests.test_lattice.lattice",
  "kwant.tests.test_lattice.test_closest",
  "kwant.tests.test_lattice.test_general",
  "kwant.tests.test_lattice.test_lattice_constraints",
  "kwant.tests.test_lattice.test_monatomic_lattice",
  "kwant.tests.test_lattice.test_neighbors",
  "kwant.tests.test_lattice.test_norbs",
  "kwant.tests.test_lattice.test_shape",
  "kwant.tests.test_lattice.test_symmetry_act",
  "kwant.tests.test_lattice.test_symmetry_has_subgroup",
  "kwant.tests.test_lattice.test_translational_symmetry",
  "kwant.tests.test_lattice.test_wire",
  "kwant.tests.test_operator",
  "kwant.tests.test_operator._perfect_lead",
  "kwant.tests.test_operator._random_square_system",
  "kwant.tests.test_operator._test",
  "kwant.tests.test_operator.f_sigmay",
  "kwant.tests.test_operator.opservables",
  "kwant.tests.test_operator.random_hopping",
  "kwant.tests.test_operator.random_onsite",
  "kwant.tests.test_operator.sigma0",
  "kwant.tests.test_operator.sigmax",
  "kwant.tests.test_operator.sigmay",
  "kwant.tests.test_operator.sigmaz",
  "kwant.tests.test_operator.test_arg_passing",
  "kwant.tests.test_operator.test_operator_construction",
  "kwant.tests.test_operator.test_opservables_finite",
  "kwant.tests.test_operator.test_opservables_gauged",
  "kwant.tests.test_operator.test_opservables_infinite",
  "kwant.tests.test_operator.test_opservables_scattering",
  "kwant.tests.test_operator.test_opservables_spin",
  "kwant.tests.test_operator.test_pickling",
  "kwant.tests.test_operator.test_tocoo",
  "kwant.tests.test_plotter",
  "kwant.tests.test_plotter._border_is_0",
  "kwant.tests.test_plotter._plotter",
  "kwant.tests.test_plotter._test_border_0",
  "kwant.tests.test_plotter.bad_transform",
  "kwant.tests.test_plotter.div",
  "kwant.tests.test_plotter.ensure_rng",
  "kwant.tests.test_plotter.good_transform",
  "kwant.tests.test_plotter.matplotlib_backend_chosen",
  "kwant.tests.test_plotter.plotter",
  "kwant.tests.test_plotter.rotational_currents",
  "kwant.tests.test_plotter.syst_2d",
  "kwant.tests.test_plotter.syst_3d",
  "kwant.tests.test_plotter.syst_rect",
  "kwant.tests.test_plotter.test_bands",
  "kwant.tests.test_plotter.test_current",
  "kwant.tests.test_plotter.test_density_interpolation",
  "kwant.tests.test_plotter.test_importable_without_matplotlib",
  "kwant.tests.test_plotter.test_map",
  "kwant.tests.test_plotter.test_mask_interpolate",
  "kwant.tests.test_plotter.test_matplotlib_backend_unset",
  "kwant.tests.test_plotter.test_plot",
  "kwant.tests.test_plotter.test_spectrum",
  "kwant.tests.test_qsymm",
  "kwant.tests.test_qsymm.TranslationalSymmetry",
  "kwant.tests.test_qsymm._get_builder_symmetries",
  "kwant.tests.test_qsymm.builder_to_model",
  "kwant.tests.test_qsymm.ensure_rng",
  "kwant.tests.test_qsymm.find_builder_symmetries",
  "kwant.tests.test_qsymm.model_to_builder",
  "kwant.tests.test_qsymm.qsymm",
  "kwant.tests.test_qsymm.random_onsite_hop",
  "kwant.tests.test_qsymm.sympy",
  "kwant.tests.test_qsymm.test_basis_ordering",
  "kwant.tests.test_qsymm.test_consistency_kwant",
  "kwant.tests.test_qsymm.test_find_builder_discrete_symmetries",
  "kwant.tests.test_qsymm.test_find_cons_law",
  "kwant.tests.test_qsymm.test_get_builder_symmetries",
  "kwant.tests.test_qsymm.test_graphene_to_kwant",
  "kwant.tests.test_qsymm.test_higher_dim",
  "kwant.tests.test_qsymm.test_honeycomb",
  "kwant.tests.test_qsymm.test_inverse_transform",
  "kwant.tests.test_qsymm.test_real_space_basis",
  "kwant.tests.test_qsymm.test_wraparound_convention",
  "kwant.tests.test_rmt",
  "kwant.tests.test_rmt.assert_allclose",
  "kwant.tests.test_rmt.ensure_rng",
  "kwant.tests.test_rmt.rmt",
  "kwant.tests.test_rmt.test_circular",
  "kwant.tests.test_rmt.test_gaussian_distributions",
  "kwant.tests.test_rmt.test_gaussian_symmetries",
  "kwant.tests.test_system",
  "kwant.tests.test_system.ensure_rng",
  "kwant.tests.test_system.test_hamiltonian_submatrix",
  "kwant.tests.test_system.test_pickling",
  "kwant.tests.test_wraparound",
  "kwant.tests.test_wraparound._plotter",
  "kwant.tests.test_wraparound._simple_syst",
  "kwant.tests.test_wraparound.get_parameters",
  "kwant.tests.test_wraparound.plot_2d_bands",
  "kwant.tests.test_wraparound.test_args_params_equivalence",
  "kwant.tests.test_wraparound.test_consistence_with_bands",
  "kwant.tests.test_wraparound.test_fd_mismatch",
  "kwant.tests.test_wraparound.test_opposite_hoppings",
  "kwant.tests.test_wraparound.test_plot_2d_bands",
  "kwant.tests.test_wraparound.test_signatures",
  "kwant.tests.test_wraparound.test_symmetry",
  "kwant.tests.test_wraparound.test_value_types",
  "kwant.tests.test_wraparound.wraparound",
  "kwant.version",
  "kwant.wraparound",
  "kwant.wraparound.WrappedBuilder",
  "kwant.wraparound.__all__",
  "kwant.wraparound._hashable",
  "kwant.wraparound._memoize",
  "kwant.wraparound._set_signature",
  "kwant.wraparound.plot_2d_bands",
  "kwant.wraparound.wraparound"
 ]
}