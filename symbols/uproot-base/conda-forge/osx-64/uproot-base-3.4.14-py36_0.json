{
 "errors": {
  "uproot.tree": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in values",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in <listcomp>",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 70, in wrapper",
    "    and context.get_value() is inference_state.builtins_module:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "uproot.FileSource",
  "uproot.HTTPSource",
  "uproot.MemmapSource",
  "uproot.STLMap",
  "uproot.STLString",
  "uproot.STLVector",
  "uproot.SimpleArray",
  "uproot.TFileCreate",
  "uproot.TFileRecreate",
  "uproot.TFileUpdate",
  "uproot.XRootDSource",
  "uproot.__all__",
  "uproot.__version__",
  "uproot._connect",
  "uproot._connect.to_dask",
  "uproot._connect.to_dask.LazyArray_dask",
  "uproot._connect.to_pandas",
  "uproot._connect.to_pandas.TTreeMethods_pandas",
  "uproot._connect.to_pandas.asdtype",
  "uproot._connect.to_pandas.asjagged",
  "uproot._connect.to_pandas.asobj",
  "uproot._connect.to_pandas.astable",
  "uproot._connect.to_pandas.default_flatname",
  "uproot._connect.to_pandas.futures2df",
  "uproot._help",
  "uproot._help._method",
  "uproot._help.format_source_cursor",
  "uproot._help.interp_fragments",
  "uproot._help.interp_numerical_fragments",
  "uproot._help.open_fragments",
  "uproot._help.rootdirectory_fragments",
  "uproot._help.source_fragments",
  "uproot._help.tree_fragments",
  "uproot.asarray",
  "uproot.asdebug",
  "uproot.asdouble32",
  "uproot.asdtype",
  "uproot.asgenobj",
  "uproot.asjagged",
  "uproot.asobj",
  "uproot.asstlbitset",
  "uproot.asstring",
  "uproot.astable",
  "uproot.cache",
  "uproot.cache.ArrayCache",
  "uproot.cache.ThreadSafeArrayCache",
  "uproot.const",
  "uproot.const.kAny",
  "uproot.const.kAnyP",
  "uproot.const.kAnyPnoVT",
  "uproot.const.kAnyp",
  "uproot.const.kBase",
  "uproot.const.kBitMask",
  "uproot.const.kBits",
  "uproot.const.kBool",
  "uproot.const.kByteCountMask",
  "uproot.const.kByteCountVMask",
  "uproot.const.kChar",
  "uproot.const.kCharStar",
  "uproot.const.kClassMask",
  "uproot.const.kConv",
  "uproot.const.kConvL",
  "uproot.const.kConvP",
  "uproot.const.kCounter",
  "uproot.const.kDisplacementMask",
  "uproot.const.kDouble",
  "uproot.const.kDouble32",
  "uproot.const.kFloat",
  "uproot.const.kFloat16",
  "uproot.const.kGenerateOffsetMap",
  "uproot.const.kInt",
  "uproot.const.kIsOnHeap",
  "uproot.const.kIsReferenced",
  "uproot.const.kLZ4",
  "uproot.const.kLZMA",
  "uproot.const.kLegacyChar",
  "uproot.const.kLong",
  "uproot.const.kLong64",
  "uproot.const.kMapOffset",
  "uproot.const.kNewClassTag",
  "uproot.const.kNotDeleted",
  "uproot.const.kNotSTL",
  "uproot.const.kNullTag",
  "uproot.const.kObject",
  "uproot.const.kObjectP",
  "uproot.const.kObjectp",
  "uproot.const.kOffsetL",
  "uproot.const.kOffsetP",
  "uproot.const.kOldCompressionAlgo",
  "uproot.const.kSTL",
  "uproot.const.kSTLany",
  "uproot.const.kSTLbitset",
  "uproot.const.kSTLdeque",
  "uproot.const.kSTLend",
  "uproot.const.kSTLforwardlist",
  "uproot.const.kSTLlist",
  "uproot.const.kSTLmap",
  "uproot.const.kSTLmultimap",
  "uproot.const.kSTLmultiset",
  "uproot.const.kSTLp",
  "uproot.const.kSTLset",
  "uproot.const.kSTLstring",
  "uproot.const.kSTLunorderedmap",
  "uproot.const.kSTLunorderedmultimap",
  "uproot.const.kSTLunorderedmultiset",
  "uproot.const.kSTLunorderedset",
  "uproot.const.kSTLvector",
  "uproot.const.kShort",
  "uproot.const.kSkip",
  "uproot.const.kSkipL",
  "uproot.const.kSkipP",
  "uproot.const.kStreamLoop",
  "uproot.const.kStreamer",
  "uproot.const.kTNamed",
  "uproot.const.kTObject",
  "uproot.const.kTString",
  "uproot.const.kUChar",
  "uproot.const.kUInt",
  "uproot.const.kULong",
  "uproot.const.kULong64",
  "uproot.const.kUShort",
  "uproot.const.kUndefinedCompressionAlgorithm",
  "uproot.const.kZLIB",
  "uproot.const.kZombie",
  "uproot.daskarray",
  "uproot.daskframe",
  "uproot.http",
  "uproot.interp",
  "uproot.interp.auto",
  "uproot.interp.auto.STLMap",
  "uproot.interp.auto.STLString",
  "uproot.interp.auto.STLVector",
  "uproot.interp.auto.SimpleArray",
  "uproot.interp.auto._NotNumerical",
  "uproot.interp.auto._ftype2dtype",
  "uproot.interp.auto._leaf2dtype",
  "uproot.interp.auto._normalize_ftype",
  "uproot.interp.auto._obj_or_genobj",
  "uproot.interp.auto.asarray",
  "uproot.interp.auto.asdouble32",
  "uproot.interp.auto.asdtype",
  "uproot.interp.auto.asgenobj",
  "uproot.interp.auto.asjagged",
  "uproot.interp.auto.asobj",
  "uproot.interp.auto.asstlbitset",
  "uproot.interp.auto.asstring",
  "uproot.interp.auto.astable",
  "uproot.interp.auto.interpret",
  "uproot.interp.interp",
  "uproot.interp.interp.Interpretation",
  "uproot.interp.interp.Interpretation.__metaclass__",
  "uproot.interp.interp.Interpretation.awkward",
  "uproot.interp.interp.Interpretation.identifier",
  "uproot.interp.jagged",
  "uproot.interp.jagged._JaggedArrayPrep",
  "uproot.interp.jagged.__metaclass__",
  "uproot.interp.jagged._destructive_divide",
  "uproot.interp.jagged.asjagged",
  "uproot.interp.jagged.awkward",
  "uproot.interp.jagged.identifier",
  "uproot.interp.numerical",
  "uproot.interp.numerical.__metaclass__",
  "uproot.interp.numerical._asnumeric",
  "uproot.interp.numerical._dtypeshape",
  "uproot.interp.numerical._flatlen",
  "uproot.interp.numerical.asarray",
  "uproot.interp.numerical.asdouble32",
  "uproot.interp.numerical.asdtype",
  "uproot.interp.numerical.asstlbitset",
  "uproot.interp.numerical.awkward",
  "uproot.interp.numerical.identifier",
  "uproot.interp.numerical.string_types",
  "uproot.interp.objects",
  "uproot.interp.objects.STLMap",
  "uproot.interp.objects.STLString",
  "uproot.interp.objects.STLVector",
  "uproot.interp.objects.SimpleArray",
  "uproot.interp.objects.__metaclass__",
  "uproot.interp.objects._variable",
  "uproot.interp.objects.asgenobj",
  "uproot.interp.objects.asobj",
  "uproot.interp.objects.asstring",
  "uproot.interp.objects.astable",
  "uproot.interp.objects.awkward",
  "uproot.interpret",
  "uproot.iterate",
  "uproot.lazyarray",
  "uproot.numentries",
  "uproot.open",
  "uproot.rootio",
  "uproot.rootio.Cursor",
  "uproot.rootio.HTTPSource",
  "uproot.rootio.MemmapSource",
  "uproot.rootio.ROOTDirectory",
  "uproot.rootio.ROOTObject",
  "uproot.rootio.ROOTStreamedObject",
  "uproot.rootio.ROOT_3a3a_TIOFeatures",
  "uproot.rootio.TArray",
  "uproot.rootio.THashList",
  "uproot.rootio.TKey",
  "uproot.rootio.TList",
  "uproot.rootio.TNamed",
  "uproot.rootio.TObjArray",
  "uproot.rootio.TObjString",
  "uproot.rootio.TObject",
  "uproot.rootio.TStreamerArtificial",
  "uproot.rootio.TStreamerBase",
  "uproot.rootio.TStreamerBasicPointer",
  "uproot.rootio.TStreamerBasicType",
  "uproot.rootio.TStreamerElement",
  "uproot.rootio.TStreamerInfo",
  "uproot.rootio.TStreamerLoop",
  "uproot.rootio.TStreamerObject",
  "uproot.rootio.TStreamerSTL",
  "uproot.rootio.TStreamerString",
  "uproot.rootio.TString",
  "uproot.rootio.Undefined",
  "uproot.rootio.XRootDSource",
  "uproot.rootio._KeyError",
  "uproot.rootio._bytesid",
  "uproot.rootio._canonicaltype",
  "uproot.rootio._classof",
  "uproot.rootio._defineclasses",
  "uproot.rootio._endcheck",
  "uproot.rootio._ftype2dtype",
  "uproot.rootio._ftype2struct",
  "uproot.rootio._makeclass",
  "uproot.rootio._nametitle",
  "uproot.rootio._raise_notimplemented",
  "uproot.rootio._readobjany",
  "uproot.rootio._readstreamers",
  "uproot.rootio._resolveversion",
  "uproot.rootio._safename",
  "uproot.rootio._skiptobj",
  "uproot.rootio._startcheck",
  "uproot.rootio.builtin_classes",
  "uproot.rootio.builtin_skip",
  "uproot.rootio.http",
  "uproot.rootio.nofilter",
  "uproot.rootio.open",
  "uproot.rootio.xrootd",
  "uproot.source",
  "uproot.source.chunked",
  "uproot.source.chunked.ChunkedSource",
  "uproot.source.chunked.ChunkedSource.__metaclass__",
  "uproot.source.chunked.__metaclass__",
  "uproot.source.compressed",
  "uproot.source.compressed.CompressedSource",
  "uproot.source.compressed.Compression",
  "uproot.source.compressed.__metaclass__",
  "uproot.source.cursor",
  "uproot.source.cursor.Cursor",
  "uproot.source.file",
  "uproot.source.file.FileSource",
  "uproot.source.file.__metaclass__",
  "uproot.source.http",
  "uproot.source.http.HTTPSource",
  "uproot.source.http.__metaclass__",
  "uproot.source.memmap",
  "uproot.source.memmap.MemmapSource",
  "uproot.source.memmap.__metaclass__",
  "uproot.source.source",
  "uproot.source.source.Source",
  "uproot.source.source.Source.__metaclass__",
  "uproot.source.xrootd",
  "uproot.source.xrootd.XRootDSource",
  "uproot.source.xrootd.__metaclass__",
  "uproot.tree",
  "uproot.tree.daskarray",
  "uproot.tree.daskframe",
  "uproot.tree.iterate",
  "uproot.tree.lazyarray",
  "uproot.tree.numentries",
  "uproot.version",
  "uproot.version.__version__",
  "uproot.version.version",
  "uproot.version.version_info",
  "uproot.write",
  "uproot.write.TDirectory",
  "uproot.write.TDirectory.TDirectory",
  "uproot.write.TFile",
  "uproot.write.TFile.TFileCreate",
  "uproot.write.TFile.TFileRecreate",
  "uproot.write.TFile.TFileUpdate",
  "uproot.write.TFile.nofilter",
  "uproot.write.TFree",
  "uproot.write.TFree.TFree",
  "uproot.write.TKey",
  "uproot.write.TKey.TKey",
  "uproot.write.objects",
  "uproot.write.objects.TH1",
  "uproot.write.objects.TH1.TH1",
  "uproot.write.objects.TObjString",
  "uproot.write.objects.TObjString.TObjString",
  "uproot.write.sink",
  "uproot.write.sink.cursor",
  "uproot.write.sink.cursor.Cursor",
  "uproot.write.sink.file",
  "uproot.write.sink.file.FileSink",
  "uproot.write.sink.file.Sink",
  "uproot.write.streamers",
  "uproot.write.streamers.streamers",
  "uproot.write.util",
  "uproot.write.util.datime",
  "uproot.xrootd"
 ]
}