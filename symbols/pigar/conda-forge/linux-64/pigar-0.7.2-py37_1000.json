{
 "errors": {
  "pigar.__main__": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "pigar.PY32",
  "pigar.__main__",
  "pigar._version",
  "pigar._version.__version__",
  "pigar._version.version",
  "pigar._version.version_info",
  "pigar.cmd",
  "pigar.cmd.ignore_dirs_check",
  "pigar.cmd.log_level_check",
  "pigar.cmd.parse_args",
  "pigar.cmd.path_check",
  "pigar.cmd.projectpath_check",
  "pigar.db",
  "pigar.db.Database",
  "pigar.db.database",
  "pigar.extractor",
  "pigar.extractor.Extractor",
  "pigar.extractor.extractor",
  "pigar.extractor.extractor.BaseExtractor",
  "pigar.extractor.gevent_extractor",
  "pigar.extractor.gevent_extractor.GeventExtractor",
  "pigar.extractor.thread_extractor",
  "pigar.extractor.thread_extractor.ThreadExtractor",
  "pigar.log",
  "pigar.log._LogFormatter",
  "pigar.log.enable_pretty_logging",
  "pigar.log.logger",
  "pigar.modules",
  "pigar.modules.ImportedModules",
  "pigar.modules.Modules",
  "pigar.modules.ReqsModules",
  "pigar.modules._Locations",
  "pigar.modules._special_cases",
  "pigar.pypi",
  "pigar.pypi.ACCEPTABLE_EXT",
  "pigar.pypi.PKGS_URL",
  "pigar.pypi.PKG_INFO_URL",
  "pigar.pypi.PKG_URL",
  "pigar.pypi.PYPI_URL",
  "pigar.pypi._HEADERS",
  "pigar.pypi._extract_html",
  "pigar.pypi._pkg_json_info",
  "pigar.pypi.check_latest_version",
  "pigar.pypi.download",
  "pigar.pypi.extract_pkg_info",
  "pigar.pypi.extract_pkg_version",
  "pigar.pypi.search_names",
  "pigar.pypi.update_db",
  "pigar.reqs",
  "pigar.reqs.ImportChecker",
  "pigar.reqs._checked_cache",
  "pigar.reqs._search_path",
  "pigar.reqs.file_import_modules",
  "pigar.reqs.get_installed_pkgs_detail",
  "pigar.reqs.is_stdlib",
  "pigar.reqs.project_import_modules",
  "pigar.tests",
  "pigar.tests.helper",
  "pigar.tests.helper.CaptureOutput",
  "pigar.tests.imports_example",
  "pigar.tests.imports_example.example1.A",
  "pigar.tests.imports_example.example1.bar",
  "pigar.tests.imports_example.example1.foo",
  "pigar.tests.test_cmd",
  "pigar.tests.test_cmd.CUR_DIR",
  "pigar.tests.test_cmd.CmdTests",
  "pigar.tests.test_db",
  "pigar.tests.test_db.DbTests",
  "pigar.tests.test_modules",
  "pigar.tests.test_modules.ImportedModulesTests",
  "pigar.tests.test_modules.LocationsTests",
  "pigar.tests.test_modules.ReqsModulesTest",
  "pigar.tests.test_pypi",
  "pigar.tests.test_pypi.ExtractHtmlTest",
  "pigar.tests.test_pypi.UnpackHtmlTest",
  "pigar.tests.test_pypi._FakeResp",
  "pigar.tests.test_reqs",
  "pigar.tests.test_reqs.ReqsTests",
  "pigar.tests.test_reqs.StdlibTest",
  "pigar.tests.test_unpack",
  "pigar.tests.test_unpack.TopLevelTests",
  "pigar.tests.test_utils",
  "pigar.tests.test_utils.CompareVersionTests",
  "pigar.tests.test_utils.DictTests",
  "pigar.tests.test_utils.ParseReqsTest",
  "pigar.tests.test_utils.PrintTableTests",
  "pigar.unpack",
  "pigar.unpack.Archive",
  "pigar.unpack.top_level",
  "pigar.unpack.try_unpack_resp",
  "pigar.utils",
  "pigar.utils.Color",
  "pigar.utils.Dict",
  "pigar.utils.PY32",
  "pigar.utils._BLUE",
  "pigar.utils._GREEN",
  "pigar.utils._NONE",
  "pigar.utils._RED",
  "pigar.utils._WHITE",
  "pigar.utils._YELLOW",
  "pigar.utils._group_alnum",
  "pigar.utils.binary_type",
  "pigar.utils.cmp_to_key",
  "pigar.utils.colorama",
  "pigar.utils.compare_version",
  "pigar.utils.lines_diff",
  "pigar.utils.parse_git_config",
  "pigar.utils.parse_reqs",
  "pigar.utils.print_table"
 ]
}