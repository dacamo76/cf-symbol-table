{
 "errors": {
  "mapkit.sqlaspatial": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "mapkit.Base",
  "mapkit.ColorRampGenerator",
  "mapkit.ColorRampGenerator.ColorRampEnum",
  "mapkit.ColorRampGenerator.ColorRampGenerator",
  "mapkit.ColorRampGenerator.MappedColorRamp",
  "mapkit.GeometryConverter",
  "mapkit.GeometryConverter.GeometryConverter",
  "mapkit.MapKitRaster",
  "mapkit.MapKitRaster.Base",
  "mapkit.MapKitRaster.MapKitRaster",
  "mapkit.RasterConverter",
  "mapkit.RasterConverter.ColorRampEnum",
  "mapkit.RasterConverter.ColorRampGenerator",
  "mapkit.RasterConverter.RasterConverter",
  "mapkit.RasterLoader",
  "mapkit.RasterLoader.Base",
  "mapkit.RasterLoader.RasterLoader",
  "mapkit.__version__",
  "mapkit.examples",
  "mapkit.examples.raster_converter_gdal_raster_format",
  "mapkit.examples.raster_converter_gdal_raster_format.RasterConverter",
  "mapkit.examples.raster_converter_gdal_raster_format.converter",
  "mapkit.examples.raster_converter_gdal_raster_format.engine",
  "mapkit.examples.raster_converter_gdal_raster_format.gdalFormats",
  "mapkit.examples.raster_converter_gdal_raster_format.key",
  "mapkit.examples.raster_converter_gdal_raster_format.path",
  "mapkit.examples.raster_converter_gdal_raster_format.rasterId",
  "mapkit.examples.raster_converter_gdal_raster_format.result",
  "mapkit.examples.raster_converter_gdal_raster_format.tableName",
  "mapkit.examples.raster_converter_gdal_raster_format.value",
  "mapkit.examples.raster_converter_getAsKmlClusters",
  "mapkit.examples.raster_converter_getAsKmlClusters.RasterConverter",
  "mapkit.examples.raster_converter_getAsKmlClusters.colors",
  "mapkit.examples.raster_converter_getAsKmlClusters.converter",
  "mapkit.examples.raster_converter_getAsKmlClusters.engine",
  "mapkit.examples.raster_converter_getAsKmlClusters.f",
  "mapkit.examples.raster_converter_getAsKmlClusters.kmlString",
  "mapkit.examples.raster_converter_getAsKmlClusters.name",
  "mapkit.examples.raster_converter_getAsKmlClusters.path",
  "mapkit.examples.raster_converter_getAsKmlClusters.rasterId",
  "mapkit.examples.raster_converter_getAsKmlClusters.start",
  "mapkit.examples.raster_converter_getAsKmlClusters.tableName",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.RasterConverter",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.colors",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.converter",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.engine",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.f",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.kmlString",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.name",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.path",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.rasterId",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.start",
  "mapkit.examples.raster_converter_getAsKmlClusters_large_raster.tableName",
  "mapkit.examples.raster_converter_getAsKmlGrid",
  "mapkit.examples.raster_converter_getAsKmlGrid.start",
  "mapkit.examples.raster_converter_getAsKmlGrid_large_raster",
  "mapkit.examples.raster_converter_getAsKmlGrid_large_raster.start",
  "mapkit.examples.raster_converter_getAsKmlPng",
  "mapkit.examples.raster_converter_getAsKmlPng.RasterConverter",
  "mapkit.examples.raster_converter_getAsKmlPng.archiveName",
  "mapkit.examples.raster_converter_getAsKmlPng.binaryPngString",
  "mapkit.examples.raster_converter_getAsKmlPng.colors",
  "mapkit.examples.raster_converter_getAsKmlPng.converter",
  "mapkit.examples.raster_converter_getAsKmlPng.directory",
  "mapkit.examples.raster_converter_getAsKmlPng.documentName",
  "mapkit.examples.raster_converter_getAsKmlPng.engine",
  "mapkit.examples.raster_converter_getAsKmlPng.kmlString",
  "mapkit.examples.raster_converter_getAsKmlPng.kmz",
  "mapkit.examples.raster_converter_getAsKmlPng.kmzPath",
  "mapkit.examples.raster_converter_getAsKmlPng.rasterId",
  "mapkit.examples.raster_converter_getAsKmlPng.start",
  "mapkit.examples.raster_converter_getAsKmlPng.tableName",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.RasterConverter",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.archiveName",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.binaryPngString",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.converter",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.directory",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.documentName",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.engine",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.kmlString",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.kmz",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.kmzPath",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.rasterId",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.start",
  "mapkit.examples.raster_converter_getAsKmlPng_large_raster.tableName",
  "mapkit.examples.raster_loader_load",
  "mapkit.examples.raster_loader_load.RasterLoader",
  "mapkit.examples.raster_loader_load.engine",
  "mapkit.examples.raster_loader_load.gsshapySessionMaker",
  "mapkit.examples.raster_loader_load.loader",
  "mapkit.examples.raster_loader_load.rasterPaths",
  "mapkit.examples.raster_loader_load.result",
  "mapkit.examples.raster_loader_load.session",
  "mapkit.examples.raster_loader_load.start",
  "mapkit.lookupSpatialReferenceID",
  "mapkit.sqlaspatial",
  "mapkit.sqlatypes",
  "mapkit.sqlatypes.Geometry",
  "mapkit.sqlatypes.Raster",
  "mapkit.version"
 ]
}