{
 "errors": {
  "ecco_v4_py.tile_plot": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "ecco_v4_py.__all__",
  "ecco_v4_py.calc_meridional_heat_trsp",
  "ecco_v4_py.calc_meridional_salt_trsp",
  "ecco_v4_py.calc_meridional_stf",
  "ecco_v4_py.calc_meridional_trsp",
  "ecco_v4_py.calc_meridional_trsp.HEAT_CAPACITY",
  "ecco_v4_py.calc_meridional_trsp.METERS_CUBED_TO_SVERDRUPS",
  "ecco_v4_py.calc_meridional_trsp.RHO_CONST",
  "ecco_v4_py.calc_meridional_trsp.WATTS_TO_PETAWATTS",
  "ecco_v4_py.calc_meridional_trsp._initialize_trsp_data_array",
  "ecco_v4_py.calc_meridional_trsp.calc_meridional_heat_trsp",
  "ecco_v4_py.calc_meridional_trsp.calc_meridional_salt_trsp",
  "ecco_v4_py.calc_meridional_trsp.calc_meridional_vol_trsp",
  "ecco_v4_py.calc_meridional_trsp.meridional_trsp_at_depth",
  "ecco_v4_py.calc_meridional_trsp.vector_calc",
  "ecco_v4_py.calc_meridional_vol_trsp",
  "ecco_v4_py.calc_section_heat_trsp",
  "ecco_v4_py.calc_section_salt_trsp",
  "ecco_v4_py.calc_section_stf",
  "ecco_v4_py.calc_section_trsp",
  "ecco_v4_py.calc_section_trsp.HEAT_CAPACITY",
  "ecco_v4_py.calc_section_trsp.METERS_CUBED_TO_SVERDRUPS",
  "ecco_v4_py.calc_section_trsp.RHO_CONST",
  "ecco_v4_py.calc_section_trsp.WATTS_TO_PETAWATTS",
  "ecco_v4_py.calc_section_trsp._initialize_section_trsp_data_array",
  "ecco_v4_py.calc_section_trsp._parse_section_trsp_inputs",
  "ecco_v4_py.calc_section_trsp.calc_section_heat_trsp",
  "ecco_v4_py.calc_section_trsp.calc_section_salt_trsp",
  "ecco_v4_py.calc_section_trsp.calc_section_vol_trsp",
  "ecco_v4_py.calc_section_trsp.section_trsp_at_depth",
  "ecco_v4_py.calc_section_vol_trsp",
  "ecco_v4_py.calc_stf",
  "ecco_v4_py.calc_stf.METERS_CUBED_TO_SVERDRUPS",
  "ecco_v4_py.calc_stf.calc_meridional_stf",
  "ecco_v4_py.calc_stf.calc_section_stf",
  "ecco_v4_py.create_nc_grid_files_on_native_grid_from_mds",
  "ecco_v4_py.create_nc_variable_files_on_native_grid_from_mds",
  "ecco_v4_py.create_nc_variable_files_on_regular_grid_from_mds",
  "ecco_v4_py.ecco_utils",
  "ecco_v4_py.ecco_utils.extract_yyyy_mm_dd_hh_mm_ss_from_datetime64",
  "ecco_v4_py.ecco_utils.get_llc_grid",
  "ecco_v4_py.ecco_utils.make_time_bounds_and_center_times_from_ecco_dataset",
  "ecco_v4_py.ecco_utils.make_time_bounds_from_ds64",
  "ecco_v4_py.ecco_utils.minimal_metadata",
  "ecco_v4_py.ecco_utils.months2days",
  "ecco_v4_py.extract_yyyy_mm_dd_hh_mm_ss_from_datetime64",
  "ecco_v4_py.get_available_basin_names",
  "ecco_v4_py.get_available_sections",
  "ecco_v4_py.get_basin",
  "ecco_v4_py.get_basin._append_extended_basins",
  "ecco_v4_py.get_basin.get_available_basin_names",
  "ecco_v4_py.get_basin.get_basin_mask",
  "ecco_v4_py.get_basin.package_directory",
  "ecco_v4_py.get_basin_mask",
  "ecco_v4_py.get_llc_grid",
  "ecco_v4_py.get_section_endpoints",
  "ecco_v4_py.get_section_line_masks",
  "ecco_v4_py.get_section_masks",
  "ecco_v4_py.get_section_masks._apply_rotation_matrix",
  "ecco_v4_py.get_section_masks._calc_section_along_full_arc_mask",
  "ecco_v4_py.get_section_masks._convert_latlon_to_cartesian",
  "ecco_v4_py.get_section_masks._rotate_the_grid",
  "ecco_v4_py.get_section_masks.get_available_sections",
  "ecco_v4_py.get_section_masks.get_section_endpoints",
  "ecco_v4_py.get_section_masks.get_section_line_masks",
  "ecco_v4_py.get_section_masks.scalar_calc",
  "ecco_v4_py.get_time_steps_from_mds_files",
  "ecco_v4_py.llc_array_conversion",
  "ecco_v4_py.llc_array_conversion._make_data_array",
  "ecco_v4_py.llc_array_conversion.llc_compact_to_faces",
  "ecco_v4_py.llc_array_conversion.llc_compact_to_tiles",
  "ecco_v4_py.llc_array_conversion.llc_faces_to_compact",
  "ecco_v4_py.llc_array_conversion.llc_faces_to_tiles",
  "ecco_v4_py.llc_array_conversion.llc_tiles_to_compact",
  "ecco_v4_py.llc_array_conversion.llc_tiles_to_faces",
  "ecco_v4_py.llc_array_conversion.llc_tiles_to_xda",
  "ecco_v4_py.llc_compact_to_faces",
  "ecco_v4_py.llc_compact_to_tiles",
  "ecco_v4_py.llc_faces_to_compact",
  "ecco_v4_py.llc_faces_to_tiles",
  "ecco_v4_py.llc_tiles_to_compact",
  "ecco_v4_py.llc_tiles_to_faces",
  "ecco_v4_py.llc_tiles_to_xda",
  "ecco_v4_py.load_binary_array",
  "ecco_v4_py.load_ecco_grid_nc",
  "ecco_v4_py.load_ecco_var_from_years_nc",
  "ecco_v4_py.load_ecco_vars_from_mds",
  "ecco_v4_py.make_time_bounds_and_center_times_from_ecco_dataset",
  "ecco_v4_py.make_time_bounds_from_ds64",
  "ecco_v4_py.meridional_trsp_at_depth",
  "ecco_v4_py.minimal_metadata",
  "ecco_v4_py.months2days",
  "ecco_v4_py.netcdf_product_generation",
  "ecco_v4_py.netcdf_product_generation.create_nc_grid_files_on_native_grid_from_mds",
  "ecco_v4_py.netcdf_product_generation.create_nc_variable_files_on_native_grid_from_mds",
  "ecco_v4_py.netcdf_product_generation.create_nc_variable_files_on_regular_grid_from_mds",
  "ecco_v4_py.netcdf_product_generation.get_time_steps_from_mds_files",
  "ecco_v4_py.netcdf_product_generation.update_ecco_dataset_geospatial_metadata",
  "ecco_v4_py.netcdf_product_generation.update_ecco_dataset_temporal_coverage_metadata",
  "ecco_v4_py.plot_global",
  "ecco_v4_py.plot_proj_to_latlon_grid",
  "ecco_v4_py.plot_pstereo",
  "ecco_v4_py.plot_tile",
  "ecco_v4_py.read_bin_gen",
  "ecco_v4_py.read_bin_gen.load_binary_array",
  "ecco_v4_py.read_bin_llc",
  "ecco_v4_py.read_bin_llc.load_ecco_vars_from_mds",
  "ecco_v4_py.read_bin_llc.read_llc_to_compact",
  "ecco_v4_py.read_bin_llc.read_llc_to_faces",
  "ecco_v4_py.read_bin_llc.read_llc_to_tiles",
  "ecco_v4_py.read_llc_to_compact",
  "ecco_v4_py.read_llc_to_faces",
  "ecco_v4_py.read_llc_to_tiles",
  "ecco_v4_py.recursive_load_ecco_var_from_years_nc",
  "ecco_v4_py.resample_to_latlon",
  "ecco_v4_py.resample_to_latlon.resample_to_latlon",
  "ecco_v4_py.scalar_calc",
  "ecco_v4_py.scalar_calc.get_edge_mask",
  "ecco_v4_py.scalar_calc.get_latitude_mask",
  "ecco_v4_py.section_trsp_at_depth",
  "ecco_v4_py.tile_io",
  "ecco_v4_py.tile_io.is_year",
  "ecco_v4_py.tile_io.load_ecco_grid_nc",
  "ecco_v4_py.tile_io.load_ecco_var_from_years_nc",
  "ecco_v4_py.tile_io.recursive_load_ecco_var_from_years_nc",
  "ecco_v4_py.tile_plot",
  "ecco_v4_py.tile_plot_proj",
  "ecco_v4_py.tile_plot_proj._create_projection_axis",
  "ecco_v4_py.tile_plot_proj.plot_global",
  "ecco_v4_py.tile_plot_proj.plot_proj_to_latlon_grid",
  "ecco_v4_py.tile_plot_proj.plot_pstereo",
  "ecco_v4_py.unique_color",
  "ecco_v4_py.update_ecco_dataset_geospatial_metadata",
  "ecco_v4_py.update_ecco_dataset_temporal_coverage_metadata",
  "ecco_v4_py.vector_calc",
  "ecco_v4_py.vector_calc.UEVNfromUXVY",
  "ecco_v4_py.vector_calc.get_latitude_masks"
 ]
}