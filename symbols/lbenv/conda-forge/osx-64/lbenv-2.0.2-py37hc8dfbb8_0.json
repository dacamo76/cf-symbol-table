{
 "errors": {
  "LbEnv.Banner": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "LbEnv.Info": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "LbEnv.Banner",
  "LbEnv.Bootstrap",
  "LbEnv.Bootstrap.bin_path",
  "LbEnv.Bootstrap.collect_roots",
  "LbEnv.Bootstrap.main",
  "LbEnv.Bootstrap.search_path",
  "LbEnv.Info",
  "LbEnv.ProjectEnv",
  "LbEnv.ProjectEnv.EnvSearchPathEntry",
  "LbEnv.ProjectEnv.Error",
  "LbEnv.ProjectEnv.LHCbDirac",
  "LbEnv.ProjectEnv.LHCbDirac.ENV_SCRIPTS",
  "LbEnv.ProjectEnv.LHCbDirac.LHCbDiracEnvError",
  "LbEnv.ProjectEnv.LHCbDirac.envchanges",
  "LbEnv.ProjectEnv.LHCbDirac.envdict",
  "LbEnv.ProjectEnv.LHCbDirac.getLHCbDiracEnv",
  "LbEnv.ProjectEnv.LHCbDirac.listenv",
  "LbEnv.ProjectEnv.SearchPath",
  "LbEnv.ProjectEnv._CMTPROJECTPATH_FMTS",
  "LbEnv.ProjectEnv._CMTPROJECTPATH_FMT_SH",
  "LbEnv.ProjectEnv.__author__",
  "LbEnv.ProjectEnv._cmakeStr",
  "LbEnv.ProjectEnv._defaultPath",
  "LbEnv.ProjectEnv._toEntry",
  "LbEnv.ProjectEnv.compatibility",
  "LbEnv.ProjectEnv.compatibility.ALWAYS",
  "LbEnv.ProjectEnv.compatibility.Comp",
  "LbEnv.ProjectEnv.compatibility.ExtendedLogger",
  "LbEnv.ProjectEnv.compatibility.FindLCGForROOT",
  "LbEnv.ProjectEnv.compatibility.FindProjectVersions",
  "LbEnv.ProjectEnv.compatibility.GetNightlyCMTPROJECTPATH",
  "LbEnv.ProjectEnv.compatibility.LatestVersion",
  "LbEnv.ProjectEnv.compatibility.ProjectInfo",
  "LbEnv.ProjectEnv.compatibility.SetupProject",
  "LbEnv.ProjectEnv.compatibility.ShellParser",
  "LbEnv.ProjectEnv.compatibility.SortVersionTuples",
  "LbEnv.ProjectEnv.compatibility.SortVersions",
  "LbEnv.ProjectEnv.compatibility.StripPath",
  "LbEnv.ProjectEnv.compatibility.TempDir",
  "LbEnv.ProjectEnv.compatibility.TemporaryEnvironment",
  "LbEnv.ProjectEnv.compatibility.VERBOSE",
  "LbEnv.ProjectEnv.compatibility.VersionMatch",
  "LbEnv.ProjectEnv.compatibility._GetVersionTuple",
  "LbEnv.ProjectEnv.compatibility.__author__",
  "LbEnv.ProjectEnv.compatibility.__version__",
  "LbEnv.ProjectEnv.compatibility._defaultSearchPath",
  "LbEnv.ProjectEnv.compatibility._extract_version",
  "LbEnv.ProjectEnv.compatibility._fixKey",
  "LbEnv.ProjectEnv.compatibility._get_cmt_user_context",
  "LbEnv.ProjectEnv.compatibility._prepare_cmt_cmd",
  "LbEnv.ProjectEnv.compatibility._sync_dicts",
  "LbEnv.ProjectEnv.compatibility.auto_override_projects",
  "LbEnv.ProjectEnv.compatibility.batParser",
  "LbEnv.ProjectEnv.compatibility.cmt",
  "LbEnv.ProjectEnv.compatibility.cshParser",
  "LbEnv.ProjectEnv.compatibility.days",
  "LbEnv.ProjectEnv.compatibility.expandAllVars",
  "LbEnv.ProjectEnv.compatibility.fixProjectCase",
  "LbEnv.ProjectEnv.compatibility.getNightlyCMTPROJECTPATH",
  "LbEnv.ProjectEnv.compatibility.getOldEnvironment",
  "LbEnv.ProjectEnv.compatibility.isProject",
  "LbEnv.ProjectEnv.compatibility.lcg_style_version",
  "LbEnv.ProjectEnv.compatibility.lhcb_style_version",
  "LbEnv.ProjectEnv.compatibility.log",
  "LbEnv.ProjectEnv.compatibility.makeProjectInfo",
  "LbEnv.ProjectEnv.compatibility.nightly_bases",
  "LbEnv.ProjectEnv.compatibility.nocontainer_project_names",
  "LbEnv.ProjectEnv.compatibility.removeall",
  "LbEnv.ProjectEnv.compatibility.shParser",
  "LbEnv.ProjectEnv.compatibility.smartExpandVarsPath",
  "LbEnv.ProjectEnv.compatibility.uniq",
  "LbEnv.ProjectEnv.lookup",
  "LbEnv.ProjectEnv.lookup.DEFAULT_VERSION",
  "LbEnv.ProjectEnv.lookup.EXTERNAL_PROJECTS",
  "LbEnv.ProjectEnv.lookup.Error",
  "LbEnv.ProjectEnv.lookup.InvalidNightlySlotError",
  "LbEnv.ProjectEnv.lookup.LCGInfoName",
  "LbEnv.ProjectEnv.lookup.MissingDataPackageError",
  "LbEnv.ProjectEnv.lookup.MissingManifestError",
  "LbEnv.ProjectEnv.lookup.MissingProjectError",
  "LbEnv.ProjectEnv.lookup.NotFoundError",
  "LbEnv.ProjectEnv.lookup.PREFERRED_PLATFORM",
  "LbEnv.ProjectEnv.lookup._PLATFORM_ID_RE",
  "LbEnv.ProjectEnv.lookup._findManifest",
  "LbEnv.ProjectEnv.lookup.expandVersionAlias",
  "LbEnv.ProjectEnv.lookup.findDataPackage",
  "LbEnv.ProjectEnv.lookup.findFile",
  "LbEnv.ProjectEnv.lookup.findLCG",
  "LbEnv.ProjectEnv.lookup.findLCGForExt",
  "LbEnv.ProjectEnv.lookup.findNightlyDir",
  "LbEnv.ProjectEnv.lookup.findProject",
  "LbEnv.ProjectEnv.lookup.getEnvXmlPath",
  "LbEnv.ProjectEnv.lookup.getHepToolsInfo",
  "LbEnv.ProjectEnv.lookup.getLCGRelocation",
  "LbEnv.ProjectEnv.lookup.getLHCbGrid",
  "LbEnv.ProjectEnv.lookup.getProjectNameVersion",
  "LbEnv.ProjectEnv.lookup.isPlatformId",
  "LbEnv.ProjectEnv.lookup.listExtPlatforms",
  "LbEnv.ProjectEnv.lookup.listExtVersions",
  "LbEnv.ProjectEnv.lookup.listPlatforms",
  "LbEnv.ProjectEnv.lookup.listVersions",
  "LbEnv.ProjectEnv.lookup.log",
  "LbEnv.ProjectEnv.lookup.parseManifest",
  "LbEnv.ProjectEnv.lookup.path",
  "LbEnv.ProjectEnv.lookup.platform_sort_key",
  "LbEnv.ProjectEnv.lookup.versionKey",
  "LbEnv.ProjectEnv.lookup.walkProjectDeps",
  "LbEnv.ProjectEnv.options",
  "LbEnv.ProjectEnv.options.EnvSearchPathEntry",
  "LbEnv.ProjectEnv.options.LHCbDevPathEntry",
  "LbEnv.ProjectEnv.options.NightlyPathEntry",
  "LbEnv.ProjectEnv.options.SearchPath",
  "LbEnv.ProjectEnv.options.__author__",
  "LbEnv.ProjectEnv.options.addOutputLevel",
  "LbEnv.ProjectEnv.options.addPlatform",
  "LbEnv.ProjectEnv.options.addSearchPath",
  "LbEnv.ProjectEnv.options.checkPlatform",
  "LbEnv.ProjectEnv.options_old",
  "LbEnv.ProjectEnv.options_old.LHCbDevPathEntry",
  "LbEnv.ProjectEnv.options_old.NightlyPathEntry",
  "LbEnv.ProjectEnv.options_old.SearchPath",
  "LbEnv.ProjectEnv.options_old.__author__",
  "LbEnv.ProjectEnv.options_old.addListing",
  "LbEnv.ProjectEnv.options_old.addOutputLevel",
  "LbEnv.ProjectEnv.options_old.addPlatform",
  "LbEnv.ProjectEnv.options_old.addSearchPath",
  "LbEnv.ProjectEnv.path",
  "LbEnv.ProjectEnv.profiling",
  "LbEnv.ProjectEnv.profiling.__author__",
  "LbEnv.ProjectEnv.profiling.run",
  "LbEnv.ProjectEnv.script",
  "LbEnv.ProjectEnv.script.DEFAULT_PATH",
  "LbEnv.ProjectEnv.script.DEFAULT_VERSION",
  "LbEnv.ProjectEnv.script.EXTERNAL_PROJECTS",
  "LbEnv.ProjectEnv.script.HOST_INFO",
  "LbEnv.ProjectEnv.script.HOST_PLATFORM",
  "LbEnv.ProjectEnv.script.InvalidNightlySlotError",
  "LbEnv.ProjectEnv.script.LCGInfoName",
  "LbEnv.ProjectEnv.script.LOCAL_NIGHTLY_HELP",
  "LbEnv.ProjectEnv.script.LbRun",
  "LbEnv.ProjectEnv.script.NotFoundError",
  "LbEnv.ProjectEnv.script.SUPPORTED_CONTAINERS",
  "LbEnv.ProjectEnv.script.__version__",
  "LbEnv.ProjectEnv.script.auto_override_projects",
  "LbEnv.ProjectEnv.script.decodePkg",
  "LbEnv.ProjectEnv.script.expandVersionAlias",
  "LbEnv.ProjectEnv.script.findDataPackage",
  "LbEnv.ProjectEnv.script.findLCGForExt",
  "LbEnv.ProjectEnv.script.findProject",
  "LbEnv.ProjectEnv.script.fixProjectCase",
  "LbEnv.ProjectEnv.script.getEnvXmlPath",
  "LbEnv.ProjectEnv.script.getHepToolsInfo",
  "LbEnv.ProjectEnv.script.getLCGRelocation",
  "LbEnv.ProjectEnv.script.getProjectNameVersion",
  "LbEnv.ProjectEnv.script.isValidVersion",
  "LbEnv.ProjectEnv.script.listPlatforms",
  "LbEnv.ProjectEnv.script.listVersions",
  "LbEnv.ProjectEnv.script.localNightlyHelp",
  "LbEnv.ProjectEnv.script.main",
  "LbEnv.ProjectEnv.script.projectExtraPath",
  "LbEnv.ProjectEnv.script.run",
  "LbEnv.ProjectEnv.version",
  "LbEnv.ProjectEnv.version.DEFAULT_VERSION",
  "LbEnv.ProjectEnv.version.LCGInfoName",
  "LbEnv.ProjectEnv.version.expandVersionAlias",
  "LbEnv.ProjectEnv.version.isValidVersion",
  "LbEnv.ProjectEnv.version.log",
  "LbEnv.ProjectEnv.version.versionKey",
  "LbEnv.Utils",
  "LbEnv.Utils.Completion",
  "LbEnv.Utils.Completion._actions",
  "LbEnv.Utils.Completion._get_names",
  "LbEnv.Utils.Completion.action",
  "LbEnv.Utils.Completion.list_compatible_platforms",
  "LbEnv.Utils.Completion.list_nightly_slots",
  "LbEnv.Utils.Completion.list_platforms",
  "LbEnv.Utils.Completion.list_projects",
  "LbEnv.Utils.Completion.main",
  "LbEnv.Utils.Temporary",
  "LbEnv.Utils.Temporary.TempDir",
  "LbEnv.Utils.Temporary.TempFile",
  "LbEnv.Utils.Temporary.TemporaryDirectory",
  "LbEnv.__main__",
  "LbEnv.__main__.main",
  "LbEnv.__version__",
  "LbEnv.fixProjectCase",
  "LbEnv.getPackageNames",
  "LbEnv.getProjectNames",
  "LbEnv.resource_string",
  "LbEnv.which"
 ]
}