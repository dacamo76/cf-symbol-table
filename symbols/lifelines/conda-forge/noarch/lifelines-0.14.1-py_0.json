{
 "errors": {
  "lifelines.statistics": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "lifelines.AalenAdditiveFitter",
  "lifelines.BreslowFlemingHarringtonFitter",
  "lifelines.CoxPHFitter",
  "lifelines.CoxTimeVaryingFitter",
  "lifelines.ExponentialFitter",
  "lifelines.KaplanMeierFitter",
  "lifelines.NelsonAalenFitter",
  "lifelines.WeibullFitter",
  "lifelines.__all__",
  "lifelines.__version__",
  "lifelines.datasets",
  "lifelines.datasets.dfcv",
  "lifelines.datasets.dfcv_dataset",
  "lifelines.datasets.dfcv_dataset.add_covariate_to_timeline",
  "lifelines.datasets.dfcv_dataset.cv",
  "lifelines.datasets.dfcv_dataset.df",
  "lifelines.datasets.dfcv_dataset.dfcv",
  "lifelines.datasets.dfcv_dataset.to_long_format",
  "lifelines.datasets.load_canadian_senators",
  "lifelines.datasets.load_dataset",
  "lifelines.datasets.load_dd",
  "lifelines.datasets.load_dfcv",
  "lifelines.datasets.load_g3",
  "lifelines.datasets.load_gbsg2",
  "lifelines.datasets.load_holly_molly_polly",
  "lifelines.datasets.load_kidney_transplant",
  "lifelines.datasets.load_larynx",
  "lifelines.datasets.load_lcd",
  "lifelines.datasets.load_leukemia",
  "lifelines.datasets.load_lung",
  "lifelines.datasets.load_panel_test",
  "lifelines.datasets.load_psychiatric_patients",
  "lifelines.datasets.load_recur",
  "lifelines.datasets.load_regression_dataset",
  "lifelines.datasets.load_rossi",
  "lifelines.datasets.load_stanford_heart_transplants",
  "lifelines.datasets.load_static_test",
  "lifelines.datasets.load_waltons",
  "lifelines.estimation",
  "lifelines.estimation.AalenAdditiveFitter",
  "lifelines.estimation.BaseFitter",
  "lifelines.estimation.BreslowFlemingHarringtonFitter",
  "lifelines.estimation.CoxPHFitter",
  "lifelines.estimation.CoxTimeVaryingFitter",
  "lifelines.estimation.ExponentialFitter",
  "lifelines.estimation.KaplanMeierFitter",
  "lifelines.estimation.NelsonAalenFitter",
  "lifelines.estimation.WeibullFitter",
  "lifelines.fitters",
  "lifelines.fitters.BaseFitter",
  "lifelines.fitters.UnivariateFitter",
  "lifelines.fitters.aalen_additive_fitter",
  "lifelines.fitters.aalen_additive_fitter.AalenAdditiveFitter",
  "lifelines.fitters.aalen_additive_fitter.BaseFitter",
  "lifelines.fitters.aalen_additive_fitter._get_index",
  "lifelines.fitters.aalen_additive_fitter.check_nans",
  "lifelines.fitters.aalen_additive_fitter.concordance_index",
  "lifelines.fitters.aalen_additive_fitter.epanechnikov_kernel",
  "lifelines.fitters.aalen_additive_fitter.fill_between_steps",
  "lifelines.fitters.aalen_additive_fitter.inv_normal_cdf",
  "lifelines.fitters.aalen_additive_fitter.pass_for_numeric_dtypes_or_raise",
  "lifelines.fitters.aalen_additive_fitter.progress_bar",
  "lifelines.fitters.aalen_additive_fitter.qth_survival_times",
  "lifelines.fitters.aalen_additive_fitter.ridge_regression",
  "lifelines.fitters.breslow_fleming_harrington_fitter",
  "lifelines.fitters.breslow_fleming_harrington_fitter.BreslowFlemingHarringtonFitter",
  "lifelines.fitters.breslow_fleming_harrington_fitter.NelsonAalenFitter",
  "lifelines.fitters.breslow_fleming_harrington_fitter.UnivariateFitter",
  "lifelines.fitters.breslow_fleming_harrington_fitter.median_survival_times",
  "lifelines.fitters.cox_time_varying_fitter",
  "lifelines.fitters.cox_time_varying_fitter.BaseFitter",
  "lifelines.fitters.cox_time_varying_fitter.ConvergenceWarning",
  "lifelines.fitters.cox_time_varying_fitter.CoxTimeVaryingFitter",
  "lifelines.fitters.cox_time_varying_fitter.StepSizer",
  "lifelines.fitters.cox_time_varying_fitter.check_complete_separation_low_variance",
  "lifelines.fitters.cox_time_varying_fitter.check_for_overlapping_intervals",
  "lifelines.fitters.cox_time_varying_fitter.check_low_var",
  "lifelines.fitters.cox_time_varying_fitter.inv_normal_cdf",
  "lifelines.fitters.cox_time_varying_fitter.normalize",
  "lifelines.fitters.cox_time_varying_fitter.pass_for_numeric_dtypes_or_raise",
  "lifelines.fitters.cox_time_varying_fitter.significance_code",
  "lifelines.fitters.coxph_fitter",
  "lifelines.fitters.coxph_fitter.BaseFitter",
  "lifelines.fitters.coxph_fitter.ConvergenceWarning",
  "lifelines.fitters.coxph_fitter.CoxPHFitter",
  "lifelines.fitters.coxph_fitter.StatError",
  "lifelines.fitters.coxph_fitter.StepSizer",
  "lifelines.fitters.coxph_fitter._get_index",
  "lifelines.fitters.coxph_fitter.check_complete_separation",
  "lifelines.fitters.coxph_fitter.check_low_var",
  "lifelines.fitters.coxph_fitter.check_nans",
  "lifelines.fitters.coxph_fitter.coalesce",
  "lifelines.fitters.coxph_fitter.concordance_index",
  "lifelines.fitters.coxph_fitter.inv_normal_cdf",
  "lifelines.fitters.coxph_fitter.normalize",
  "lifelines.fitters.coxph_fitter.pass_for_numeric_dtypes_or_raise",
  "lifelines.fitters.coxph_fitter.qth_survival_times",
  "lifelines.fitters.coxph_fitter.significance_code",
  "lifelines.fitters.coxph_fitter.survival_table_from_events",
  "lifelines.fitters.exponential_fitter",
  "lifelines.fitters.exponential_fitter.ExponentialFitter",
  "lifelines.fitters.exponential_fitter.UnivariateFitter",
  "lifelines.fitters.exponential_fitter.check_nans",
  "lifelines.fitters.exponential_fitter.inv_normal_cdf",
  "lifelines.fitters.kaplan_meier_fitter",
  "lifelines.fitters.kaplan_meier_fitter.KaplanMeierFitter",
  "lifelines.fitters.kaplan_meier_fitter.StatError",
  "lifelines.fitters.kaplan_meier_fitter.UnivariateFitter",
  "lifelines.fitters.kaplan_meier_fitter._additive_estimate",
  "lifelines.fitters.kaplan_meier_fitter._preprocess_inputs",
  "lifelines.fitters.kaplan_meier_fitter.check_nans",
  "lifelines.fitters.kaplan_meier_fitter.inv_normal_cdf",
  "lifelines.fitters.kaplan_meier_fitter.median_survival_times",
  "lifelines.fitters.kaplan_meier_fitter.plot_loglogs",
  "lifelines.fitters.nelson_aalen_fitter",
  "lifelines.fitters.nelson_aalen_fitter.NelsonAalenFitter",
  "lifelines.fitters.nelson_aalen_fitter.UnivariateFitter",
  "lifelines.fitters.nelson_aalen_fitter._additive_estimate",
  "lifelines.fitters.nelson_aalen_fitter._preprocess_inputs",
  "lifelines.fitters.nelson_aalen_fitter.check_nans",
  "lifelines.fitters.nelson_aalen_fitter.epanechnikov_kernel",
  "lifelines.fitters.nelson_aalen_fitter.inv_normal_cdf",
  "lifelines.fitters.plot_estimate",
  "lifelines.fitters.qth_survival_times",
  "lifelines.fitters.weibull_fitter",
  "lifelines.fitters.weibull_fitter.UnivariateFitter",
  "lifelines.fitters.weibull_fitter.WeibullFitter",
  "lifelines.fitters.weibull_fitter._d_lambda_d_lambda_",
  "lifelines.fitters.weibull_fitter._d_rho_d_lambda_",
  "lifelines.fitters.weibull_fitter._d_rho_d_rho",
  "lifelines.fitters.weibull_fitter._lambda_gradient",
  "lifelines.fitters.weibull_fitter._negative_log_likelihood",
  "lifelines.fitters.weibull_fitter._rho_gradient",
  "lifelines.fitters.weibull_fitter.check_nans",
  "lifelines.fitters.weibull_fitter.inv_normal_cdf",
  "lifelines.generate_datasets",
  "lifelines.generate_datasets.FUNCS",
  "lifelines.generate_datasets.coeff_func",
  "lifelines.generate_datasets.constant_",
  "lifelines.generate_datasets.construct_survival_curves",
  "lifelines.generate_datasets.cumulative_integral",
  "lifelines.generate_datasets.exp_comp_",
  "lifelines.generate_datasets.exponential_survival_data",
  "lifelines.generate_datasets.generate_covariates",
  "lifelines.generate_datasets.generate_hazard_rates",
  "lifelines.generate_datasets.generate_observational_matrix",
  "lifelines.generate_datasets.generate_random_lifetimes",
  "lifelines.generate_datasets.inverseSq_",
  "lifelines.generate_datasets.log_",
  "lifelines.generate_datasets.periodic_",
  "lifelines.generate_datasets.right_censor_lifetimes",
  "lifelines.generate_datasets.time_varying_coefficients",
  "lifelines.plotting",
  "lifelines.plotting.add_at_risk_counts",
  "lifelines.plotting.create_dataframe_slicer",
  "lifelines.plotting.fill_between_steps",
  "lifelines.plotting.is_latex_enabled",
  "lifelines.plotting.move_spines",
  "lifelines.plotting.plot_estimate",
  "lifelines.plotting.plot_lifetimes",
  "lifelines.plotting.plot_loglogs",
  "lifelines.plotting.remove_spines",
  "lifelines.plotting.remove_ticks",
  "lifelines.plotting.set_kwargs_ax",
  "lifelines.plotting.set_kwargs_color",
  "lifelines.plotting.set_kwargs_drawstyle",
  "lifelines.statistics",
  "lifelines.utils",
  "lifelines.utils.ConvergenceWarning",
  "lifelines.utils.StatError",
  "lifelines.utils.StepSizer",
  "lifelines.utils._BTree",
  "lifelines.utils.__all__",
  "lifelines.utils._additive_estimate",
  "lifelines.utils._concordance_index",
  "lifelines.utils._get_index",
  "lifelines.utils._group_event_table_by_intervals",
  "lifelines.utils._low_var",
  "lifelines.utils._naive_concordance_index",
  "lifelines.utils._preprocess_inputs",
  "lifelines.utils._smart_search",
  "lifelines.utils.add_covariate_to_timeline",
  "lifelines.utils.check_complete_separation",
  "lifelines.utils.check_complete_separation_low_variance",
  "lifelines.utils.check_for_overlapping_intervals",
  "lifelines.utils.check_low_var",
  "lifelines.utils.check_nans",
  "lifelines.utils.coalesce",
  "lifelines.utils.concordance_index",
  "lifelines.utils.covariates_from_event_matrix",
  "lifelines.utils.datetimes_to_durations",
  "lifelines.utils.epanechnikov_kernel",
  "lifelines.utils.group_survival_table_from_events",
  "lifelines.utils.inv_normal_cdf",
  "lifelines.utils.k_fold_cross_validation",
  "lifelines.utils.l1_log_loss",
  "lifelines.utils.l2_log_loss",
  "lifelines.utils.median_survival_times",
  "lifelines.utils.normalize",
  "lifelines.utils.pass_for_numeric_dtypes_or_raise",
  "lifelines.utils.progress_bar",
  "lifelines.utils.progress_bar.ProgressBar",
  "lifelines.utils.progress_bar.TextProgressBar",
  "lifelines.utils.progress_bar.__all__",
  "lifelines.utils.progress_bar.consoleprint",
  "lifelines.utils.progress_bar.ipythonprint",
  "lifelines.utils.progress_bar.progress_bar",
  "lifelines.utils.progress_bar.replace_at",
  "lifelines.utils.progress_bar.run_from_ipython",
  "lifelines.utils.qth_survival_time",
  "lifelines.utils.qth_survival_times",
  "lifelines.utils.ridge_regression",
  "lifelines.utils.significance_code",
  "lifelines.utils.survival_events_from_table",
  "lifelines.utils.survival_table_from_events",
  "lifelines.utils.to_long_format",
  "lifelines.utils.unnormalize",
  "lifelines.version",
  "lifelines.version.__version__"
 ]
}