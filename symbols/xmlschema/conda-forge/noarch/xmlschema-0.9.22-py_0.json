{
 "errors": {
  "xmlschema.regex": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for obj in items:         if isinstance(obj, (list, tuple, set)):             facets.update([(k, None) for k in obj if k in keys])         elif etree_iselement(obj):             if obj.tag in keys:                 if obj.tag == XSD_PATTERN_TAG:                     facets[obj.tag] = XsdPatternsFacet(base_type, obj, schema)                 else:                     facets[obj.tag] = XsdSingleFacet(base_type, obj, schema)         elif callable(obj):             if None in facets:                 raise XMLSchemaValueError(\"Almost one callable required!!\")             facets[None] = obj         else:             raise XMLSchemaValueError(\"Wrong type for item %r\" % obj)@449,4>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for item in XSD_BUILTIN_PRIMITIVE_TYPES + XSD_BUILTIN_OTHER_ATOMIC_TYPES:         if isinstance(item, (tuple, list)):             name = item[0]             elem, schema = xsd_types[name]             if schema is not meta_schema:                 raise XMLSchemaValueError(\"loaded entry schema doesn't match meta_schema!\")              try:                 base_type = xsd_types[item[2]]             except IndexError:                 xsd_types[name] = xsd_class(elem, schema, *item)             else:                 try:                     facets = xsd_build_facets(item[3], base_type, meta_schema, XSD_FACETS)                 except IndexError:                     xsd_types[name] = xsd_class(elem, schema, name, item[1], base_type, *item[3:])                 else:                     xsd_types[name] = xsd_class(elem, schema, name, item[1], base_type, facets, *item[4:])          elif isinstance(item, dict):             item = item.copy()             elem, schema = xsd_types[item['name']]             if schema is not meta_schema:                 raise XMLSchemaValueError(\"loaded entry schema doesn't match meta_schema!\")              if item.get('base_type'):                 base_type = item.get('base_type')                 item['base_type'] = xsd_types[base_type]             elif item.get('item_type'):                 base_type = item.get('item_type')                 item['item_type'] = xsd_types[base_type]             else:                 base_type = None             if 'facets' in item:                 item['facets'] = xsd_build_facets(item['facets'], base_type, schema, XSD_FACETS)             xsd_types[item['name']] = xsd_class(elem, schema, **item)         else:             raise XMLSchemaValueError(\"Require a sequence of list/tuples or dictionaries\")@539,4>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 110, in wrapper",
    "    return dct[key]",
    "KeyError: ((), frozenset())",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 110, in wrapper",
    "    return dct[key]",
    "KeyError: ((), frozenset())",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 110, in wrapper",
    "    return dct[key]",
    "KeyError: ((), frozenset())",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/types.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 134, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 116, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 546, in infer",
    "    return self.get_executed_param_name().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 731, in tree_name_to_values",
    "    cn.infer(),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 375, in infer",
    "    return self.context.infer_node(self.node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 731, in tree_name_to_values",
    "    cn.infer(),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 375, in infer",
    "    return self.context.infer_node(self.node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 478, in infer_or_test",
    "    context.infer_node(right))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 531, in _infer_comparison",
    "    for left in left_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 532, in <genexpr>",
    "    for right in right_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 596, in _infer_comparison_part",
    "    if l_is_num and r_is_num or is_string(left) and is_string(right):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 124, in is_string",
    "    return value.is_compiled() and isinstance(value.get_safe_value(default=None), str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 332, in __getattr__",
    "    return getattr(self._wrapped_value, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 67, in wrapper",
    "    return func(*args, **kwds)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 112, in wrapper",
    "    result = method(self, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 340, in _wrapped_value",
    "    return self._get_wrapped_value()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 203, in _get_wrapped_value",
    "    TupleGenericManager(self._cached_generics())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 195, in _cached_generics",
    "    return self._get_generics()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 336, in _get_generics",
    "    return super()._get_generics()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 191, in _get_generics",
    "    return (self.merge_types_of_iterate().py__class__(),)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in py__class__",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in <genexpr>",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 332, in __getattr__",
    "    return getattr(self._wrapped_value, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 67, in wrapper",
    "    return func(*args, **kwds)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 112, in wrapper",
    "    result = method(self, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 340, in _wrapped_value",
    "    return self._get_wrapped_value()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 203, in _get_wrapped_value",
    "    TupleGenericManager(self._cached_generics())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 195, in _cached_generics",
    "    return self._get_generics()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 180, in _get_generics",
    "    return tuple(c_set.py__class__() for c_set in self.get_mapping_item_values())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 180, in <genexpr>",
    "    return tuple(c_set.py__class__() for c_set in self.get_mapping_item_values())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in py__class__",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in <genexpr>",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 332, in __getattr__",
    "    return getattr(self._wrapped_value, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 67, in wrapper",
    "    return func(*args, **kwds)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 112, in wrapper",
    "    result = method(self, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 340, in _wrapped_value",
    "    return self._get_wrapped_value()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 203, in _get_wrapped_value",
    "    TupleGenericManager(self._cached_generics())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 195, in _cached_generics",
    "    return self._get_generics()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 335, in _get_generics",
    "    return tuple(x.infer().py__class__() for x in self.py__iter__())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 335, in <genexpr>",
    "    return tuple(x.infer().py__class__() for x in self.py__iter__())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in py__class__",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in <genexpr>",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 162, in py__class__",
    "    c, = values_from_qualified_names(self.inference_state, 'types', 'FunctionType')",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 191, in values_from_qualified_names",
    "    return inference_state.import_module(names[:-1]).py__getattribute__(names[-1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "xmlschema.AbderaConverter",
  "xmlschema.BadgerFishConverter",
  "xmlschema.JsonMLConverter",
  "xmlschema.ParkerConverter",
  "xmlschema.XMLSchema",
  "xmlschema.XMLSchemaBase",
  "xmlschema.XMLSchemaChildrenValidationError",
  "xmlschema.XMLSchemaConverter",
  "xmlschema.XMLSchemaDecodeError",
  "xmlschema.XMLSchemaEncodeError",
  "xmlschema.XMLSchemaException",
  "xmlschema.XMLSchemaNotBuiltError",
  "xmlschema.XMLSchemaParseError",
  "xmlschema.XMLSchemaRegexError",
  "xmlschema.XMLSchemaURLError",
  "xmlschema.XMLSchemaValidationError",
  "xmlschema.XMLSchemaXPathError",
  "xmlschema.XMLSchema_v1_0",
  "xmlschema.XsdGlobals",
  "xmlschema.__author__",
  "xmlschema.__contact__",
  "xmlschema.__copyright__",
  "xmlschema.__license__",
  "xmlschema.__status__",
  "xmlschema.__version__",
  "xmlschema.codepoints",
  "xmlschema.codepoints.CHARACTER_GROUP_ESCAPED",
  "xmlschema.codepoints.UCS4_MAXUNICODE",
  "xmlschema.codepoints.UNICODE_BLOCKS",
  "xmlschema.codepoints.UNICODE_CATEGORIES",
  "xmlschema.codepoints.UnicodeSubset",
  "xmlschema.codepoints.code_point_repr",
  "xmlschema.codepoints.get_unicode_categories",
  "xmlschema.codepoints.iter_code_points",
  "xmlschema.codepoints.parse_character_group",
  "xmlschema.codepoints.save_unicode_categories",
  "xmlschema.codepoints.unicode_category_sequencer",
  "xmlschema.compat",
  "xmlschema.compat.PY2",
  "xmlschema.compat.PY3",
  "xmlschema.compat.long_type",
  "xmlschema.compat.unicode_chr",
  "xmlschema.compat.unicode_type",
  "xmlschema.converters",
  "xmlschema.converters.AbderaConverter",
  "xmlschema.converters.BadgerFishConverter",
  "xmlschema.converters.ElementData",
  "xmlschema.converters.JsonMLConverter",
  "xmlschema.converters.ParkerConverter",
  "xmlschema.converters.XMLSchemaConverter",
  "xmlschema.converters.XSD_VALIDATION_MODES",
  "xmlschema.create_validator",
  "xmlschema.etree",
  "xmlschema.etree.etree_child_index",
  "xmlschema.etree.etree_element",
  "xmlschema.etree.etree_fromstring",
  "xmlschema.etree.etree_get_namespaces",
  "xmlschema.etree.etree_getpath",
  "xmlschema.etree.etree_iselement",
  "xmlschema.etree.etree_iterparse",
  "xmlschema.etree.etree_iterpath",
  "xmlschema.etree.etree_parse_error",
  "xmlschema.etree.etree_register_namespace",
  "xmlschema.etree.etree_tostring",
  "xmlschema.etree_get_namespaces",
  "xmlschema.exceptions",
  "xmlschema.exceptions.XMLSchemaAttributeError",
  "xmlschema.exceptions.XMLSchemaException",
  "xmlschema.exceptions.XMLSchemaKeyError",
  "xmlschema.exceptions.XMLSchemaOSError",
  "xmlschema.exceptions.XMLSchemaRegexError",
  "xmlschema.exceptions.XMLSchemaSyntaxError",
  "xmlschema.exceptions.XMLSchemaTypeError",
  "xmlschema.exceptions.XMLSchemaURLError",
  "xmlschema.exceptions.XMLSchemaValueError",
  "xmlschema.exceptions.XMLSchemaXPathError",
  "xmlschema.fetch_resource",
  "xmlschema.fetch_schema",
  "xmlschema.load_xml_resource",
  "xmlschema.namespaces",
  "xmlschema.namespaces.HFP_NAMESPACE_PATH",
  "xmlschema.namespaces.NamespaceMapper",
  "xmlschema.namespaces.NamespaceResourcesMap",
  "xmlschema.namespaces.NamespaceView",
  "xmlschema.namespaces.URIDict",
  "xmlschema.namespaces.VC_NAMESPACE_PATH",
  "xmlschema.namespaces.XHTML_DATATYPES_NAMESPACE_PATH",
  "xmlschema.namespaces.XHTML_NAMESPACE_PATH",
  "xmlschema.namespaces.XLINK_NAMESPACE_PATH",
  "xmlschema.namespaces.XML_NAMESPACE_PATH",
  "xmlschema.namespaces.XSD_NAMESPACE_PATH",
  "xmlschema.namespaces.XSI_NAMESPACE_PATH",
  "xmlschema.namespaces.XSLT_NAMESPACE_PATH",
  "xmlschema.namespaces._RE_MATCH_NAMESPACE",
  "xmlschema.namespaces.get_namespace",
  "xmlschema.normalize_url",
  "xmlschema.qnames",
  "xmlschema.qnames.XML_BASE",
  "xmlschema.qnames.XML_ID",
  "xmlschema.qnames.XML_LANG",
  "xmlschema.qnames.XML_SPACE",
  "xmlschema.qnames.XML_SPECIAL_ATTRS",
  "xmlschema.qnames.XSD_ALL_TAG",
  "xmlschema.qnames.XSD_ALTERNATIVE_TAG",
  "xmlschema.qnames.XSD_ANNOTATION_TAG",
  "xmlschema.qnames.XSD_ANY_ATOMIC_TYPE",
  "xmlschema.qnames.XSD_ANY_ATTRIBUTE_TAG",
  "xmlschema.qnames.XSD_ANY_SIMPLE_TYPE",
  "xmlschema.qnames.XSD_ANY_TAG",
  "xmlschema.qnames.XSD_ANY_TYPE",
  "xmlschema.qnames.XSD_APPINFO_TAG",
  "xmlschema.qnames.XSD_ASSERTION_TAG",
  "xmlschema.qnames.XSD_ASSERT_TAG",
  "xmlschema.qnames.XSD_ATTRIBUTE_GROUP_TAG",
  "xmlschema.qnames.XSD_ATTRIBUTE_TAG",
  "xmlschema.qnames.XSD_CHOICE_TAG",
  "xmlschema.qnames.XSD_COMPLEX_CONTENT_TAG",
  "xmlschema.qnames.XSD_COMPLEX_TYPE_TAG",
  "xmlschema.qnames.XSD_DOCUMENTATION_TAG",
  "xmlschema.qnames.XSD_ELEMENT_TAG",
  "xmlschema.qnames.XSD_ENUMERATION_TAG",
  "xmlschema.qnames.XSD_EXPLICIT_TIMEZONE_TAG",
  "xmlschema.qnames.XSD_EXTENSION_TAG",
  "xmlschema.qnames.XSD_FIELD_TAG",
  "xmlschema.qnames.XSD_FRACTION_DIGITS_TAG",
  "xmlschema.qnames.XSD_GROUP_TAG",
  "xmlschema.qnames.XSD_IMPORT_TAG",
  "xmlschema.qnames.XSD_INCLUDE_TAG",
  "xmlschema.qnames.XSD_KEYREF_TAG",
  "xmlschema.qnames.XSD_KEY_TAG",
  "xmlschema.qnames.XSD_LENGTH_TAG",
  "xmlschema.qnames.XSD_LIST_TAG",
  "xmlschema.qnames.XSD_MAX_EXCLUSIVE_TAG",
  "xmlschema.qnames.XSD_MAX_INCLUSIVE_TAG",
  "xmlschema.qnames.XSD_MAX_LENGTH_TAG",
  "xmlschema.qnames.XSD_MIN_EXCLUSIVE_TAG",
  "xmlschema.qnames.XSD_MIN_INCLUSIVE_TAG",
  "xmlschema.qnames.XSD_MIN_LENGTH_TAG",
  "xmlschema.qnames.XSD_NOTATION_TAG",
  "xmlschema.qnames.XSD_NOTATION_TYPE",
  "xmlschema.qnames.XSD_OPEN_CONTENT_TAG",
  "xmlschema.qnames.XSD_PATTERN_TAG",
  "xmlschema.qnames.XSD_REDEFINE_TAG",
  "xmlschema.qnames.XSD_RESTRICTION_TAG",
  "xmlschema.qnames.XSD_SCHEMA_TAG",
  "xmlschema.qnames.XSD_SELECTOR_TAG",
  "xmlschema.qnames.XSD_SEQUENCE_TAG",
  "xmlschema.qnames.XSD_SIMPLE_CONTENT_TAG",
  "xmlschema.qnames.XSD_SIMPLE_TYPE_TAG",
  "xmlschema.qnames.XSD_SPECIAL_TYPES",
  "xmlschema.qnames.XSD_TOTAL_DIGITS_TAG",
  "xmlschema.qnames.XSD_UNION_TAG",
  "xmlschema.qnames.XSD_UNIQUE_TAG",
  "xmlschema.qnames.XSD_WHITE_SPACE_ENUM",
  "xmlschema.qnames.XSD_WHITE_SPACE_TAG",
  "xmlschema.qnames.XSI_NIL",
  "xmlschema.qnames.XSI_NONS_SCHEMA_LOCATION",
  "xmlschema.qnames.XSI_SCHEMA_LOCATION",
  "xmlschema.qnames.XSI_TYPE",
  "xmlschema.qnames.get_qname",
  "xmlschema.qnames.local_name",
  "xmlschema.qnames.qname_to_prefixed",
  "xmlschema.qnames.reference_to_qname",
  "xmlschema.qnames.split_qname",
  "xmlschema.qnames.split_reference",
  "xmlschema.qnames.split_to_prefixed",
  "xmlschema.qnames.xsd_qname",
  "xmlschema.regex",
  "xmlschema.resources",
  "xmlschema.resources.fetch_resource",
  "xmlschema.resources.fetch_schema",
  "xmlschema.resources.get_xml_root",
  "xmlschema.resources.iter_schema_location_hints",
  "xmlschema.resources.load_resource",
  "xmlschema.resources.load_xml_resource",
  "xmlschema.resources.normalize_url",
  "xmlschema.tests",
  "xmlschema.tests.ObservedXMLSchema",
  "xmlschema.tests.SchemaObserver",
  "xmlschema.tests.get_args_parser",
  "xmlschema.tests.get_test_args",
  "xmlschema.tests.print_test_header",
  "xmlschema.tests.test_all",
  "xmlschema.tests.test_all.TestBuiltinTypes",
  "xmlschema.tests.test_all.TestCodePoints",
  "xmlschema.tests.test_all.TestDecoding",
  "xmlschema.tests.test_all.TestGlobalMaps",
  "xmlschema.tests.test_all.TestResources",
  "xmlschema.tests.test_all.TestUnicodeCategories",
  "xmlschema.tests.test_all.TestUnicodeSubset",
  "xmlschema.tests.test_all.TestValidation",
  "xmlschema.tests.test_all.XsdXPathTest",
  "xmlschema.tests.test_all.make_test_decoding_function",
  "xmlschema.tests.test_all.make_test_schema_function",
  "xmlschema.tests.test_all.path",
  "xmlschema.tests.test_all.pkg_base_dir",
  "xmlschema.tests.test_all.print_test_header",
  "xmlschema.tests.test_all.tests_factory",
  "xmlschema.tests.test_decoding",
  "xmlschema.tests.test_decoding.TestDecoding",
  "xmlschema.tests.test_decoding._COLLECTION_ABDERA",
  "xmlschema.tests.test_decoding._COLLECTION_BADGERFISH",
  "xmlschema.tests.test_decoding._COLLECTION_DICT",
  "xmlschema.tests.test_decoding._COLLECTION_JSON_ML",
  "xmlschema.tests.test_decoding._COLLECTION_PARKER",
  "xmlschema.tests.test_decoding._COLLECTION_PARKER_ROOT",
  "xmlschema.tests.test_decoding._DATA_DICT",
  "xmlschema.tests.test_decoding._VEHICLES_DICT",
  "xmlschema.tests.test_decoding._VEHICLES_DICT_ALT",
  "xmlschema.tests.test_decoding._lxml_etree",
  "xmlschema.tests.test_decoding.decoding_tests",
  "xmlschema.tests.test_decoding.local_name",
  "xmlschema.tests.test_decoding.make_test_decoding_function",
  "xmlschema.tests.test_decoding.path",
  "xmlschema.tests.test_decoding.pkg_base_dir",
  "xmlschema.tests.test_decoding.print_test_header",
  "xmlschema.tests.test_decoding.tests_factory",
  "xmlschema.tests.test_line_parser",
  "xmlschema.tests.test_meta",
  "xmlschema.tests.test_meta.TestBuiltinTypes",
  "xmlschema.tests.test_meta.TestGlobalMaps",
  "xmlschema.tests.test_meta.XMLSchemaDecodeError",
  "xmlschema.tests.test_meta.XMLSchemaEncodeError",
  "xmlschema.tests.test_meta.XMLSchemaValidationError",
  "xmlschema.tests.test_meta.meta_schema",
  "xmlschema.tests.test_meta.pkg_base_dir",
  "xmlschema.tests.test_meta.print_test_header",
  "xmlschema.tests.test_regex",
  "xmlschema.tests.test_regex.TestCodePoints",
  "xmlschema.tests.test_regex.TestUnicodeCategories",
  "xmlschema.tests.test_regex.TestUnicodeSubset",
  "xmlschema.tests.test_regex.UNICODE_CATEGORIES",
  "xmlschema.tests.test_regex.UnicodeSubset",
  "xmlschema.tests.test_regex.XMLSchemaValueError",
  "xmlschema.tests.test_regex.iter_code_points",
  "xmlschema.tests.test_regex.pkg_base_dir",
  "xmlschema.tests.test_regex.print_test_header",
  "xmlschema.tests.test_regex.unicode_chr",
  "xmlschema.tests.test_resources",
  "xmlschema.tests.test_resources.TestResources",
  "xmlschema.tests.test_resources.pkg_base_dir",
  "xmlschema.tests.test_resources.print_test_header",
  "xmlschema.tests.test_schemas",
  "xmlschema.tests.test_schemas.SchemaObserver",
  "xmlschema.tests.test_schemas.XMLSchemaParseError",
  "xmlschema.tests.test_schemas.XMLSchemaURLError",
  "xmlschema.tests.test_schemas._lxml_etree",
  "xmlschema.tests.test_schemas.make_test_schema_function",
  "xmlschema.tests.test_schemas.path",
  "xmlschema.tests.test_schemas.pkg_base_dir",
  "xmlschema.tests.test_schemas.print_test_header",
  "xmlschema.tests.test_schemas.schema_tests",
  "xmlschema.tests.test_schemas.tests_factory",
  "xmlschema.tests.test_validation",
  "xmlschema.tests.test_validation.TestValidation",
  "xmlschema.tests.test_validation.etree",
  "xmlschema.tests.test_validation.make_test_validation_function",
  "xmlschema.tests.test_validation.path",
  "xmlschema.tests.test_validation.pkg_base_dir",
  "xmlschema.tests.test_validation.print_test_header",
  "xmlschema.tests.test_validation.tests_factory",
  "xmlschema.tests.test_validation.validation_tests",
  "xmlschema.tests.test_xpath",
  "xmlschema.tests.test_xpath.ElementTreeXPathTest",
  "xmlschema.tests.test_xpath.XMLSchema",
  "xmlschema.tests.test_xpath.XMLSchemaXPathError",
  "xmlschema.tests.test_xpath.XPath1Parser",
  "xmlschema.tests.test_xpath.XPathSelector",
  "xmlschema.tests.test_xpath.XsdXPathTest",
  "xmlschema.tests.test_xpath.pkg_base_dir",
  "xmlschema.tests.test_xpath.print_test_header",
  "xmlschema.tests.tests_factory",
  "xmlschema.tests.xsd_version_number",
  "xmlschema.to_dict",
  "xmlschema.validate",
  "xmlschema.validators",
  "xmlschema.validators.BOOLEAN_FACETS",
  "xmlschema.validators.DATETIME_FACETS",
  "xmlschema.validators.DECIMAL_FACETS",
  "xmlschema.validators.FLOAT_FACETS",
  "xmlschema.validators.ParticleMixin",
  "xmlschema.validators.STRING_FACETS",
  "xmlschema.validators.ValidatorMixin",
  "xmlschema.validators.XMLSchema",
  "xmlschema.validators.XMLSchema_v1_0",
  "xmlschema.validators.XSD11_FACETS",
  "xmlschema.validators.XSD_FACETS",
  "xmlschema.validators.XsdAnnotated",
  "xmlschema.validators.XsdAnnotation",
  "xmlschema.validators.XsdAnyAttribute",
  "xmlschema.validators.XsdAnyElement",
  "xmlschema.validators.XsdAtomic",
  "xmlschema.validators.XsdAttribute",
  "xmlschema.validators.XsdBaseComponent",
  "xmlschema.validators.XsdComplexType",
  "xmlschema.validators.XsdComponent",
  "xmlschema.validators.XsdConstraint",
  "xmlschema.validators.XsdElement",
  "xmlschema.validators.XsdEnumerationFacet",
  "xmlschema.validators.XsdFieldSelector",
  "xmlschema.validators.XsdGroup",
  "xmlschema.validators.XsdKey",
  "xmlschema.validators.XsdList",
  "xmlschema.validators.XsdNotation",
  "xmlschema.validators.XsdPatternsFacet",
  "xmlschema.validators.XsdSelector",
  "xmlschema.validators.XsdSimpleType",
  "xmlschema.validators.XsdSingleFacet",
  "xmlschema.validators.XsdUnion",
  "xmlschema.validators.XsdUnique",
  "xmlschema.validators.assertions",
  "xmlschema.validators.attributes",
  "xmlschema.validators.attributes.Xsd11Attribute",
  "xmlschema.validators.attributes.XsdAttribute",
  "xmlschema.validators.attributes._REGEX_SPACE",
  "xmlschema.validators.attributes._REGEX_SPACES",
  "xmlschema.validators.attributes.__str__",
  "xmlschema.validators.attributes.admitted_tags",
  "xmlschema.validators.attributes.all_errors",
  "xmlschema.validators.attributes.built",
  "xmlschema.validators.attributes.maps",
  "xmlschema.validators.attributes.namespaces",
  "xmlschema.validators.attributes.prefixed_name",
  "xmlschema.validators.attributes.qualified_name",
  "xmlschema.validators.attributes.target_namespace",
  "xmlschema.validators.attributes.validation_attempted",
  "xmlschema.validators.attributes.validity",
  "xmlschema.validators.builtins",
  "xmlschema.validators.builtins.COLLAPSE_WHITE_SPACE_ELEMENT",
  "xmlschema.validators.builtins.PRESERVE_WHITE_SPACE_ELEMENT",
  "xmlschema.validators.builtins.REPLACE_WHITE_SPACE_ELEMENT",
  "xmlschema.validators.builtins.XSD_BUILTIN_OTHER_ATOMIC_TYPES",
  "xmlschema.validators.builtins.XSD_BUILTIN_PRIMITIVE_TYPES",
  "xmlschema.validators.builtins._RE_DURATION",
  "xmlschema.validators.builtins._RE_ISO_TIMEZONE",
  "xmlschema.validators.builtins.boolean_to_python",
  "xmlschema.validators.builtins.byte_validator",
  "xmlschema.validators.builtins.date_validator",
  "xmlschema.validators.builtins.datetime_iso8601_validator",
  "xmlschema.validators.builtins.datetime_validator",
  "xmlschema.validators.builtins.duration_validator",
  "xmlschema.validators.builtins.g_day_validator",
  "xmlschema.validators.builtins.g_month_day_validator",
  "xmlschema.validators.builtins.g_month_validator",
  "xmlschema.validators.builtins.g_year_month_validator",
  "xmlschema.validators.builtins.g_year_validator",
  "xmlschema.validators.builtins.int_validator",
  "xmlschema.validators.builtins.long_validator",
  "xmlschema.validators.builtins.negative_int_validator",
  "xmlschema.validators.builtins.non_negative_int_validator",
  "xmlschema.validators.builtins.non_positive_int_validator",
  "xmlschema.validators.builtins.positive_int_validator",
  "xmlschema.validators.builtins.python_to_boolean",
  "xmlschema.validators.builtins.short_validator",
  "xmlschema.validators.builtins.time_validator",
  "xmlschema.validators.builtins.unsigned_byte_validator",
  "xmlschema.validators.builtins.unsigned_int_validator",
  "xmlschema.validators.builtins.unsigned_long_validator",
  "xmlschema.validators.builtins.unsigned_short_validator",
  "xmlschema.validators.builtins.xsd_build_any_attribute_group",
  "xmlschema.validators.builtins.xsd_build_any_content_group",
  "xmlschema.validators.builtins.xsd_build_facets",
  "xmlschema.validators.builtins.xsd_builtin_types_factory",
  "xmlschema.validators.complex_types",
  "xmlschema.validators.complex_types.EMPTY_SEQUENCE_ELEM",
  "xmlschema.validators.complex_types.XSD_MODEL_GROUP_TAGS",
  "xmlschema.validators.complex_types.Xsd11ComplexType",
  "xmlschema.validators.complex_types.XsdComplexType",
  "xmlschema.validators.complex_types._REGEX_SPACE",
  "xmlschema.validators.complex_types._REGEX_SPACES",
  "xmlschema.validators.complex_types.__str__",
  "xmlschema.validators.complex_types.all_errors",
  "xmlschema.validators.complex_types.maps",
  "xmlschema.validators.complex_types.namespaces",
  "xmlschema.validators.complex_types.prefixed_name",
  "xmlschema.validators.complex_types.qualified_name",
  "xmlschema.validators.complex_types.target_namespace",
  "xmlschema.validators.complex_types.to_dict",
  "xmlschema.validators.complex_types.to_etree",
  "xmlschema.validators.complex_types.validity",
  "xmlschema.validators.constraints",
  "xmlschema.validators.constraints.XsdConstraint",
  "xmlschema.validators.constraints.XsdFieldSelector",
  "xmlschema.validators.constraints.XsdKey",
  "xmlschema.validators.constraints.XsdSelector",
  "xmlschema.validators.constraints.XsdUnique",
  "xmlschema.validators.constraints._REGEX_SPACE",
  "xmlschema.validators.constraints._REGEX_SPACES",
  "xmlschema.validators.constraints.__str__",
  "xmlschema.validators.constraints.all_errors",
  "xmlschema.validators.constraints.local_name",
  "xmlschema.validators.constraints.maps",
  "xmlschema.validators.constraints.namespaces",
  "xmlschema.validators.constraints.prefixed_name",
  "xmlschema.validators.constraints.qualified_name",
  "xmlschema.validators.constraints.target_namespace",
  "xmlschema.validators.constraints.validity",
  "xmlschema.validators.create_validator",
  "xmlschema.validators.elements",
  "xmlschema.validators.elements.XSD_MODEL_GROUP_TAGS",
  "xmlschema.validators.elements.Xsd11Element",
  "xmlschema.validators.elements.XsdAlternative",
  "xmlschema.validators.elements.XsdElement",
  "xmlschema.validators.elements._REGEX_SPACE",
  "xmlschema.validators.elements._REGEX_SPACES",
  "xmlschema.validators.elements.__str__",
  "xmlschema.validators.elements.admitted_tags",
  "xmlschema.validators.elements.all_errors",
  "xmlschema.validators.elements.built",
  "xmlschema.validators.elements.local_name",
  "xmlschema.validators.elements.maps",
  "xmlschema.validators.elements.namespaces",
  "xmlschema.validators.elements.prefixed_name",
  "xmlschema.validators.elements.qualified_name",
  "xmlschema.validators.elements.target_namespace",
  "xmlschema.validators.elements.validation_attempted",
  "xmlschema.validators.elements.validity",
  "xmlschema.validators.exceptions",
  "xmlschema.validators.exceptions.XMLSchemaChildrenValidationError",
  "xmlschema.validators.exceptions.XMLSchemaDecodeError",
  "xmlschema.validators.exceptions.XMLSchemaEncodeError",
  "xmlschema.validators.exceptions.XMLSchemaNotBuiltError",
  "xmlschema.validators.exceptions.XMLSchemaParseError",
  "xmlschema.validators.exceptions.XMLSchemaValidationError",
  "xmlschema.validators.facets",
  "xmlschema.validators.facets.BOOLEAN_FACETS",
  "xmlschema.validators.facets.DATETIME_FACETS",
  "xmlschema.validators.facets.DECIMAL_FACETS",
  "xmlschema.validators.facets.FLOAT_FACETS",
  "xmlschema.validators.facets.LIST_FACETS",
  "xmlschema.validators.facets.STRING_FACETS",
  "xmlschema.validators.facets.UNION_FACETS",
  "xmlschema.validators.facets.XSD11_FACETS",
  "xmlschema.validators.facets.XSD_FACETS",
  "xmlschema.validators.facets.XsdEnumerationFacet",
  "xmlschema.validators.facets.XsdFacet",
  "xmlschema.validators.facets.XsdPatternsFacet",
  "xmlschema.validators.facets.XsdSingleFacet",
  "xmlschema.validators.facets._REGEX_SPACE",
  "xmlschema.validators.facets._REGEX_SPACES",
  "xmlschema.validators.facets.__str__",
  "xmlschema.validators.facets.all_errors",
  "xmlschema.validators.facets.maps",
  "xmlschema.validators.facets.namespaces",
  "xmlschema.validators.facets.prefixed_name",
  "xmlschema.validators.facets.qualified_name",
  "xmlschema.validators.facets.target_namespace",
  "xmlschema.validators.facets.validity",
  "xmlschema.validators.globals_",
  "xmlschema.validators.globals_.XsdGlobals",
  "xmlschema.validators.globals_.all_errors",
  "xmlschema.validators.globals_.built",
  "xmlschema.validators.globals_.camel_case_split",
  "xmlschema.validators.globals_.create_load_function",
  "xmlschema.validators.globals_.iterchildren_by_tag",
  "xmlschema.validators.globals_.iterchildren_xsd_import",
  "xmlschema.validators.globals_.iterchildren_xsd_include",
  "xmlschema.validators.globals_.iterchildren_xsd_redefine",
  "xmlschema.validators.globals_.load_xsd_attribute_groups",
  "xmlschema.validators.globals_.load_xsd_attributes",
  "xmlschema.validators.globals_.load_xsd_complex_types",
  "xmlschema.validators.globals_.load_xsd_elements",
  "xmlschema.validators.globals_.load_xsd_groups",
  "xmlschema.validators.globals_.load_xsd_notations",
  "xmlschema.validators.globals_.load_xsd_simple_types",
  "xmlschema.validators.globals_.validation_attempted",
  "xmlschema.validators.globals_.validity",
  "xmlschema.validators.groups",
  "xmlschema.validators.groups.XSD_MODEL_GROUP_TAGS",
  "xmlschema.validators.groups.Xsd11Group",
  "xmlschema.validators.groups.XsdGroup",
  "xmlschema.validators.groups._REGEX_SPACE",
  "xmlschema.validators.groups._REGEX_SPACES",
  "xmlschema.validators.groups.__str__",
  "xmlschema.validators.groups.all_errors",
  "xmlschema.validators.groups.maps",
  "xmlschema.validators.groups.max_occurs",
  "xmlschema.validators.groups.min_occurs",
  "xmlschema.validators.groups.namespaces",
  "xmlschema.validators.groups.prefixed_name",
  "xmlschema.validators.groups.qualified_name",
  "xmlschema.validators.groups.target_namespace",
  "xmlschema.validators.groups.to_dict",
  "xmlschema.validators.groups.to_etree",
  "xmlschema.validators.groups.validity",
  "xmlschema.validators.notations",
  "xmlschema.validators.notations.XsdNotation",
  "xmlschema.validators.notations._REGEX_SPACE",
  "xmlschema.validators.notations._REGEX_SPACES",
  "xmlschema.validators.notations.__str__",
  "xmlschema.validators.notations.admitted_tags",
  "xmlschema.validators.notations.all_errors",
  "xmlschema.validators.notations.built",
  "xmlschema.validators.notations.local_name",
  "xmlschema.validators.notations.maps",
  "xmlschema.validators.notations.namespaces",
  "xmlschema.validators.notations.prefixed_name",
  "xmlschema.validators.notations.qualified_name",
  "xmlschema.validators.notations.target_namespace",
  "xmlschema.validators.notations.validation_attempted",
  "xmlschema.validators.notations.validity",
  "xmlschema.validators.parseutils",
  "xmlschema.validators.parseutils.check_type",
  "xmlschema.validators.parseutils.check_value",
  "xmlschema.validators.parseutils.get_xpath_default_namespace_attribute",
  "xmlschema.validators.parseutils.get_xsd_annotation",
  "xmlschema.validators.parseutils.get_xsd_attribute",
  "xmlschema.validators.parseutils.get_xsd_bool_attribute",
  "xmlschema.validators.parseutils.get_xsd_component",
  "xmlschema.validators.parseutils.get_xsd_derivation_attribute",
  "xmlschema.validators.parseutils.get_xsd_int_attribute",
  "xmlschema.validators.parseutils.has_xsd_components",
  "xmlschema.validators.parseutils.iter_xsd_components",
  "xmlschema.validators.schema",
  "xmlschema.validators.schema.BASE_SCHEMAS",
  "xmlschema.validators.schema.DEFAULT_BUILDERS",
  "xmlschema.validators.schema.SCHEMAS_DIR",
  "xmlschema.validators.schema.XMLSchema",
  "xmlschema.validators.schema.XMLSchemaBase",
  "xmlschema.validators.schema.XMLSchemaMeta",
  "xmlschema.validators.schema.XMLSchema_v1_0",
  "xmlschema.validators.schema.XSD_1_0_META_SCHEMA_PATH",
  "xmlschema.validators.schema.XSD_1_1_META_SCHEMA_PATH",
  "xmlschema.validators.schema.create_validator",
  "xmlschema.validators.simple_types",
  "xmlschema.validators.simple_types.Xsd11AtomicRestriction",
  "xmlschema.validators.simple_types.XsdAtomic",
  "xmlschema.validators.simple_types.XsdList",
  "xmlschema.validators.simple_types.XsdSimpleType",
  "xmlschema.validators.simple_types.XsdUnion",
  "xmlschema.validators.simple_types._REGEX_SPACE",
  "xmlschema.validators.simple_types._REGEX_SPACES",
  "xmlschema.validators.simple_types.__str__",
  "xmlschema.validators.simple_types.all_errors",
  "xmlschema.validators.simple_types.maps",
  "xmlschema.validators.simple_types.namespaces",
  "xmlschema.validators.simple_types.prefixed_name",
  "xmlschema.validators.simple_types.qualified_name",
  "xmlschema.validators.simple_types.target_namespace",
  "xmlschema.validators.simple_types.to_dict",
  "xmlschema.validators.simple_types.to_etree",
  "xmlschema.validators.simple_types.validity",
  "xmlschema.validators.simple_types.xsd_simple_type_factory",
  "xmlschema.validators.wildcards",
  "xmlschema.validators.wildcards.Xsd11AnyAttribute",
  "xmlschema.validators.wildcards.Xsd11AnyElement",
  "xmlschema.validators.wildcards.Xsd11Wildcard",
  "xmlschema.validators.wildcards.XsdAnyAttribute",
  "xmlschema.validators.wildcards.XsdAnyElement",
  "xmlschema.validators.wildcards.XsdOpenContent",
  "xmlschema.validators.wildcards.XsdWildcard",
  "xmlschema.validators.wildcards._REGEX_SPACE",
  "xmlschema.validators.wildcards._REGEX_SPACES",
  "xmlschema.validators.wildcards.__str__",
  "xmlschema.validators.wildcards.admitted_tags",
  "xmlschema.validators.wildcards.all_errors",
  "xmlschema.validators.wildcards.built",
  "xmlschema.validators.wildcards.local_name",
  "xmlschema.validators.wildcards.maps",
  "xmlschema.validators.wildcards.namespaces",
  "xmlschema.validators.wildcards.prefixed_name",
  "xmlschema.validators.wildcards.qualified_name",
  "xmlschema.validators.wildcards.target_namespace",
  "xmlschema.validators.wildcards.validation_attempted",
  "xmlschema.validators.wildcards.validity",
  "xmlschema.validators.xsd_build_any_attribute_group",
  "xmlschema.validators.xsd_build_any_content_group",
  "xmlschema.validators.xsd_builtin_types_factory",
  "xmlschema.validators.xsd_simple_type_factory",
  "xmlschema.validators.xsdbase",
  "xmlschema.validators.xsdbase.ParticleMixin",
  "xmlschema.validators.xsdbase.ParticleMixin.max_occurs",
  "xmlschema.validators.xsdbase.ParticleMixin.min_occurs",
  "xmlschema.validators.xsdbase.ValidatorMixin",
  "xmlschema.validators.xsdbase.ValidatorMixin.to_dict",
  "xmlschema.validators.xsdbase.ValidatorMixin.to_etree",
  "xmlschema.validators.xsdbase.XsdAnnotated",
  "xmlschema.validators.xsdbase.XsdAnnotated.admitted_tags",
  "xmlschema.validators.xsdbase.XsdAnnotated.built",
  "xmlschema.validators.xsdbase.XsdAnnotation",
  "xmlschema.validators.xsdbase.XsdBaseComponent",
  "xmlschema.validators.xsdbase.XsdBaseComponent.all_errors",
  "xmlschema.validators.xsdbase.XsdBaseComponent.built",
  "xmlschema.validators.xsdbase.XsdBaseComponent.validation_attempted",
  "xmlschema.validators.xsdbase.XsdBaseComponent.validity",
  "xmlschema.validators.xsdbase.XsdComponent",
  "xmlschema.validators.xsdbase.XsdComponent._REGEX_SPACE",
  "xmlschema.validators.xsdbase.XsdComponent._REGEX_SPACES",
  "xmlschema.validators.xsdbase.XsdComponent.__str__",
  "xmlschema.validators.xsdbase.XsdComponent.local_name",
  "xmlschema.validators.xsdbase.XsdComponent.maps",
  "xmlschema.validators.xsdbase.XsdComponent.namespaces",
  "xmlschema.validators.xsdbase.XsdComponent.prefixed_name",
  "xmlschema.validators.xsdbase.XsdComponent.qualified_name",
  "xmlschema.validators.xsdbase.XsdComponent.target_namespace",
  "xmlschema.validators.xsdbase.XsdComponent.validation_attempted",
  "xmlschema.xpath",
  "xmlschema.xpath.ElementPathMixin",
  "xmlschema.xpath.RELATIVE_PATH_TOKENS",
  "xmlschema.xpath.Token",
  "xmlschema.xpath.XPATH_1_SYMBOLS",
  "xmlschema.xpath.XPATH_2_SYMBOLS",
  "xmlschema.xpath.XPath1Parser",
  "xmlschema.xpath.XPath2Parser",
  "xmlschema.xpath.XPathParserBase",
  "xmlschema.xpath.XPathParserMeta",
  "xmlschema.xpath.XPathSelector",
  "xmlschema.xpath._RE_SPLIT_PATH",
  "xmlschema.xpath._selector_cache",
  "xmlschema.xpath.advance",
  "xmlschema.xpath.and_token_led",
  "xmlschema.xpath.attribute_token_nud",
  "xmlschema.xpath.child_axis_nud",
  "xmlschema.xpath.child_led",
  "xmlschema.xpath.child_nud",
  "xmlschema.xpath.compare_token_led",
  "xmlschema.xpath.compare_token_nud",
  "xmlschema.xpath.create_xpath_parser",
  "xmlschema.xpath.current_token",
  "xmlschema.xpath.descendant_token_led",
  "xmlschema.xpath.div_token_led",
  "xmlschema.xpath.dummy_advance",
  "xmlschema.xpath.end_nud",
  "xmlschema.xpath.expression",
  "xmlschema.xpath.get_xpath_tokenizer_pattern",
  "xmlschema.xpath.group_token_nud",
  "xmlschema.xpath.last_function_token_nud",
  "xmlschema.xpath.minus_token_led",
  "xmlschema.xpath.minus_token_nud",
  "xmlschema.xpath.mod_token_led",
  "xmlschema.xpath.next_token",
  "xmlschema.xpath.or_token_led",
  "xmlschema.xpath.parent_token_nud",
  "xmlschema.xpath.plus_token_led",
  "xmlschema.xpath.plus_token_nud",
  "xmlschema.xpath.position_function_token_nud",
  "xmlschema.xpath.predicate_close_token",
  "xmlschema.xpath.predicate_token_led",
  "xmlschema.xpath.predicate_token_nud",
  "xmlschema.xpath.ref_token_nud",
  "xmlschema.xpath.register_led",
  "xmlschema.xpath.register_nud",
  "xmlschema.xpath.register_symbols",
  "xmlschema.xpath.relative_path",
  "xmlschema.xpath.right_round_bracket_token",
  "xmlschema.xpath.self_token_nud",
  "xmlschema.xpath.split_path",
  "xmlschema.xpath.star_token_led",
  "xmlschema.xpath.star_token_nud",
  "xmlschema.xpath.symbol",
  "xmlschema.xpath.union_token_led",
  "xmlschema.xpath.value_nud",
  "xmlschema.xpath.xsd_iterfind"
 ]
}