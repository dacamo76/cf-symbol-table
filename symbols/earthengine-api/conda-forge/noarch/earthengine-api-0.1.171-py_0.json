{
 "errors": {
  "ee.deserializer": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for i, (key, value) in enumerate(json_obj['scope']):       if key in named_values:         raise ee_exception.EEException(             'Duplicate scope key \"%s\" in scope #%d.' % (key, i))       named_values[key] = _decodeValue(value, named_values)@49,4>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 478, in infer_or_test",
    "    context.infer_node(right))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 733, in tree_name_to_values",
    "    is_async=node.parent.type == 'async_stmt',",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 310, in iterate_values",
    "    for lazy_value in values.iterate(contextualized_node, is_async=is_async)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 309, in <genexpr>",
    "    lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 476, in iterate",
    "    type_iters = [c.iterate(contextualized_node, is_async=is_async) for c in self._set]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 476, in <listcomp>",
    "    type_iters = [c.iterate(contextualized_node, is_async=is_async) for c in self._set]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 116, in iterate",
    "    return self.py__iter__(contextualized_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 252, in py__iter__",
    "    iter_slot_names = self.get_function_slot_names('__iter__')",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 302, in get_function_slot_names",
    "    for filter in self.get_filters(include_self_names=False):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 331, in _get_annotated_class_object",
    "    for signature in self.class_value.py__getattribute__('__init__').get_signatures():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 206, in get_filters",
    "    metaclasses = self.get_metaclasses()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 394, in get_metaclasses",
    "    for value in lazy_base.infer():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "ee.Algorithms",
  "ee.ApiFunction",
  "ee.Collection",
  "ee.ComputedObject",
  "ee.CustomFunction",
  "ee.Date",
  "ee.Dictionary",
  "ee.EEException",
  "ee.Element",
  "ee.Encodable",
  "ee.Feature",
  "ee.Filter",
  "ee.Function",
  "ee.Geometry",
  "ee.Image",
  "ee.Initialize",
  "ee.List",
  "ee.Number",
  "ee.Reset",
  "ee.Serializer",
  "ee.ServiceAccountCredentials",
  "ee.String",
  "ee.Terrain",
  "ee._AlgorithmsContainer",
  "ee._GetPersistentCredentials",
  "ee._InitializeGeneratedClasses",
  "ee._InitializeUnboundMethods",
  "ee._MakeClass",
  "ee._Promote",
  "ee._ResetGeneratedClasses",
  "ee.__version__",
  "ee._cloud_api_utils",
  "ee._cloud_api_utils._convert_algorithm",
  "ee._cloud_api_utils._convert_asset_for_get_list_result",
  "ee._cloud_api_utils._convert_asset_type_for_get_list_result",
  "ee._cloud_api_utils._convert_bounding_box_to_geo_json",
  "ee._cloud_api_utils._convert_csv_numbers_to_list",
  "ee._cloud_api_utils._convert_dict",
  "ee._cloud_api_utils._convert_msec_to_timestamp",
  "ee._cloud_api_utils._convert_operation_state_to_task_state",
  "ee._cloud_api_utils._convert_timestamp_to_msec",
  "ee._cloud_api_utils._convert_value",
  "ee._cloud_api_utils._wrap_request",
  "ee._cloud_api_utils.build_cloud_resource",
  "ee._cloud_api_utils.convert_acl_to_iam_policy",
  "ee._cloud_api_utils.convert_algorithms",
  "ee._cloud_api_utils.convert_asset_id_to_asset_name",
  "ee._cloud_api_utils.convert_asset_type_for_create_asset",
  "ee._cloud_api_utils.convert_get_list_params_to_list_assets_params",
  "ee._cloud_api_utils.convert_get_list_params_to_list_images_params",
  "ee._cloud_api_utils.convert_iam_policy_to_acl",
  "ee._cloud_api_utils.convert_list_assets_result_to_get_list_result",
  "ee._cloud_api_utils.convert_list_buckets_result_to_get_list_result",
  "ee._cloud_api_utils.convert_list_images_result_to_get_list_result",
  "ee._cloud_api_utils.convert_operation_name_to_task_id",
  "ee._cloud_api_utils.convert_operation_to_task",
  "ee._cloud_api_utils.convert_task_id_to_operation_name",
  "ee._cloud_api_utils.convert_to_band_list",
  "ee._cloud_api_utils.convert_to_grid_dimensions",
  "ee._cloud_api_utils.convert_to_image_file_format",
  "ee._cloud_api_utils.convert_to_table_file_format",
  "ee._cloud_api_utils.convert_to_visualization_options",
  "ee._cloud_api_utils.encode_number_as_cloud_value",
  "ee._cloud_api_utils.split_asset_name",
  "ee._generatedClasses",
  "ee._helpers",
  "ee._helpers.ServiceAccountCredentials",
  "ee._helpers._GetPersistentCredentials",
  "ee._helpers.apply",
  "ee._helpers.call",
  "ee._helpers.profilePrinting",
  "ee.apifunction",
  "ee.apifunction.ApiFunction",
  "ee.apifunction._promoter",
  "ee.apitestcase",
  "ee.apitestcase.ApiTestCase",
  "ee.apitestcase.BUILTIN_FUNCTIONS",
  "ee.apitestcase.ENCODED_JSON_SAMPLE",
  "ee.apply",
  "ee.batch",
  "ee.batch.ALLOWED_FORMAT_OPTIONS",
  "ee.batch.ConvertFormatSpecificParams",
  "ee.batch.Export",
  "ee.batch.FORMAT_PREFIX_MAP",
  "ee.batch.IMAGE_FORMAT_FIELD",
  "ee.batch.IMAGE_FORMAT_OPTIONS_FIELD",
  "ee.batch.Task",
  "ee.batch._CheckConfigDisallowedPrefixes",
  "ee.batch._ConvertConfigParams",
  "ee.batch._canonicalize_parameters",
  "ee.batch._canonicalize_region",
  "ee.batch._capture_parameters",
  "ee.batch._create_export_task",
  "ee.batch._create_task",
  "ee.batch._prepare_image_export_config",
  "ee.batch._prepare_map_export_config",
  "ee.batch._prepare_table_export_config",
  "ee.batch._prepare_video_export_config",
  "ee.call",
  "ee.cli",
  "ee.cli.commands",
  "ee.cli.commands.ALL_USERS",
  "ee.cli.commands.ALL_USERS_CAN_READ",
  "ee.cli.commands.AclChCommand",
  "ee.cli.commands.AclCommand",
  "ee.cli.commands.AclGetCommand",
  "ee.cli.commands.AclSetCommand",
  "ee.cli.commands.AssetCommand",
  "ee.cli.commands.AssetInfoCommand",
  "ee.cli.commands.AssetSetCommand",
  "ee.cli.commands.AuthenticateCommand",
  "ee.cli.commands.CopyCommand",
  "ee.cli.commands.CreateCollectionCommand",
  "ee.cli.commands.CreateCommand",
  "ee.cli.commands.CreateFolderCommand",
  "ee.cli.commands.Dispatcher",
  "ee.cli.commands.ListCommand",
  "ee.cli.commands.MoveCommand",
  "ee.cli.commands.PROPERTY_RE",
  "ee.cli.commands.READERS",
  "ee.cli.commands.RmCommand",
  "ee.cli.commands.SYSTEM_TIME_END",
  "ee.cli.commands.SYSTEM_TIME_START",
  "ee.cli.commands.SizeCommand",
  "ee.cli.commands.TASK_TYPES",
  "ee.cli.commands.TYPE_DATE",
  "ee.cli.commands.TYPE_NUMBER",
  "ee.cli.commands.TYPE_STRING",
  "ee.cli.commands.TaskCancelCommand",
  "ee.cli.commands.TaskCommand",
  "ee.cli.commands.TaskInfoCommand",
  "ee.cli.commands.TaskListCommand",
  "ee.cli.commands.TaskWaitCommand",
  "ee.cli.commands.UploadCommand",
  "ee.cli.commands.UploadImageCommand",
  "ee.cli.commands.UploadImageManifestCommand",
  "ee.cli.commands.UploadTableCommand",
  "ee.cli.commands.UploadTableManifestCommand",
  "ee.cli.commands.WRITERS",
  "ee.cli.commands._UploadManifestBase",
  "ee.cli.commands._add_overwrite_arg",
  "ee.cli.commands._add_property_flags",
  "ee.cli.commands._add_wait_arg",
  "ee.cli.commands._check_valid_files",
  "ee.cli.commands._comma_separated_numbers",
  "ee.cli.commands._comma_separated_pyramiding_policies",
  "ee.cli.commands._comma_separated_strings",
  "ee.cli.commands._decode_date",
  "ee.cli.commands._decode_number",
  "ee.cli.commands._decode_property",
  "ee.cli.commands._decode_timestamp_flags",
  "ee.cli.commands._pretty_print_json",
  "ee.cli.commands._timestamp_ms_for_datetime",
  "ee.cli.commands._upload",
  "ee.cli.commands.utils",
  "ee.cli.eecli",
  "ee.cli.eecli.CommandDispatcher",
  "ee.cli.eecli.commands",
  "ee.cli.eecli.main",
  "ee.cli.eecli.utils",
  "ee.cli.eecli_wrapper",
  "ee.cli.eecli_wrapper.EECLI_DIR",
  "ee.cli.eecli_wrapper.OutputAndExit",
  "ee.cli.eecli_wrapper.RunMain",
  "ee.cli.eecli_wrapper.THIRD_PARTY_DIR",
  "ee.cli.utils",
  "ee.cli.utils.CONFIG_PARAMS",
  "ee.cli.utils.CommandLineConfig",
  "ee.cli.utils.DEFAULT_EE_CONFIG_FILE",
  "ee.cli.utils.DEFAULT_EE_CONFIG_FILE_RELATIVE",
  "ee.cli.utils.EE_CONFIG_FILE",
  "ee.cli.utils.HOMEDIR",
  "ee.cli.utils.TASK_FINISHED_STATES",
  "ee.cli.utils._gcs_ls",
  "ee.cli.utils.expand_gcs_wildcards",
  "ee.cli.utils.query_yes_no",
  "ee.cli.utils.truncate",
  "ee.cli.utils.wait_for_task",
  "ee.collection",
  "ee.collection.Collection",
  "ee.collection.Collection._initialized",
  "ee.collection._initialized",
  "ee.computedobject",
  "ee.computedobject.ComputedObject",
  "ee.customfunction",
  "ee.customfunction.CustomFunction",
  "ee.customfunction._promoter",
  "ee.data",
  "ee.data.ASSET_TYPE_FOLDER",
  "ee.data.ASSET_TYPE_FOLDER_CLOUD",
  "ee.data.ASSET_TYPE_IMAGE_COLL",
  "ee.data.ASSET_TYPE_IMAGE_COLL_CLOUD",
  "ee.data.BASE_RETRY_WAIT",
  "ee.data.DEFAULT_API_BASE_URL",
  "ee.data.DEFAULT_CLOUD_API_BASE_URL",
  "ee.data.DEFAULT_CLOUD_API_USER_PROJECT",
  "ee.data.DEFAULT_TILE_BASE_URL",
  "ee.data.MAX_RETRIES",
  "ee.data.MAX_RETRY_WAIT",
  "ee.data.MAX_TYPE_LENGTH",
  "ee.data.TileFetcher",
  "ee.data._PROFILE_RESPONSE_HEADER_LOWERCASE",
  "ee.data._TASKLIST_PAGE_SIZE",
  "ee.data._ThreadLocals",
  "ee.data._api_base_url",
  "ee.data._cloud_api_base_url",
  "ee.data._cloud_api_key",
  "ee.data._cloud_api_resource",
  "ee.data._cloud_api_user_project",
  "ee.data._credentials",
  "ee.data._deadline_ms",
  "ee.data._execute_cloud_call",
  "ee.data._handle_profiling_response",
  "ee.data._initialized",
  "ee.data._install_cloud_api_resource",
  "ee.data._make_profiling_headers",
  "ee.data._thread_locals",
  "ee.data._tile_base_url",
  "ee.data._translate_cloud_exception",
  "ee.data._use_cloud_api",
  "ee.data.authorizeHttp",
  "ee.data.cancelTask",
  "ee.data.computeValue",
  "ee.data.convert_asset_id_to_asset_name",
  "ee.data.copyAsset",
  "ee.data.createAsset",
  "ee.data.create_assets",
  "ee.data.deleteAsset",
  "ee.data.exportImage",
  "ee.data.exportMap",
  "ee.data.exportTable",
  "ee.data.exportVideo",
  "ee.data.getAlgorithms",
  "ee.data.getAssetAcl",
  "ee.data.getAssetRootQuota",
  "ee.data.getAssetRoots",
  "ee.data.getDownloadId",
  "ee.data.getInfo",
  "ee.data.getList",
  "ee.data.getMapId",
  "ee.data.getTableDownloadId",
  "ee.data.getTaskList",
  "ee.data.getTaskStatus",
  "ee.data.getThumbId",
  "ee.data.getThumbnail",
  "ee.data.getTileUrl",
  "ee.data.getValue",
  "ee.data.initialize",
  "ee.data.makeDownloadUrl",
  "ee.data.makeTableDownloadUrl",
  "ee.data.makeThumbUrl",
  "ee.data.newTaskId",
  "ee.data.profiling",
  "ee.data.renameAsset",
  "ee.data.reset",
  "ee.data.send_",
  "ee.data.setAssetAcl",
  "ee.data.setAssetProperties",
  "ee.data.setCloudApiKey",
  "ee.data.setDeadline",
  "ee.data.startIngestion",
  "ee.data.startProcessing",
  "ee.data.startTableIngestion",
  "ee.deprecation",
  "ee.deprecation.CanUseDeprecated",
  "ee.deprecation.Deprecated",
  "ee.deserializer",
  "ee.dictionary",
  "ee.dictionary.Dictionary",
  "ee.ee_date",
  "ee.ee_date.Date",
  "ee.ee_exception",
  "ee.ee_exception.EEException",
  "ee.ee_list",
  "ee.ee_list.List",
  "ee.ee_number",
  "ee.ee_number.Number",
  "ee.ee_string",
  "ee.ee_string.String",
  "ee.ee_types",
  "ee.ee_types._registerClasses",
  "ee.ee_types._registered_classes",
  "ee.ee_types.classToName",
  "ee.ee_types.isArray",
  "ee.ee_types.isNumber",
  "ee.ee_types.isString",
  "ee.ee_types.isSubtype",
  "ee.ee_types.nameToClass",
  "ee.element",
  "ee.element.Element",
  "ee.element.Element._initialized",
  "ee.encodable",
  "ee.encodable.Encodable",
  "ee.feature",
  "ee.feature.Feature",
  "ee.feature._initialized",
  "ee.featurecollection",
  "ee.featurecollection.FeatureCollection",
  "ee.featurecollection._initialized",
  "ee.filter",
  "ee.filter.Filter",
  "ee.filter._FUNCTION_NAMES",
  "ee.function",
  "ee.function.Function",
  "ee.function.Function._promoter",
  "ee.geometry",
  "ee.geometry.Geometry",
  "ee.geometry._UNSPECIFIED",
  "ee.image",
  "ee.image.Image",
  "ee.imagecollection",
  "ee.imagecollection.ImageCollection",
  "ee.imagecollection._initialized",
  "ee.mapclient",
  "ee.mapclient.BASE_URL",
  "ee.mapclient.DEFAULT_MAP_URL_PATTERN",
  "ee.mapclient.MakeOverlay",
  "ee.mapclient.MapClient",
  "ee.mapclient.MapOverlay",
  "ee.mapclient.addToMap",
  "ee.mapclient.centerMap",
  "ee.oauth",
  "ee.oauth.CLIENT_ID",
  "ee.oauth.CLIENT_SECRET",
  "ee.oauth.REDIRECT_URI",
  "ee.oauth.SCOPE",
  "ee.oauth.TOKEN_REQ_URL",
  "ee.oauth.get_authorization_url",
  "ee.oauth.get_credentials_path",
  "ee.oauth.request_token",
  "ee.oauth.write_token",
  "ee.profilePrinting",
  "ee.serializer",
  "ee.serializer.DatetimeToMicroseconds",
  "ee.serializer.Serializer",
  "ee.serializer._EPOCH_DATETIME",
  "ee.serializer.encode",
  "ee.serializer.toJSON",
  "ee.serializer.toReadableJSON",
  "ee.terrain",
  "ee.terrain.Terrain",
  "ee.tests",
  "ee.tests._cloud_api_utils_test.CloudApiUtilsTest",
  "ee.tests._cloud_api_utils_test._cloud_api_utils",
  "ee.tests._cloud_api_utils_test.ee_exception",
  "ee.tests._helpers_test.ApiFunction",
  "ee.tests._helpers_test.ComputedObject",
  "ee.tests._helpers_test.ProfilingTest",
  "ee.tests._helpers_test.apitestcase",
  "ee.tests._helpers_test.deserializer",
  "ee.tests.apifunction_test.ApiFunctionTest",
  "ee.tests.apifunction_test.apitestcase",
  "ee.tests.batch_test.BatchTestCase",
  "ee.tests.batch_test.TASK_STATUS_1",
  "ee.tests.batch_test.TASK_STATUS_2",
  "ee.tests.batch_test.apitestcase",
  "ee.tests.collection_test.CollectionTestCase",
  "ee.tests.collection_test.apitestcase",
  "ee.tests.computedobject_test.ComputedObjectTest",
  "ee.tests.computedobject_test.apitestcase",
  "ee.tests.data_test.DataTest",
  "ee.tests.data_test.DoProfileStubHttp",
  "ee.tests.data_test.DoStubHttp",
  "ee.tests.data_test.ExceptionForTest",
  "ee.tests.date_test.DateTest",
  "ee.tests.date_test.apitestcase",
  "ee.tests.deserializer_test.DeserializerTest",
  "ee.tests.deserializer_test.apitestcase",
  "ee.tests.deserializer_test.deserializer",
  "ee.tests.deserializer_test.serializer",
  "ee.tests.dictionary_test.DictionaryTest",
  "ee.tests.dictionary_test.apitestcase",
  "ee.tests.ee_test.EETestCase",
  "ee.tests.ee_test.apitestcase",
  "ee.tests.element_test.ElementTestCase",
  "ee.tests.element_test.apitestcase",
  "ee.tests.feature_test.FeatureTest",
  "ee.tests.feature_test.apitestcase",
  "ee.tests.featurecollection_test.FeatureCollectionTestCase",
  "ee.tests.featurecollection_test.apitestcase",
  "ee.tests.filter_test.FilterTest",
  "ee.tests.filter_test.apitestcase",
  "ee.tests.function_test.EXPECTED_DOC",
  "ee.tests.function_test.FunctionTest",
  "ee.tests.function_test.TEST_FUNC",
  "ee.tests.geometry_test.GeometryTest",
  "ee.tests.geometry_test.apitestcase",
  "ee.tests.image_test.ImageTestCase",
  "ee.tests.image_test.apitestcase",
  "ee.tests.image_test.ee_exception",
  "ee.tests.image_test.serializer",
  "ee.tests.imagecollection_test.ImageCollectionTestCase",
  "ee.tests.imagecollection_test.apitestcase",
  "ee.tests.list_test.ListTest",
  "ee.tests.list_test.apitestcase",
  "ee.tests.number_test.NumberTest",
  "ee.tests.number_test.apitestcase",
  "ee.tests.oauth_test.OAuthTest",
  "ee.tests.serializer_test.SerializerTest",
  "ee.tests.serializer_test.apitestcase",
  "ee.tests.serializer_test.serializer",
  "ee.tests.string_test.StringTest",
  "ee.tests.string_test.apitestcase",
  "ee.types"
 ]
}