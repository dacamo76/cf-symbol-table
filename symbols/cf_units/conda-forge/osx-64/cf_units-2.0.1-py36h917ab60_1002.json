{
 "errors": {
  "cf_units._version": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "cf_units.CALENDARS",
  "cf_units.CALENDAR_360_DAY",
  "cf_units.CALENDAR_365_DAY",
  "cf_units.CALENDAR_366_DAY",
  "cf_units.CALENDAR_ALIASES",
  "cf_units.CALENDAR_ALL_LEAP",
  "cf_units.CALENDAR_GREGORIAN",
  "cf_units.CALENDAR_JULIAN",
  "cf_units.CALENDAR_NO_LEAP",
  "cf_units.CALENDAR_PROLEPTIC_GREGORIAN",
  "cf_units.CALENDAR_STANDARD",
  "cf_units.EPOCH",
  "cf_units.FLOAT32",
  "cf_units.FLOAT64",
  "cf_units.UT_ASCII",
  "cf_units.UT_DEFINITION",
  "cf_units.UT_FORMATS",
  "cf_units.UT_ISO_8859_1",
  "cf_units.UT_LATIN1",
  "cf_units.UT_NAMES",
  "cf_units.UT_UTF8",
  "cf_units.Unit",
  "cf_units._CACHE",
  "cf_units._CATEGORY_NO_UNIT",
  "cf_units._CATEGORY_UDUNIT",
  "cf_units._CATEGORY_UNKNOWN",
  "cf_units._NO_UNIT",
  "cf_units._NO_UNIT_STRING",
  "cf_units._NO_UNIT_SYMBOL",
  "cf_units._OP_SINCE",
  "cf_units._OrderedHashable",
  "cf_units._UNIT_DIMENSIONLESS",
  "cf_units._UNKNOWN_UNIT",
  "cf_units._UNKNOWN_UNIT_STRING",
  "cf_units._UNKNOWN_UNIT_SYMBOL",
  "cf_units._Unit",
  "cf_units.__all__",
  "cf_units.__version__",
  "cf_units._alt_xml_path",
  "cf_units._cv_convert_array",
  "cf_units._cv_convert_scalar",
  "cf_units._discard_microsecond",
  "cf_units._encoding_lookup",
  "cf_units._num2date_to_nearest_second",
  "cf_units._ud_system",
  "cf_units._udunits2",
  "cf_units._udunits2.UT_ASCII",
  "cf_units._udunits2.UT_DEFINITION",
  "cf_units._udunits2.UT_ISO_8859_1",
  "cf_units._udunits2.UT_LATIN1",
  "cf_units._udunits2.UT_NAMES",
  "cf_units._udunits2.UT_UTF8",
  "cf_units._version",
  "cf_units.approx_equal",
  "cf_units.as_unit",
  "cf_units.config",
  "cf_units.config.CONFIG_PATH",
  "cf_units.config.ROOT_PATH",
  "cf_units.config.config",
  "cf_units.config.get_option",
  "cf_units.date2julian_day",
  "cf_units.date2num",
  "cf_units.decode_time",
  "cf_units.e",
  "cf_units.encode_clock",
  "cf_units.encode_date",
  "cf_units.encode_time",
  "cf_units.error_msg",
  "cf_units.is_time",
  "cf_units.is_vertical",
  "cf_units.julian_day2date",
  "cf_units.num2date",
  "cf_units.suppress_errors",
  "cf_units.tests",
  "cf_units.tests.integration",
  "cf_units.tests.integration.test__num2date_to_nearest_second",
  "cf_units.tests.integration.test__num2date_to_nearest_second.Test",
  "cf_units.tests.integration.test__num2date_to_nearest_second.Unit",
  "cf_units.tests.integration.test__num2date_to_nearest_second._num2date_to_nearest_second",
  "cf_units.tests.integration.test_date2num",
  "cf_units.tests.integration.test_date2num.Test",
  "cf_units.tests.integration.test_date2num.Unit",
  "cf_units.tests.integration.test_date2num.date2num",
  "cf_units.tests.test_coding_standards",
  "cf_units.tests.test_coding_standards.DIR",
  "cf_units.tests.test_coding_standards.DOCS_DIR",
  "cf_units.tests.test_coding_standards.DOCS_DIRS",
  "cf_units.tests.test_coding_standards.LICENSE_RE",
  "cf_units.tests.test_coding_standards.LICENSE_RE_PATTERN",
  "cf_units.tests.test_coding_standards.LICENSE_TEMPLATE",
  "cf_units.tests.test_coding_standards.REPO_DIR",
  "cf_units.tests.test_coding_standards.StandardReportWithExclusions",
  "cf_units.tests.test_coding_standards.TestCodeFormat",
  "cf_units.tests.test_coding_standards.TestFutureImports",
  "cf_units.tests.test_coding_standards.TestLicenseHeaders",
  "cf_units.tests.test_coding_standards.exclusion",
  "cf_units.tests.test_unit",
  "cf_units.tests.test_unit.TestNumsAndDates",
  "cf_units.tests.test_unit.TestTimeEncoding",
  "cf_units.tests.test_unit.Test__apply_offset",
  "cf_units.tests.test_unit.Test__immutable",
  "cf_units.tests.test_unit.Test__inplace",
  "cf_units.tests.test_unit.Test_as_unit",
  "cf_units.tests.test_unit.Test_convert",
  "cf_units.tests.test_unit.Test_copy",
  "cf_units.tests.test_unit.Test_definition",
  "cf_units.tests.test_unit.Test_divide",
  "cf_units.tests.test_unit.Test_equality",
  "cf_units.tests.test_unit.Test_format",
  "cf_units.tests.test_unit.Test_invert",
  "cf_units.tests.test_unit.Test_is_convertible",
  "cf_units.tests.test_unit.Test_is_dimensionless",
  "cf_units.tests.test_unit.Test_is_no_unit",
  "cf_units.tests.test_unit.Test_is_time",
  "cf_units.tests.test_unit.Test_is_udunits",
  "cf_units.tests.test_unit.Test_is_unknown",
  "cf_units.tests.test_unit.Test_is_vertical",
  "cf_units.tests.test_unit.Test_log",
  "cf_units.tests.test_unit.Test_modulus",
  "cf_units.tests.test_unit.Test_multiply",
  "cf_units.tests.test_unit.Test_name",
  "cf_units.tests.test_unit.Test_non_equality",
  "cf_units.tests.test_unit.Test_offset_by_time",
  "cf_units.tests.test_unit.Test_order",
  "cf_units.tests.test_unit.Test_power",
  "cf_units.tests.test_unit.Test_root",
  "cf_units.tests.test_unit.Test_stringify",
  "cf_units.tests.test_unit.Test_symbol",
  "cf_units.tests.test_unit.Test_title",
  "cf_units.tests.test_unit.Test_unit__creation",
  "cf_units.tests.test_unit.Unit",
  "cf_units.tests.unit",
  "cf_units.tests.unit.test__udunits2",
  "cf_units.tests.unit.test__udunits2.Test_convert",
  "cf_units.tests.unit.test__udunits2.Test_get_system",
  "cf_units.tests.unit.test__udunits2.Test_system",
  "cf_units.tests.unit.test__udunits2.Test_time_encoding",
  "cf_units.tests.unit.test__udunits2.Test_unit",
  "cf_units.tests.unit.test__udunits2._udunits2",
  "cf_units.util",
  "cf_units.util._MetaOrderedHashable",
  "cf_units.util._OrderedHashable",
  "cf_units.util.approx_equal"
 ]
}