{
 "errors": {
  "billiard.popen_spawn_posix": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "billiard.spawn": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/os/__init__.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in values",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in <listcomp>",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 294, in follow",
    "    sys_path = self._sys_path_with_modifications(is_completion=False)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 243, in _sys_path_with_modifications",
    "    in sys_path.check_sys_path_modifications(self._module_context)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/sys_path.py\", line 130, in check_sys_path_modifications",
    "    module_context, *power.children[2:4]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/sys_path.py\", line 91, in _paths_from_list_modifications",
    "    for value in module_context.create_context(arg).infer_node(arg):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  }
 },
 "symbols": [
  "billiard.SUBDEBUG",
  "billiard.SUBWARNING",
  "billiard.VERSION",
  "billiard.__all__",
  "billiard.__author__",
  "billiard.__author_email__",
  "billiard.__contact__",
  "billiard.__docformat__",
  "billiard.__homepage__",
  "billiard.__maintainer__",
  "billiard.__version__",
  "billiard._ext",
  "billiard._ext.ensure_SemLock",
  "billiard._ext.ensure_multiprocessing",
  "billiard._ext.supports_exec",
  "billiard._win",
  "billiard._win.CreateToolhelp32Snapshot",
  "billiard._win.ERROR_NO_MORE_FILES",
  "billiard._win.INVALID_HANDLE_VALUE",
  "billiard._win.LPPROCESSENTRY32",
  "billiard._win.PROCESSENTRY32",
  "billiard._win.Process32First",
  "billiard._win.Process32Next",
  "billiard._win._Process32n",
  "billiard._win.get_all_processes_pids",
  "billiard._win.get_processtree_pids",
  "billiard._win.kill_processtree",
  "billiard.common",
  "billiard.common.EX_SOFTWARE",
  "billiard.common.REMAP_SIGTERM",
  "billiard.common.SIGMAP",
  "billiard.common.TERMSIGS_DEFAULT",
  "billiard.common.TERMSIGS_FORCE",
  "billiard.common.TERMSIGS_FULL",
  "billiard.common.TERMSIGS_IGNORE",
  "billiard.common.TERM_SIGNAL",
  "billiard.common.TERM_SIGNAME",
  "billiard.common._alias_sig",
  "billiard.common._should_have_exited",
  "billiard.common._should_override_term_signal",
  "billiard.common._shutdown_cleanup",
  "billiard.common.cpickle",
  "billiard.common.human_status",
  "billiard.common.maybe_setsignal",
  "billiard.common.pickle",
  "billiard.common.pickle_load",
  "billiard.common.pickle_loads",
  "billiard.common.reset_signals",
  "billiard.common.restart_state",
  "billiard.common.signum",
  "billiard.compat",
  "billiard.compat.E_PSUTIL_MISSING",
  "billiard.compat.E_RESOURCE_MISSING",
  "billiard.compat.FILENO_ERRORS",
  "billiard.compat.RUSAGE_SELF",
  "billiard.compat.__write__",
  "billiard.compat._bytes",
  "billiard.compat._winapi",
  "billiard.compat.buf_t",
  "billiard.compat.bytes",
  "billiard.compat.close_open_fds",
  "billiard.compat.closerange",
  "billiard.compat.fsdecode",
  "billiard.compat.fsencode",
  "billiard.compat.get_errno",
  "billiard.compat.get_fdmax",
  "billiard.compat.getrusage",
  "billiard.compat.is_new_buffer",
  "billiard.compat.isblocking",
  "billiard.compat.maxrss_to_kb",
  "billiard.compat.maybe_fileno",
  "billiard.compat.mem_rss",
  "billiard.compat.resource",
  "billiard.compat.send_offset",
  "billiard.compat.setblocking",
  "billiard.compat.spawnv_passfds",
  "billiard.compat.uniq",
  "billiard.connection",
  "billiard.connection.BUFSIZE",
  "billiard.connection.CHALLENGE",
  "billiard.connection.CONNECTION_TIMEOUT",
  "billiard.connection.Client",
  "billiard.connection.Connection",
  "billiard.connection.FAILURE",
  "billiard.connection.INFINITE",
  "billiard.connection.Listener",
  "billiard.connection.MESSAGE_LENGTH",
  "billiard.connection.Pipe",
  "billiard.connection.SocketClient",
  "billiard.connection.SocketListener",
  "billiard.connection.WAIT_ABANDONED_0",
  "billiard.connection.WAIT_OBJECT_0",
  "billiard.connection.WAIT_TIMEOUT",
  "billiard.connection.WELCOME",
  "billiard.connection.XmlClient",
  "billiard.connection.XmlListener",
  "billiard.connection._ConnectionBase",
  "billiard.connection._SocketContainer",
  "billiard.connection.__all__",
  "billiard.connection._check_timeout",
  "billiard.connection._exhaustive_wait",
  "billiard.connection._init_timeout",
  "billiard.connection._mmap_counter",
  "billiard.connection._poll",
  "billiard.connection._ready_errors",
  "billiard.connection._validate_family",
  "billiard.connection._winapi",
  "billiard.connection._xml_dumps",
  "billiard.connection._xml_loads",
  "billiard.connection.address_type",
  "billiard.connection.answer_challenge",
  "billiard.connection.arbitrary_address",
  "billiard.connection.default_family",
  "billiard.connection.deliver_challenge",
  "billiard.connection.detach",
  "billiard.connection.families",
  "billiard.connection.is_pypy",
  "billiard.connection.rebuild_connection",
  "billiard.connection.rebuild_pipe_connection",
  "billiard.connection.reduce_connection",
  "billiard.connection.reduce_pipe_connection",
  "billiard.connection.wait",
  "billiard.connection.xmlrpclib",
  "billiard.context",
  "billiard.context.BaseContext",
  "billiard.context.DefaultContext",
  "billiard.context.ForkContext",
  "billiard.context.ForkProcess",
  "billiard.context.ForkServerContext",
  "billiard.context.ForkServerProcess",
  "billiard.context.Process",
  "billiard.context.SpawnContext",
  "billiard.context.SpawnProcess",
  "billiard.context.W_NO_EXECV",
  "billiard.context.__all__",
  "billiard.context._concrete_contexts",
  "billiard.context._default_context",
  "billiard.context._force_start_method",
  "billiard.context._tls",
  "billiard.context.assert_spawning",
  "billiard.context.get_spawning_popen",
  "billiard.context.set_spawning_popen",
  "billiard.dummy",
  "billiard.dummy.Array",
  "billiard.dummy.Condition",
  "billiard.dummy.DummyProcess",
  "billiard.dummy.JoinableQueue",
  "billiard.dummy.Manager",
  "billiard.dummy.Namespace",
  "billiard.dummy.Pipe",
  "billiard.dummy.Pool",
  "billiard.dummy.Process",
  "billiard.dummy.Queue",
  "billiard.dummy.Value",
  "billiard.dummy._Condition",
  "billiard.dummy.__all__",
  "billiard.dummy.active_children",
  "billiard.dummy.connection",
  "billiard.dummy.connection.Client",
  "billiard.dummy.connection.Connection",
  "billiard.dummy.connection.Listener",
  "billiard.dummy.connection.Pipe",
  "billiard.dummy.connection.Queue",
  "billiard.dummy.connection.__all__",
  "billiard.dummy.connection.families",
  "billiard.dummy.current_process",
  "billiard.dummy.dict",
  "billiard.dummy.freeze_support",
  "billiard.dummy.list",
  "billiard.dummy.shutdown",
  "billiard.einfo",
  "billiard.einfo.DEFAULT_MAX_FRAMES",
  "billiard.einfo.ExceptionInfo",
  "billiard.einfo.Traceback",
  "billiard.einfo._Code",
  "billiard.einfo._Frame",
  "billiard.einfo._Object",
  "billiard.einfo._Truncated",
  "billiard.einfo.__all__",
  "billiard.ensure_multiprocessing",
  "billiard.ensure_multiprocessing.ensure_multiprocessing",
  "billiard.exceptions",
  "billiard.exceptions.AuthenticationError",
  "billiard.exceptions.BufferTooShort",
  "billiard.exceptions.CoroStop",
  "billiard.exceptions.ProcessError",
  "billiard.exceptions.RestartFreqExceeded",
  "billiard.exceptions.SoftTimeLimitExceeded",
  "billiard.exceptions.Terminated",
  "billiard.exceptions.TimeLimitExceeded",
  "billiard.exceptions.TimeoutError",
  "billiard.exceptions.WorkerLostError",
  "billiard.five",
  "billiard.five.BytesIO",
  "billiard.five.CLOCK_MONOTONIC",
  "billiard.five.CoreServices",
  "billiard.five.PY3",
  "billiard.five.Queue",
  "billiard.five.WhateverIO",
  "billiard.five.absolute_to_nanoseconds",
  "billiard.five.clock_gettime",
  "billiard.five.exec_",
  "billiard.five.int_types",
  "billiard.five.items",
  "billiard.five.keys",
  "billiard.five.libSystem",
  "billiard.five.librt",
  "billiard.five.long_t",
  "billiard.five.mach_absolute_time",
  "billiard.five.monotonic",
  "billiard.five.nextfun",
  "billiard.five.range",
  "billiard.five.reraise",
  "billiard.five.string",
  "billiard.five.string_t",
  "billiard.five.text_t",
  "billiard.five.timespec",
  "billiard.five.values",
  "billiard.five.with_metaclass",
  "billiard.forkserver",
  "billiard.forkserver.ForkServer",
  "billiard.forkserver.MAXFDS_TO_SEND",
  "billiard.forkserver.UNSIGNED_STRUCT",
  "billiard.forkserver.__all__",
  "billiard.forkserver.__unpack_fds",
  "billiard.forkserver._forkserver",
  "billiard.forkserver._serve_one",
  "billiard.forkserver.connect_to_new_process",
  "billiard.forkserver.ensure_running",
  "billiard.forkserver.get_inherited_fds",
  "billiard.forkserver.main",
  "billiard.forkserver.read_unsigned",
  "billiard.forkserver.set_forkserver_preload",
  "billiard.forkserver.write_unsigned",
  "billiard.heap",
  "billiard.heap.Arena",
  "billiard.heap.BufferWrapper",
  "billiard.heap.Heap",
  "billiard.heap.PY3",
  "billiard.heap.__all__",
  "billiard.heap.rebuild_arena",
  "billiard.heap.reduce_arena",
  "billiard.managers",
  "billiard.managers.AcquirerProxy",
  "billiard.managers.Array",
  "billiard.managers.AutoProxy",
  "billiard.managers.BarrierProxy",
  "billiard.managers.BaseListProxy",
  "billiard.managers.BaseManager",
  "billiard.managers.BasePoolProxy",
  "billiard.managers.BaseProxy",
  "billiard.managers.ConditionProxy",
  "billiard.managers.DictProxy",
  "billiard.managers.EventProxy",
  "billiard.managers.IteratorProxy",
  "billiard.managers.ListProxy",
  "billiard.managers.MakeProxyType",
  "billiard.managers.Namespace",
  "billiard.managers.PY3",
  "billiard.managers.PoolProxy",
  "billiard.managers.ProcessLocalSet",
  "billiard.managers.RebuildProxy",
  "billiard.managers.RemoteError",
  "billiard.managers.Server",
  "billiard.managers.State",
  "billiard.managers.SyncManager",
  "billiard.managers.Token",
  "billiard.managers.Value",
  "billiard.managers._ArrayProxy_Attributes",
  "billiard.managers._ListProxy_Attributes",
  "billiard.managers.__all__",
  "billiard.managers.all_methods",
  "billiard.managers.convert_to_error",
  "billiard.managers.dispatch",
  "billiard.managers.listener_client",
  "billiard.managers.public_methods",
  "billiard.managers.rebuild_as_list",
  "billiard.managers.reduce_array",
  "billiard.managers.view_type",
  "billiard.managers.view_types",
  "billiard.pool",
  "billiard.pool.ACK",
  "billiard.pool.ApplyResult",
  "billiard.pool.CLOSE",
  "billiard.pool.DEATH",
  "billiard.pool.EX_FAILURE",
  "billiard.pool.EX_OK",
  "billiard.pool.EX_RECYCLE",
  "billiard.pool.IMapIterator",
  "billiard.pool.IMapUnorderedIterator",
  "billiard.pool.LOST_WORKER_TIMEOUT",
  "billiard.pool.LaxBoundedSemaphore",
  "billiard.pool.Lock",
  "billiard.pool.MAXMEM_USED_FMT",
  "billiard.pool.MapResult",
  "billiard.pool.MaybeEncodingError",
  "billiard.pool.NACK",
  "billiard.pool.PY3",
  "billiard.pool.Pool",
  "billiard.pool.READY",
  "billiard.pool.RUN",
  "billiard.pool.ResultHandler",
  "billiard.pool.SIGKILL",
  "billiard.pool.SIG_SOFT_TIMEOUT",
  "billiard.pool.Supervisor",
  "billiard.pool.TASK",
  "billiard.pool.TERMINATE",
  "billiard.pool.TIMEOUT_MAX",
  "billiard.pool.TaskHandler",
  "billiard.pool.ThreadPool",
  "billiard.pool.TimeoutHandler",
  "billiard.pool.Worker",
  "billiard.pool._Semaphore",
  "billiard.pool._get_send_offset",
  "billiard.pool.error",
  "billiard.pool.job_counter",
  "billiard.pool.mapstar",
  "billiard.pool.soft_timeout_sighandler",
  "billiard.pool.starmapstar",
  "billiard.pool.stop_if_not_current",
  "billiard.popen_fork",
  "billiard.popen_fork.Popen",
  "billiard.popen_fork.Popen.method",
  "billiard.popen_fork.Popen.sentinel",
  "billiard.popen_fork.__all__",
  "billiard.popen_forkserver",
  "billiard.popen_forkserver.Popen",
  "billiard.popen_forkserver._DupFd",
  "billiard.popen_forkserver.__all__",
  "billiard.popen_forkserver.method",
  "billiard.popen_forkserver.sentinel",
  "billiard.popen_spawn_posix",
  "billiard.popen_spawn_win32",
  "billiard.popen_spawn_win32.Popen",
  "billiard.popen_spawn_win32.TERMINATE",
  "billiard.popen_spawn_win32.WINEXE",
  "billiard.popen_spawn_win32.WINSERVICE",
  "billiard.popen_spawn_win32.__all__",
  "billiard.process",
  "billiard.process.AuthenticationString",
  "billiard.process.BaseProcess",
  "billiard.process.ORIGINAL_DIR",
  "billiard.process.Process",
  "billiard.process.__all__",
  "billiard.process._children",
  "billiard.process._cleanup",
  "billiard.process._current_process",
  "billiard.process._dangling",
  "billiard.process._exitcode_to_name",
  "billiard.process._maybe_flush",
  "billiard.process._process_counter",
  "billiard.process._set_current_process",
  "billiard.process.active_children",
  "billiard.process.current_process",
  "billiard.process.name",
  "billiard.process.signum",
  "billiard.queues",
  "billiard.queues.JoinableQueue",
  "billiard.queues.Queue",
  "billiard.queues.SimpleQueue",
  "billiard.queues._SimpleQueue",
  "billiard.queues.__all__",
  "billiard.queues._sentinel",
  "billiard.reduction",
  "billiard.reduction.ACKNOWLEDGE",
  "billiard.reduction.DupFd",
  "billiard.reduction.DupHandle",
  "billiard.reduction.ForkingPickler",
  "billiard.reduction.HAVE_SEND_HANDLE",
  "billiard.reduction.PY3",
  "billiard.reduction._C",
  "billiard.reduction.__all__",
  "billiard.reduction._rebuild_partial",
  "billiard.reduction._rebuild_socket",
  "billiard.reduction._reduce_method",
  "billiard.reduction._reduce_partial",
  "billiard.reduction._reduce_socket",
  "billiard.reduction.dump",
  "billiard.reduction.duplicate",
  "billiard.reduction.recv_handle",
  "billiard.reduction.recvfds",
  "billiard.reduction.register",
  "billiard.reduction.send_handle",
  "billiard.reduction.sendfds",
  "billiard.reduction.steal_handle",
  "billiard.resource_sharer",
  "billiard.resource_sharer.DupFd",
  "billiard.resource_sharer.DupSocket",
  "billiard.resource_sharer._ResourceSharer",
  "billiard.resource_sharer.__all__",
  "billiard.resource_sharer._resource_sharer",
  "billiard.resource_sharer.stop",
  "billiard.semaphore_tracker",
  "billiard.semaphore_tracker.SemaphoreTracker",
  "billiard.semaphore_tracker.__all__",
  "billiard.semaphore_tracker._semaphore_tracker",
  "billiard.semaphore_tracker.ensure_running",
  "billiard.semaphore_tracker.getfd",
  "billiard.semaphore_tracker.main",
  "billiard.semaphore_tracker.register",
  "billiard.semaphore_tracker.unregister",
  "billiard.sharedctypes",
  "billiard.sharedctypes.Array",
  "billiard.sharedctypes.PY3",
  "billiard.sharedctypes.RawArray",
  "billiard.sharedctypes.RawValue",
  "billiard.sharedctypes.Synchronized",
  "billiard.sharedctypes.Value",
  "billiard.sharedctypes.__all__",
  "billiard.sharedctypes._new_value",
  "billiard.sharedctypes.class_cache",
  "billiard.sharedctypes.copy",
  "billiard.sharedctypes.make_property",
  "billiard.sharedctypes.prop_cache",
  "billiard.sharedctypes.rebuild_ctype",
  "billiard.sharedctypes.reduce_ctype",
  "billiard.sharedctypes.synchronized",
  "billiard.sharedctypes.template",
  "billiard.sharedctypes.typecode_to_type",
  "billiard.spawn",
  "billiard.synchronize",
  "billiard.synchronize.Barrier",
  "billiard.synchronize.BoundedSemaphore",
  "billiard.synchronize.Condition",
  "billiard.synchronize.Event",
  "billiard.synchronize.Lock",
  "billiard.synchronize.RECURSIVE_MUTEX",
  "billiard.synchronize.RLock",
  "billiard.synchronize.SEMAPHORE",
  "billiard.synchronize.SEM_VALUE_MAX",
  "billiard.synchronize.SemLock",
  "billiard.synchronize.Semaphore",
  "billiard.synchronize.__all__",
  "billiard.synchronize._semname",
  "billiard.synchronize.sem_unlink",
  "billiard.util",
  "billiard.util.DEBUG",
  "billiard.util.DEFAULT_LOGGING_FORMAT",
  "billiard.util.ERROR",
  "billiard.util.INFO",
  "billiard.util.LOGGER_NAME",
  "billiard.util.NOTSET",
  "billiard.util.SUBDEBUG",
  "billiard.util.SUBWARNING",
  "billiard.util.__all__",
  "billiard.util._args_from_interpreter_flags",
  "billiard.util._eintr_retry",
  "billiard.util._log_to_stderr",
  "billiard.util._logger",
  "billiard.util.debug",
  "billiard.util.error",
  "billiard.util.get_logger",
  "billiard.util.info",
  "billiard.util.log_to_stderr",
  "billiard.util.sub_debug",
  "billiard.util.sub_warning"
 ]
}