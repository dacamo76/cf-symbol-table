{
 "errors": {
  "spacy.scorer": {
   "exception": "pickle data was truncated",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for token in tokens:             if token.orth_.isspace():                 continue             gold_i = gold.cand_to_gold[token.i]             if gold_i is None:                 if token.dep_.lower() not in punct_labels:                     self.tokens.fp += 1             else:                 self.tokens.tp += 1                 cand_tags.add((gold_i, token.tag_))             if token.dep_.lower() not in punct_labels and token.orth_.strip():                 gold_head = gold.cand_to_gold[token.head.i]                 # None is indistinct, so we can't just add it to the set                 # Multiple (None, None) deps are possible                 if gold_i is None or gold_head is None:                     self.unlabelled.fp += 1                     self.labelled.fp += 1                 else:                     cand_deps.add((gold_i, gold_head, token.dep_.lower()))@94,8>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for doc, gold in zip(docs, golds):                 for process in self.nlp.pipeline:                     process(doc)                 scorer.score(doc, gold)@59,12>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 731, in tree_name_to_values",
    "    cn.infer(),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 375, in infer",
    "    return self.context.infer_node(self.node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 731, in tree_name_to_values",
    "    cn.infer(),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 375, in infer",
    "    return self.context.infer_node(self.node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 648, in infer",
    "    inferred = super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 746, in tree_name_to_values",
    "    types = _apply_decorators(context, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 788, in _apply_decorators",
    "    dec_values = context.infer_node(dec.children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: pickle data was truncated",
    ""
   ]
  }
 },
 "symbols": [
  "spacy.__version__",
  "spacy.about",
  "spacy.about.__author__",
  "spacy.about.__email__",
  "spacy.about.__license__",
  "spacy.about.__models__",
  "spacy.about.__summary__",
  "spacy.about.__title__",
  "spacy.about.__uri__",
  "spacy.about.__version__",
  "spacy.attrs.DEP",
  "spacy.attrs.ENT_IOB",
  "spacy.attrs.ENT_TYPE",
  "spacy.attrs.FLAG63",
  "spacy.attrs.HEAD",
  "spacy.attrs.IS_ALPHA",
  "spacy.attrs.LEMMA",
  "spacy.attrs.LOWER",
  "spacy.attrs.ORTH",
  "spacy.attrs.PROB",
  "spacy.attrs.SPACY",
  "spacy.attrs.TAG",
  "spacy.basestring",
  "spacy.de",
  "spacy.de.German",
  "spacy.de.STOP_WORDS",
  "spacy.de.TAG_MAP",
  "spacy.de.TOKENIZER_EXCEPTIONS",
  "spacy.de.__all__",
  "spacy.de.download",
  "spacy.de.download.main",
  "spacy.de.entity_features",
  "spacy.de.infixes",
  "spacy.de.language_data",
  "spacy.de.language_data.STOP_WORDS",
  "spacy.de.language_data.TAG_MAP",
  "spacy.de.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.de.language_data.__all__",
  "spacy.de.lemma_rules",
  "spacy.de.parser_features",
  "spacy.de.prefixes",
  "spacy.de.stop_words.STOP_WORDS",
  "spacy.de.suffixes",
  "spacy.de.tag_map.TAG_MAP",
  "spacy.de.tagger_features",
  "spacy.de.token_match",
  "spacy.de.tokenizer_exceptions.ORTH_ONLY",
  "spacy.de.tokenizer_exceptions.TOKENIZER_EXCEPTIONS",
  "spacy.deprecated",
  "spacy.deprecated.align_tokens",
  "spacy.deprecated.detokenize",
  "spacy.deprecated.get_package",
  "spacy.deprecated.read_lang_data",
  "spacy.download",
  "spacy.download.download",
  "spacy.en",
  "spacy.en.English",
  "spacy.en.STOP_WORDS",
  "spacy.en.TAG_MAP",
  "spacy.en.TOKENIZER_EXCEPTIONS",
  "spacy.en.__all__",
  "spacy.en._fix_deprecated_glove_vectors_loading",
  "spacy.en.download",
  "spacy.en.download.main",
  "spacy.en.get_time_exc",
  "spacy.en.language_data",
  "spacy.en.language_data.STOP_WORDS",
  "spacy.en.language_data.TAG_MAP",
  "spacy.en.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.en.language_data.__all__",
  "spacy.en.language_data.get_time_exc",
  "spacy.en.lemma_rules",
  "spacy.en.lemma_rules.LEMMA_RULES",
  "spacy.en.morph_rules",
  "spacy.en.morph_rules.MORPH_RULES",
  "spacy.en.stop_words",
  "spacy.en.stop_words.STOP_WORDS",
  "spacy.en.tag_map",
  "spacy.en.tag_map.TAG_MAP",
  "spacy.en.tokenizer_exceptions",
  "spacy.en.tokenizer_exceptions.ABBREVIATIONS",
  "spacy.en.tokenizer_exceptions.EXC",
  "spacy.en.tokenizer_exceptions.EXCLUDE_EXC",
  "spacy.en.tokenizer_exceptions.ORTH_ONLY",
  "spacy.en.tokenizer_exceptions.OTHER",
  "spacy.en.tokenizer_exceptions.TOKENIZER_EXCEPTIONS",
  "spacy.en.tokenizer_exceptions.data",
  "spacy.en.tokenizer_exceptions.data_apos",
  "spacy.en.tokenizer_exceptions.exc_data",
  "spacy.en.tokenizer_exceptions.exc_data_apos",
  "spacy.en.tokenizer_exceptions.exc_data_tc",
  "spacy.en.tokenizer_exceptions.orth",
  "spacy.en.tokenizer_exceptions.pron",
  "spacy.en.tokenizer_exceptions.string",
  "spacy.en.tokenizer_exceptions.verb_data",
  "spacy.en.tokenizer_exceptions.verb_data_tc",
  "spacy.en.tokenizer_exceptions.word",
  "spacy.es",
  "spacy.es.STOP_WORDS",
  "spacy.es.Spanish",
  "spacy.es.TOKENIZER_EXCEPTIONS",
  "spacy.es.__all__",
  "spacy.es.entity_features",
  "spacy.es.get_time_exc",
  "spacy.es.infixes",
  "spacy.es.language_data",
  "spacy.es.language_data.STOP_WORDS",
  "spacy.es.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.es.language_data.__all__",
  "spacy.es.language_data.get_time_exc",
  "spacy.es.lemma_rules",
  "spacy.es.parser_features",
  "spacy.es.prefixes",
  "spacy.es.stop_words.STOP_WORDS",
  "spacy.es.suffixes",
  "spacy.es.tag_map",
  "spacy.es.tagger_features",
  "spacy.es.token_match",
  "spacy.es.tokenizer_exceptions.ORTH_ONLY",
  "spacy.es.tokenizer_exceptions.TOKENIZER_EXCEPTIONS",
  "spacy.fr",
  "spacy.fr.French",
  "spacy.fr.STOP_WORDS",
  "spacy.fr.TOKENIZER_EXCEPTIONS",
  "spacy.fr.__all__",
  "spacy.fr.entity_features",
  "spacy.fr.infixes",
  "spacy.fr.language_data",
  "spacy.fr.language_data.STOP_WORDS",
  "spacy.fr.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.fr.language_data.__all__",
  "spacy.fr.lemma_rules",
  "spacy.fr.parser_features",
  "spacy.fr.prefixes",
  "spacy.fr.stop_words.STOP_WORDS",
  "spacy.fr.suffixes",
  "spacy.fr.tag_map",
  "spacy.fr.tagger_features",
  "spacy.fr.token_match",
  "spacy.get_lang_class",
  "spacy.gold._min_edit_path",
  "spacy.gold.align",
  "spacy.hu",
  "spacy.hu.Hungarian",
  "spacy.hu.STOP_WORDS",
  "spacy.hu.TOKENIZER_EXCEPTIONS",
  "spacy.hu.TOKENIZER_INFIXES",
  "spacy.hu.TOKENIZER_PREFIXES",
  "spacy.hu.TOKENIZER_SUFFIXES",
  "spacy.hu.__all__",
  "spacy.hu.entity_features",
  "spacy.hu.language_data",
  "spacy.hu.language_data.STOP_WORDS",
  "spacy.hu.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.hu.language_data.TOKENIZER_INFIXES",
  "spacy.hu.language_data.TOKENIZER_PREFIXES",
  "spacy.hu.language_data.TOKENIZER_SUFFIXES",
  "spacy.hu.language_data.__all__",
  "spacy.hu.language_data.strings_to_exc",
  "spacy.hu.language_data.update_exc",
  "spacy.hu.lemma_rules",
  "spacy.hu.parser_features",
  "spacy.hu.punctuation",
  "spacy.hu.punctuation.TOKENIZER_INFIXES",
  "spacy.hu.punctuation.TOKENIZER_SUFFIXES",
  "spacy.hu.punctuation.__all__",
  "spacy.hu.stop_words.STOP_WORDS",
  "spacy.hu.strings_to_exc",
  "spacy.hu.tag_map",
  "spacy.hu.tagger_features",
  "spacy.hu.token_match",
  "spacy.hu.tokenizer_exceptions.ABBREVIATIONS",
  "spacy.hu.tokenizer_exceptions.OTHER_EXC",
  "spacy.hu.update_exc",
  "spacy.it",
  "spacy.it.Italian",
  "spacy.it.STOP_WORDS",
  "spacy.it.TOKENIZER_EXCEPTIONS",
  "spacy.it.__all__",
  "spacy.it.entity_features",
  "spacy.it.infixes",
  "spacy.it.language_data",
  "spacy.it.language_data.STOP_WORDS",
  "spacy.it.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.it.language_data.__all__",
  "spacy.it.lemma_rules",
  "spacy.it.parser_features",
  "spacy.it.prefixes",
  "spacy.it.stop_words.STOP_WORDS",
  "spacy.it.suffixes",
  "spacy.it.tag_map",
  "spacy.it.tagger_features",
  "spacy.it.token_match",
  "spacy.language",
  "spacy.language.BaseDefaults",
  "spacy.language.BaseDefaults.entity_features",
  "spacy.language.BaseDefaults.infixes",
  "spacy.language.BaseDefaults.lemma_rules",
  "spacy.language.BaseDefaults.parser_features",
  "spacy.language.BaseDefaults.prefixes",
  "spacy.language.BaseDefaults.suffixes",
  "spacy.language.BaseDefaults.tag_map",
  "spacy.language.BaseDefaults.tagger_features",
  "spacy.language.BaseDefaults.token_match",
  "spacy.language.Language",
  "spacy.language.Language.Defaults",
  "spacy.language.Language.lang",
  "spacy.language.basestring",
  "spacy.language_data",
  "spacy.language_data.ABBREVIATIONS",
  "spacy.language_data.ALPHA",
  "spacy.language_data.ALPHA_LOWER",
  "spacy.language_data.ALPHA_UPPER",
  "spacy.language_data.CURRENCY",
  "spacy.language_data.DET_LEMMA",
  "spacy.language_data.EMOTICONS",
  "spacy.language_data.ENTITY_RULES",
  "spacy.language_data.FALSE_POSITIVES",
  "spacy.language_data.HYPHENS",
  "spacy.language_data.LIST_CURRENCY",
  "spacy.language_data.LIST_ELLIPSES",
  "spacy.language_data.LIST_HYPHENS",
  "spacy.language_data.LIST_PUNCT",
  "spacy.language_data.LIST_QUOTES",
  "spacy.language_data.PRON_LEMMA",
  "spacy.language_data.QUOTES",
  "spacy.language_data.TAG_MAP",
  "spacy.language_data.TOKENIZER_INFIXES",
  "spacy.language_data.TOKENIZER_PREFIXES",
  "spacy.language_data.TOKENIZER_SUFFIXES",
  "spacy.language_data.TOKEN_MATCH",
  "spacy.language_data.UNITS",
  "spacy.language_data._ALPHA_LOWER",
  "spacy.language_data._ALPHA_UPPER",
  "spacy.language_data._CURRENCY",
  "spacy.language_data._HYPHENS",
  "spacy.language_data._PUNCT",
  "spacy.language_data._QUOTES",
  "spacy.language_data._UNITS",
  "spacy.language_data._URL_PATTERN",
  "spacy.language_data.__all__",
  "spacy.language_data._fix_token",
  "spacy.language_data.abbreviations",
  "spacy.language_data.abbreviations.ABBREVIATIONS",
  "spacy.language_data.abbreviations.__all__",
  "spacy.language_data.emoticons",
  "spacy.language_data.emoticons.EMOTICONS",
  "spacy.language_data.emoticons.__all__",
  "spacy.language_data.entity_rules",
  "spacy.language_data.entity_rules.ENTITY_RULES",
  "spacy.language_data.entity_rules.FALSE_POSITIVES",
  "spacy.language_data.entity_rules.__all__",
  "spacy.language_data.expand_exc",
  "spacy.language_data.punctuation",
  "spacy.language_data.punctuation.ALPHA",
  "spacy.language_data.punctuation.ALPHA_LOWER",
  "spacy.language_data.punctuation.ALPHA_UPPER",
  "spacy.language_data.punctuation.CURRENCY",
  "spacy.language_data.punctuation.HYPHENS",
  "spacy.language_data.punctuation.LIST_CURRENCY",
  "spacy.language_data.punctuation.LIST_ELLIPSES",
  "spacy.language_data.punctuation.LIST_HYPHENS",
  "spacy.language_data.punctuation.LIST_PUNCT",
  "spacy.language_data.punctuation.LIST_QUOTES",
  "spacy.language_data.punctuation.QUOTES",
  "spacy.language_data.punctuation.TOKENIZER_INFIXES",
  "spacy.language_data.punctuation.TOKENIZER_PREFIXES",
  "spacy.language_data.punctuation.TOKENIZER_SUFFIXES",
  "spacy.language_data.punctuation.UNITS",
  "spacy.language_data.punctuation._ALPHA_LOWER",
  "spacy.language_data.punctuation._ALPHA_UPPER",
  "spacy.language_data.punctuation._CURRENCY",
  "spacy.language_data.punctuation._HYPHENS",
  "spacy.language_data.punctuation._PUNCT",
  "spacy.language_data.punctuation._QUOTES",
  "spacy.language_data.punctuation._UNITS",
  "spacy.language_data.punctuation.__all__",
  "spacy.language_data.strings_to_exc",
  "spacy.language_data.tag_map",
  "spacy.language_data.tag_map.TAG_MAP",
  "spacy.language_data.tokenizer_exceptions",
  "spacy.language_data.tokenizer_exceptions.TOKEN_MATCH",
  "spacy.language_data.tokenizer_exceptions._URL_PATTERN",
  "spacy.language_data.tokenizer_exceptions.__all__",
  "spacy.language_data.unicode",
  "spacy.language_data.update_exc",
  "spacy.language_data.util",
  "spacy.language_data.util.DET_LEMMA",
  "spacy.language_data.util.ENT_ID",
  "spacy.language_data.util.PRON_LEMMA",
  "spacy.language_data.util._fix_token",
  "spacy.language_data.util.expand_exc",
  "spacy.language_data.util.strings_to_exc",
  "spacy.language_data.util.unicode",
  "spacy.language_data.util.update_exc",
  "spacy.lemmatizer",
  "spacy.lemmatizer.Lemmatizer",
  "spacy.lemmatizer.lemmatize",
  "spacy.lemmatizer.read_exc",
  "spacy.lemmatizer.read_index",
  "spacy.load",
  "spacy.matcher.Matcher",
  "spacy.morphology.Morphology",
  "spacy.multi_words",
  "spacy.multi_words.RegexMerger",
  "spacy.munge",
  "spacy.munge.align_raw",
  "spacy.munge.align_raw._flatten",
  "spacy.munge.align_raw._reform_ptb_word",
  "spacy.munge.align_raw.align_chars",
  "spacy.munge.align_raw.align_section",
  "spacy.munge.align_raw.do_web",
  "spacy.munge.align_raw.do_wsj",
  "spacy.munge.align_raw.get_alignment",
  "spacy.munge.align_raw.get_sections",
  "spacy.munge.align_raw.group_into_files",
  "spacy.munge.align_raw.group_into_paras",
  "spacy.munge.align_raw.main",
  "spacy.munge.align_raw.may_mkdir",
  "spacy.munge.align_raw.read_odc",
  "spacy.munge.align_raw.read_ptb",
  "spacy.munge.align_raw.read_ptb_sec",
  "spacy.munge.align_raw.sgml_extract",
  "spacy.munge.read_conll",
  "spacy.munge.read_conll._is_bad_period",
  "spacy.munge.read_conll._parse_line",
  "spacy.munge.read_conll.parse",
  "spacy.munge.read_conll.split",
  "spacy.munge.read_ner",
  "spacy.munge.read_ner._fix_inner_entities",
  "spacy.munge.read_ner._get_tag",
  "spacy.munge.read_ner._get_text",
  "spacy.munge.read_ner.parse",
  "spacy.munge.read_ner.reform_string",
  "spacy.munge.read_ner.split",
  "spacy.munge.read_ner.tag_re",
  "spacy.munge.read_ner.tags_to_entities",
  "spacy.munge.read_ontonotes",
  "spacy.munge.read_ontonotes._get_one",
  "spacy.munge.read_ontonotes._get_text",
  "spacy.munge.read_ontonotes.datetime_re",
  "spacy.munge.read_ontonotes.docid_re",
  "spacy.munge.read_ontonotes.doctype_re",
  "spacy.munge.read_ontonotes.headline_re",
  "spacy.munge.read_ontonotes.post_re",
  "spacy.munge.read_ontonotes.postdate_re",
  "spacy.munge.read_ontonotes.poster_re",
  "spacy.munge.read_ontonotes.sgml_extract",
  "spacy.munge.read_ontonotes.tag_re",
  "spacy.munge.read_ptb",
  "spacy.munge.read_ptb._is_bad_period",
  "spacy.munge.read_ptb.parse",
  "spacy.munge.read_ptb.split",
  "spacy.nl",
  "spacy.nl.Dutch",
  "spacy.nl.STOP_WORDS",
  "spacy.nl.TOKENIZER_EXCEPTIONS",
  "spacy.nl.__all__",
  "spacy.nl.entity_features",
  "spacy.nl.infixes",
  "spacy.nl.language_data",
  "spacy.nl.language_data.STOP_WORDS",
  "spacy.nl.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.nl.language_data.__all__",
  "spacy.nl.lemma_rules",
  "spacy.nl.parser_features",
  "spacy.nl.prefixes",
  "spacy.nl.stop_words.STOP_WORDS",
  "spacy.nl.suffixes",
  "spacy.nl.tag_map",
  "spacy.nl.tagger_features",
  "spacy.nl.token_match",
  "spacy.orth.is_alpha",
  "spacy.orth.is_ascii",
  "spacy.orth.is_digit",
  "spacy.orth.is_lower",
  "spacy.orth.is_punct",
  "spacy.orth.is_space",
  "spacy.orth.is_title",
  "spacy.orth.is_upper",
  "spacy.orth.like_number",
  "spacy.orth.like_url",
  "spacy.orth.word_shape",
  "spacy.parts_of_speech.NOUN",
  "spacy.parts_of_speech.SPACE",
  "spacy.parts_of_speech.VERB",
  "spacy.pt",
  "spacy.pt.Portuguese",
  "spacy.pt.STOP_WORDS",
  "spacy.pt.TOKENIZER_EXCEPTIONS",
  "spacy.pt.__all__",
  "spacy.pt.entity_features",
  "spacy.pt.infixes",
  "spacy.pt.language_data",
  "spacy.pt.language_data.STOP_WORDS",
  "spacy.pt.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.pt.language_data.__all__",
  "spacy.pt.lemma_rules",
  "spacy.pt.parser_features",
  "spacy.pt.prefixes",
  "spacy.pt.stop_words.STOP_WORDS",
  "spacy.pt.suffixes",
  "spacy.pt.tag_map",
  "spacy.pt.tagger_features",
  "spacy.pt.token_match",
  "spacy.scorer",
  "spacy.serialize",
  "spacy.serialize.bits.BitArray",
  "spacy.serialize.huffman.HuffmanCodec",
  "spacy.serialize.packer.Packer",
  "spacy.serialize.packer._BinaryCodec",
  "spacy.set_lang_class",
  "spacy.strings.StringStore",
  "spacy.sv",
  "spacy.sv.STOP_WORDS",
  "spacy.sv.Swedish",
  "spacy.sv.TOKENIZER_EXCEPTIONS",
  "spacy.sv.__all__",
  "spacy.sv.entity_features",
  "spacy.sv.infixes",
  "spacy.sv.language_data",
  "spacy.sv.language_data.STOP_WORDS",
  "spacy.sv.language_data.TOKENIZER_EXCEPTIONS",
  "spacy.sv.language_data.__all__",
  "spacy.sv.lemma_rules",
  "spacy.sv.morph_rules",
  "spacy.sv.morph_rules.MORPH_RULES",
  "spacy.sv.parser_features",
  "spacy.sv.prefixes",
  "spacy.sv.stop_words.STOP_WORDS",
  "spacy.sv.suffixes",
  "spacy.sv.tag_map",
  "spacy.sv.tagger_features",
  "spacy.sv.token_match",
  "spacy.sv.tokenizer_exceptions.ORTH_ONLY",
  "spacy.sv.tokenizer_exceptions.TOKENIZER_EXCEPTIONS",
  "spacy.symbols.DATE",
  "spacy.symbols.LOC",
  "spacy.syntax",
  "spacy.syntax.util",
  "spacy.syntax.util.Config",
  "spacy.tests",
  "spacy.tests.conftest",
  "spacy.tests.conftest.DE",
  "spacy.tests.conftest.EN",
  "spacy.tests.conftest.LANGUAGES",
  "spacy.tests.conftest.de_tokenizer",
  "spacy.tests.conftest.en_parser",
  "spacy.tests.conftest.en_tokenizer",
  "spacy.tests.conftest.en_vocab",
  "spacy.tests.conftest.hu_tokenizer",
  "spacy.tests.conftest.pytest_addoption",
  "spacy.tests.conftest.pytest_runtest_setup",
  "spacy.tests.conftest.text_file",
  "spacy.tests.conftest.tokenizer",
  "spacy.tests.doc",
  "spacy.tests.doc.test_add_entities",
  "spacy.tests.doc.test_add_entities.test_doc_add_entities_set_ents_iob",
  "spacy.tests.doc.test_array",
  "spacy.tests.doc.test_array.test_doc_array_attr_of_token",
  "spacy.tests.doc.test_array.test_doc_array_dep",
  "spacy.tests.doc.test_array.test_doc_array_tag",
  "spacy.tests.doc.test_doc_api",
  "spacy.tests.doc.test_doc_api.test_doc_api_compare_by_string_position",
  "spacy.tests.doc.test_doc_api.test_doc_api_getitem",
  "spacy.tests.doc.test_doc_api.test_doc_api_has_vector",
  "spacy.tests.doc.test_doc_api.test_doc_api_merge",
  "spacy.tests.doc.test_doc_api.test_doc_api_right_edge",
  "spacy.tests.doc.test_doc_api.test_doc_api_runtime_error",
  "spacy.tests.doc.test_doc_api.test_doc_api_sents_empty_string",
  "spacy.tests.doc.test_doc_api.test_doc_api_serialize",
  "spacy.tests.doc.test_doc_api.test_doc_api_set_ents",
  "spacy.tests.doc.test_noun_chunks",
  "spacy.tests.doc.test_noun_chunks.test_doc_noun_chunks_not_nested",
  "spacy.tests.doc.test_token_api",
  "spacy.tests.doc.test_token_api.test_doc_token_api_ancestors",
  "spacy.tests.doc.test_token_api.test_doc_token_api_flags",
  "spacy.tests.doc.test_token_api.test_doc_token_api_head_setter",
  "spacy.tests.doc.test_token_api.test_doc_token_api_is_properties",
  "spacy.tests.doc.test_token_api.test_doc_token_api_prob_inherited_from_vocab",
  "spacy.tests.doc.test_token_api.test_doc_token_api_str_builtin",
  "spacy.tests.doc.test_token_api.test_doc_token_api_strings",
  "spacy.tests.doc.test_token_api.test_doc_token_api_vectors",
  "spacy.tests.matcher",
  "spacy.tests.matcher.test_entity_id",
  "spacy.tests.matcher.test_entity_id.Doc",
  "spacy.tests.matcher.test_entity_id.Matcher",
  "spacy.tests.matcher.test_entity_id.Vocab",
  "spacy.tests.matcher.test_entity_id.en_vocab",
  "spacy.tests.matcher.test_entity_id.test_add_empty_entity",
  "spacy.tests.matcher.test_entity_id.test_get_entity_attrs",
  "spacy.tests.matcher.test_entity_id.test_get_entity_via_match",
  "spacy.tests.matcher.test_entity_id.test_init_matcher",
  "spacy.tests.matcher.test_matcher_bugfixes",
  "spacy.tests.matcher.test_matcher_bugfixes.DATE",
  "spacy.tests.matcher.test_matcher_bugfixes.ENT_IOB",
  "spacy.tests.matcher.test_matcher_bugfixes.ENT_TYPE",
  "spacy.tests.matcher.test_matcher_bugfixes.FLAG63",
  "spacy.tests.matcher.test_matcher_bugfixes.IS_ALPHA",
  "spacy.tests.matcher.test_matcher_bugfixes.LOC",
  "spacy.tests.matcher.test_matcher_bugfixes.LOWER",
  "spacy.tests.matcher.test_matcher_bugfixes.Matcher",
  "spacy.tests.matcher.test_matcher_bugfixes.ORTH",
  "spacy.tests.matcher.test_matcher_bugfixes.TAG",
  "spacy.tests.matcher.test_matcher_bugfixes.test_overlap_issue118",
  "spacy.tests.matcher.test_matcher_bugfixes.test_overlap_issue242",
  "spacy.tests.matcher.test_matcher_bugfixes.test_overlap_prefix",
  "spacy.tests.matcher.test_matcher_bugfixes.test_overlap_reorder",
  "spacy.tests.morphology",
  "spacy.tests.morphology.test_morphology_pickle",
  "spacy.tests.morphology.test_morphology_pickle.Lemmatizer",
  "spacy.tests.morphology.test_morphology_pickle.Morphology",
  "spacy.tests.morphology.test_morphology_pickle.StringStore",
  "spacy.tests.morphology.test_morphology_pickle.test_pickle",
  "spacy.tests.munge",
  "spacy.tests.munge.test_align",
  "spacy.tests.munge.test_align.align_tokens",
  "spacy.tests.munge.test_align.test_align_continue",
  "spacy.tests.munge.test_align.test_hyphen_align",
  "spacy.tests.munge.test_align.test_perfect_align",
  "spacy.tests.munge.test_bad_periods",
  "spacy.tests.munge.test_bad_periods.hongbin_example",
  "spacy.tests.munge.test_bad_periods.test_hongbin",
  "spacy.tests.munge.test_detokenize",
  "spacy.tests.munge.test_detokenize.detokenize",
  "spacy.tests.munge.test_detokenize.test_contractions",
  "spacy.tests.munge.test_detokenize.test_punct",
  "spacy.tests.munge.test_lev_align",
  "spacy.tests.munge.test_lev_align._min_edit_path",
  "spacy.tests.munge.test_lev_align.align",
  "spacy.tests.munge.test_lev_align.test_align",
  "spacy.tests.munge.test_lev_align.test_edit_path",
  "spacy.tests.munge.test_onto_ner",
  "spacy.tests.munge.test_onto_ner._get_tag",
  "spacy.tests.munge.test_onto_ner._get_text",
  "spacy.tests.munge.test_onto_ner.test_get_tag",
  "spacy.tests.munge.test_onto_ner.test_get_text",
  "spacy.tests.parser",
  "spacy.tests.parser.test_ner",
  "spacy.tests.parser.test_ner.LOWER",
  "spacy.tests.parser.test_ner.Matcher",
  "spacy.tests.parser.test_ner.test_consistency_bug",
  "spacy.tests.parser.test_ner.test_simple_types",
  "spacy.tests.parser.test_ner.test_unit_end_gazetteer",
  "spacy.tests.parser.test_nonproj",
  "spacy.tests.parser.test_nonproj.cyclic_tree",
  "spacy.tests.parser.test_nonproj.multirooted_tree",
  "spacy.tests.parser.test_nonproj.partial_tree",
  "spacy.tests.parser.test_nonproj.proj_tree",
  "spacy.tests.parser.test_nonproj.test_parser_ancestors",
  "spacy.tests.parser.test_nonproj.test_parser_contains_cycle",
  "spacy.tests.parser.test_nonproj.test_parser_is_nonproj_arc",
  "spacy.tests.parser.test_nonproj.test_parser_is_nonproj_tree",
  "spacy.tests.parser.test_nonproj.test_parser_pseudoprojectivity",
  "spacy.tests.parser.test_parse",
  "spacy.tests.parser.test_parse.test_parser_arc_eager_finalize_state",
  "spacy.tests.parser.test_parse.test_parser_initial",
  "spacy.tests.parser.test_parse.test_parser_merge_pp",
  "spacy.tests.parser.test_parse.test_parser_parse_one_word_sentence",
  "spacy.tests.parser.test_parse.test_parser_parse_subtrees",
  "spacy.tests.parser.test_parse.test_parser_root",
  "spacy.tests.parser.test_parse_navigate",
  "spacy.tests.parser.test_parse_navigate.test_parser_parse_navigate_child_consistency",
  "spacy.tests.parser.test_parse_navigate.test_parser_parse_navigate_consistency",
  "spacy.tests.parser.test_parse_navigate.test_parser_parse_navigate_edges",
  "spacy.tests.parser.test_sbd",
  "spacy.tests.parser.test_sbd.test_parser_sbd_serialization_projective",
  "spacy.tests.parser.test_sbd.test_parser_sbd_single_punct",
  "spacy.tests.parser.test_sbd.test_parser_sentence_breaks",
  "spacy.tests.parser.test_space_attachment",
  "spacy.tests.parser.test_space_attachment.test_parser_sentence_space",
  "spacy.tests.parser.test_space_attachment.test_parser_space_attachment",
  "spacy.tests.prag_sbd",
  "spacy.tests.prag_sbd.EN",
  "spacy.tests.prag_sbd.English",
  "spacy.tests.prag_sbd.get_sent_strings",
  "spacy.tests.prag_sbd.test_gr1",
  "spacy.tests.prag_sbd.test_gr2",
  "spacy.tests.prag_sbd.test_gr3",
  "spacy.tests.prag_sbd.test_gr4",
  "spacy.tests.prag_sbd.test_gr5",
  "spacy.tests.prag_sbd.test_gr6",
  "spacy.tests.prag_sbd.test_gr7",
  "spacy.tests.prag_sbd.test_gr8",
  "spacy.tests.prag_sbd.test_gr9",
  "spacy.tests.serialize",
  "spacy.tests.serialize.test_codecs",
  "spacy.tests.serialize.test_codecs.BitArray",
  "spacy.tests.serialize.test_codecs.HuffmanCodec",
  "spacy.tests.serialize.test_codecs.Vocab",
  "spacy.tests.serialize.test_codecs._BinaryCodec",
  "spacy.tests.serialize.test_codecs.test_attribute",
  "spacy.tests.serialize.test_codecs.test_binary",
  "spacy.tests.serialize.test_codecs.test_vocab_codec",
  "spacy.tests.serialize.test_huffman",
  "spacy.tests.serialize.test_huffman.BitArray",
  "spacy.tests.serialize.test_huffman.HuffmanCodec",
  "spacy.tests.serialize.test_huffman.py_encode",
  "spacy.tests.serialize.test_huffman.test1",
  "spacy.tests.serialize.test_huffman.test_empty",
  "spacy.tests.serialize.test_huffman.test_rosetta",
  "spacy.tests.serialize.test_huffman.test_round_trip",
  "spacy.tests.serialize.test_huffman.test_vocab",
  "spacy.tests.serialize.test_io",
  "spacy.tests.serialize.test_io.Doc",
  "spacy.tests.serialize.test_io.ORTH",
  "spacy.tests.serialize.test_io.Packer",
  "spacy.tests.serialize.test_io.SPACY",
  "spacy.tests.serialize.test_io.test_left_right",
  "spacy.tests.serialize.test_io.test_lemmas",
  "spacy.tests.serialize.test_io.test_read_write",
  "spacy.tests.serialize.test_packer",
  "spacy.tests.serialize.test_packer.BitArray",
  "spacy.tests.serialize.test_packer.DEP",
  "spacy.tests.serialize.test_packer.Doc",
  "spacy.tests.serialize.test_packer.English",
  "spacy.tests.serialize.test_packer.HEAD",
  "spacy.tests.serialize.test_packer.Language",
  "spacy.tests.serialize.test_packer.ORTH",
  "spacy.tests.serialize.test_packer.Packer",
  "spacy.tests.serialize.test_packer.SPACY",
  "spacy.tests.serialize.test_packer.TAG",
  "spacy.tests.serialize.test_packer.Tokenizer",
  "spacy.tests.serialize.test_packer.Vocab",
  "spacy.tests.serialize.test_packer.test_char_packer",
  "spacy.tests.serialize.test_packer.test_packer_annotated",
  "spacy.tests.serialize.test_packer.test_packer_bad_chars",
  "spacy.tests.serialize.test_packer.test_packer_unannotated",
  "spacy.tests.serialize.test_packer.tokenizer",
  "spacy.tests.serialize.test_packer.util",
  "spacy.tests.serialize.test_packer.vocab",
  "spacy.tests.serialize.test_serialization",
  "spacy.tests.serialize.test_serialization.Doc",
  "spacy.tests.serialize.test_serialization.Packer",
  "spacy.tests.serialize.test_serialization.equal",
  "spacy.tests.serialize.test_serialization.test_serialize_after_adding_entity",
  "spacy.tests.serialize.test_serialization.test_serialize_empty_doc",
  "spacy.tests.serialize.test_serialization.test_serialize_tokens",
  "spacy.tests.spans",
  "spacy.tests.spans.test_merge",
  "spacy.tests.spans.test_merge.test_span_np_merges",
  "spacy.tests.spans.test_merge.test_spans_entity_merge",
  "spacy.tests.spans.test_merge.test_spans_merge_heads",
  "spacy.tests.spans.test_merge.test_spans_merge_tokens",
  "spacy.tests.spans.test_merge.test_spans_sentence_update_after_merge",
  "spacy.tests.spans.test_merge.test_spans_subtree_size_check",
  "spacy.tests.spans.test_span",
  "spacy.tests.spans.test_span.Doc",
  "spacy.tests.spans.test_span.English",
  "spacy.tests.spans.test_span.HEAD",
  "spacy.tests.spans.test_span.test_default_sentiment",
  "spacy.tests.spans.test_span.test_override_sentiment",
  "spacy.tests.spans.test_span.test_root",
  "spacy.tests.spans.test_span.test_sent",
  "spacy.tests.tagger",
  "spacy.tests.tagger.test_lemmatizer",
  "spacy.tests.tagger.test_lemmatizer.Lemmatizer",
  "spacy.tests.tagger.test_lemmatizer.lemmatizer",
  "spacy.tests.tagger.test_lemmatizer.path",
  "spacy.tests.tagger.test_lemmatizer.read_exc",
  "spacy.tests.tagger.test_lemmatizer.read_index",
  "spacy.tests.tagger.test_lemmatizer.test_base_form_dive",
  "spacy.tests.tagger.test_lemmatizer.test_base_form_saw",
  "spacy.tests.tagger.test_lemmatizer.test_lemma_assignment",
  "spacy.tests.tagger.test_lemmatizer.test_noun_lemmas",
  "spacy.tests.tagger.test_lemmatizer.test_pickle_lemmatizer",
  "spacy.tests.tagger.test_lemmatizer.test_read_exc",
  "spacy.tests.tagger.test_lemmatizer.test_read_index",
  "spacy.tests.tagger.test_lemmatizer.test_smart_quotes",
  "spacy.tests.tagger.test_lemmatizer.util",
  "spacy.tests.tagger.test_morph_exceptions",
  "spacy.tests.tagger.test_morph_exceptions.test_load_exc",
  "spacy.tests.tagger.test_spaces",
  "spacy.tests.tagger.test_spaces.SPACE",
  "spacy.tests.tagger.test_spaces.tagged",
  "spacy.tests.tagger.test_spaces.test_return_char",
  "spacy.tests.tagger.test_spaces.test_spaces",
  "spacy.tests.tagger.test_tag_names",
  "spacy.tests.tagger.test_tag_names.English",
  "spacy.tests.tagger.test_tag_names.test_tag_names",
  "spacy.tests.test_matcher",
  "spacy.tests.test_matcher.Doc",
  "spacy.tests.test_matcher.English",
  "spacy.tests.test_matcher.LOWER",
  "spacy.tests.test_matcher.StringStore",
  "spacy.tests.test_matcher.Vocab",
  "spacy.tests.test_matcher.matcher",
  "spacy.tests.test_matcher.test_compile",
  "spacy.tests.test_matcher.test_match_end",
  "spacy.tests.test_matcher.test_match_middle",
  "spacy.tests.test_matcher.test_match_multi",
  "spacy.tests.test_matcher.test_match_start",
  "spacy.tests.test_matcher.test_match_zero",
  "spacy.tests.test_matcher.test_no_match",
  "spacy.tests.test_matcher.test_phrase_matcher",
  "spacy.tests.tokenizer",
  "spacy.tests.tokenizer.test_exceptions",
  "spacy.tests.tokenizer.test_exceptions.test_tokenizer_excludes_false_pos_emoticons",
  "spacy.tests.tokenizer.test_exceptions.test_tokenizer_handles_emoticons",
  "spacy.tests.tokenizer.test_tokenizer",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handle_text_from_file",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handles_digits",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handles_long_text",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handles_no_word",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handles_punct",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_handles_single_word",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_keep_urls",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_keeps_email",
  "spacy.tests.tokenizer.test_tokenizer.test_tokenizer_suspected_freeing_strings",
  "spacy.tests.tokenizer.test_urls",
  "spacy.tests.tokenizer.test_urls.PREFIXES",
  "spacy.tests.tokenizer.test_urls.SUFFIXES",
  "spacy.tests.tokenizer.test_urls.URLS",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_prefixed_url",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_simple_surround_url",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_simple_url",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_suffixed_url",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_surround_url",
  "spacy.tests.tokenizer.test_urls.test_tokenizer_handles_two_prefix_url",
  "spacy.tests.tokenizer.test_whitespace",
  "spacy.tests.tokenizer.test_whitespace.test_tokenizer_handles_double_trainling_ws",
  "spacy.tests.tokenizer.test_whitespace.test_tokenizer_splits_double_space",
  "spacy.tests.tokenizer.test_whitespace.test_tokenizer_splits_newline",
  "spacy.tests.tokenizer.test_whitespace.test_tokenizer_splits_single_space",
  "spacy.tests.util",
  "spacy.tests.util.apply_transition_sequence",
  "spacy.tests.util.get_doc",
  "spacy.tests.vectors",
  "spacy.tests.vectors.test_similarity",
  "spacy.tests.vectors.test_similarity.Doc",
  "spacy.tests.vectors.test_similarity.Vocab",
  "spacy.tests.vectors.test_similarity.appleL",
  "spacy.tests.vectors.test_similarity.appleT",
  "spacy.tests.vectors.test_similarity.apple_orange",
  "spacy.tests.vectors.test_similarity.en_vocab",
  "spacy.tests.vectors.test_similarity.get_cosine",
  "spacy.tests.vectors.test_similarity.get_vector",
  "spacy.tests.vectors.test_similarity.orangeL",
  "spacy.tests.vectors.test_similarity.orangeT",
  "spacy.tests.vectors.test_similarity.test_DS_sim",
  "spacy.tests.vectors.test_similarity.test_LL_sim",
  "spacy.tests.vectors.test_similarity.test_TD_sim",
  "spacy.tests.vectors.test_similarity.test_TS_sim",
  "spacy.tests.vectors.test_similarity.test_TT_sim",
  "spacy.tests.vectors.test_vectors",
  "spacy.tests.vectors.test_vectors.test_doc_doc_similarity",
  "spacy.tests.vectors.test_vectors.test_doc_vector",
  "spacy.tests.vectors.test_vectors.test_lexeme_doc_similarity",
  "spacy.tests.vectors.test_vectors.test_lexeme_lexeme_similarity",
  "spacy.tests.vectors.test_vectors.test_lexeme_span_similarity",
  "spacy.tests.vectors.test_vectors.test_lexeme_vector",
  "spacy.tests.vectors.test_vectors.test_span_doc_similarity",
  "spacy.tests.vectors.test_vectors.test_span_span_similarity",
  "spacy.tests.vectors.test_vectors.test_span_vector",
  "spacy.tests.vectors.test_vectors.test_token_doc_similarity",
  "spacy.tests.vectors.test_vectors.test_token_lexeme_similarity",
  "spacy.tests.vectors.test_vectors.test_token_span_similarity",
  "spacy.tests.vectors.test_vectors.test_token_token_similarity",
  "spacy.tests.vectors.test_vectors.test_token_vector",
  "spacy.tests.vocab",
  "spacy.tests.vocab.conftest",
  "spacy.tests.vocab.conftest.en_vocab",
  "spacy.tests.vocab.test_add_vectors",
  "spacy.tests.vocab.test_add_vectors.test_add_vector",
  "spacy.tests.vocab.test_flag_features",
  "spacy.tests.vocab.test_flag_features.is_alpha",
  "spacy.tests.vocab.test_flag_features.is_ascii",
  "spacy.tests.vocab.test_flag_features.is_digit",
  "spacy.tests.vocab.test_flag_features.is_lower",
  "spacy.tests.vocab.test_flag_features.is_punct",
  "spacy.tests.vocab.test_flag_features.is_space",
  "spacy.tests.vocab.test_flag_features.is_title",
  "spacy.tests.vocab.test_flag_features.is_upper",
  "spacy.tests.vocab.test_flag_features.test_is_alpha",
  "spacy.tests.vocab.test_flag_features.test_is_bracket",
  "spacy.tests.vocab.test_flag_features.test_is_digit",
  "spacy.tests.vocab.test_flag_features.test_is_left_bracket",
  "spacy.tests.vocab.test_flag_features.test_is_quote",
  "spacy.tests.vocab.test_flag_features.test_is_right_bracket",
  "spacy.tests.vocab.test_freeze_string_store",
  "spacy.tests.vocab.test_freeze_string_store.test_oov",
  "spacy.tests.vocab.test_intern",
  "spacy.tests.vocab.test_intern.StringStore",
  "spacy.tests.vocab.test_intern.test_254_string",
  "spacy.tests.vocab.test_intern.test_255_string",
  "spacy.tests.vocab.test_intern.test_256_string",
  "spacy.tests.vocab.test_intern.test_dump_load",
  "spacy.tests.vocab.test_intern.test_long_string",
  "spacy.tests.vocab.test_intern.test_massive_strings",
  "spacy.tests.vocab.test_intern.test_med_string",
  "spacy.tests.vocab.test_intern.test_pickle_string_store",
  "spacy.tests.vocab.test_intern.test_retrieve_id",
  "spacy.tests.vocab.test_intern.test_save_bytes",
  "spacy.tests.vocab.test_intern.test_save_unicode",
  "spacy.tests.vocab.test_is_punct",
  "spacy.tests.vocab.test_is_punct.is_punct",
  "spacy.tests.vocab.test_is_punct.test_comma",
  "spacy.tests.vocab.test_is_punct.test_letter",
  "spacy.tests.vocab.test_is_punct.test_space",
  "spacy.tests.vocab.test_lexeme",
  "spacy.tests.vocab.test_lexeme.test_lexeme_eq",
  "spacy.tests.vocab.test_lexeme.test_lexeme_hash",
  "spacy.tests.vocab.test_lexeme.test_lexeme_lt",
  "spacy.tests.vocab.test_lexeme.test_lexeme_neq",
  "spacy.tests.vocab.test_lexeme_flags",
  "spacy.tests.vocab.test_lexeme_flags.test_add_flag_auto_id",
  "spacy.tests.vocab.test_lexeme_flags.test_add_flag_provided_id",
  "spacy.tests.vocab.test_lexeme_flags.test_is_alpha",
  "spacy.tests.vocab.test_lexeme_flags.test_is_digit",
  "spacy.tests.vocab.test_number",
  "spacy.tests.vocab.test_number.like_number",
  "spacy.tests.vocab.test_number.test_comma",
  "spacy.tests.vocab.test_number.test_digits",
  "spacy.tests.vocab.test_number.test_fraction",
  "spacy.tests.vocab.test_number.test_not_number",
  "spacy.tests.vocab.test_number.test_period",
  "spacy.tests.vocab.test_number.test_word",
  "spacy.tests.vocab.test_shape",
  "spacy.tests.vocab.test_shape.test_capitalized",
  "spacy.tests.vocab.test_shape.test_digits",
  "spacy.tests.vocab.test_shape.test_mix",
  "spacy.tests.vocab.test_shape.test_punct",
  "spacy.tests.vocab.test_shape.test_space",
  "spacy.tests.vocab.test_shape.test_truncate",
  "spacy.tests.vocab.test_shape.word_shape",
  "spacy.tests.vocab.test_urlish",
  "spacy.tests.vocab.test_urlish.like_url",
  "spacy.tests.vocab.test_urlish.test_basic_url",
  "spacy.tests.vocab.test_urlish.test_close_enough",
  "spacy.tests.vocab.test_urlish.test_non_match",
  "spacy.tests.vocab.test_vocab",
  "spacy.tests.vocab.test_vocab.IS_ALPHA",
  "spacy.tests.vocab.test_vocab.LEMMA",
  "spacy.tests.vocab.test_vocab.NOUN",
  "spacy.tests.vocab.test_vocab.ORTH",
  "spacy.tests.vocab.test_vocab.PROB",
  "spacy.tests.vocab.test_vocab.VERB",
  "spacy.tests.vocab.test_vocab.test_case_neq",
  "spacy.tests.vocab.test_vocab.test_contains",
  "spacy.tests.vocab.test_vocab.test_eq",
  "spacy.tests.vocab.test_vocab.test_neq",
  "spacy.tests.vocab.test_vocab.test_pickle_vocab",
  "spacy.tests.vocab.test_vocab.test_punct_neq",
  "spacy.tests.vocab.test_vocab.test_shape_attr",
  "spacy.tests.vocab.test_vocab.test_symbols",
  "spacy.tokenizer.Tokenizer",
  "spacy.tokens",
  "spacy.tokens.Doc",
  "spacy.tokens.Span",
  "spacy.tokens.Token",
  "spacy.tokens.__all__",
  "spacy.tokens.doc.Doc",
  "spacy.train",
  "spacy.train.Trainer",
  "spacy.util",
  "spacy.util.LANGUAGES",
  "spacy.util._data_path",
  "spacy.util.basestring",
  "spacy.util.check_renamed_kwargs",
  "spacy.util.compile_infix_regex",
  "spacy.util.compile_prefix_regex",
  "spacy.util.compile_suffix_regex",
  "spacy.util.constraint_match",
  "spacy.util.get_data_path",
  "spacy.util.get_lang_class",
  "spacy.util.match_best_version",
  "spacy.util.normalize_slice",
  "spacy.util.or_",
  "spacy.util.read_regex",
  "spacy.util.set_data_path",
  "spacy.util.set_lang_class",
  "spacy.util.split_data_name",
  "spacy.util.utf8open",
  "spacy.vocab.Vocab",
  "spacy.zh",
  "spacy.zh.Chinese",
  "spacy.zh.Defaults",
  "spacy.zh.lang"
 ]
}