{
 "errors": {},
 "symbols": [
  "transformers.AdamW",
  "transformers.AutoConfig",
  "transformers.AutoModel",
  "transformers.AutoTokenizer",
  "transformers.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.BERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.BasicTokenizer",
  "transformers.BertConfig",
  "transformers.BertEncoder",
  "transformers.BertForMaskedLM",
  "transformers.BertForMultipleChoice",
  "transformers.BertForNextSentencePrediction",
  "transformers.BertForPreTraining",
  "transformers.BertForQuestionAnswering",
  "transformers.BertForSequenceClassification",
  "transformers.BertForTokenClassification",
  "transformers.BertIntermediate",
  "transformers.BertLayer",
  "transformers.BertModel",
  "transformers.BertOutput",
  "transformers.BertPreTrainedModel",
  "transformers.BertSelfAttention",
  "transformers.BertSelfOutput",
  "transformers.BertTokenizer",
  "transformers.CONFIG_NAME",
  "transformers.CTRLConfig",
  "transformers.CTRLLMHeadModel",
  "transformers.CTRLModel",
  "transformers.CTRLPreTrainedModel",
  "transformers.CTRLTokenizer",
  "transformers.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.CTRL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.ConstantLRSchedule",
  "transformers.Conv1D",
  "transformers.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.DISTILBERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.DataProcessor",
  "transformers.DistilBertConfig",
  "transformers.DistilBertForMaskedLM",
  "transformers.DistilBertForQuestionAnswering",
  "transformers.DistilBertForSequenceClassification",
  "transformers.DistilBertModel",
  "transformers.DistilBertTokenizer",
  "transformers.GPT2Config",
  "transformers.GPT2DoubleHeadsModel",
  "transformers.GPT2LMHeadModel",
  "transformers.GPT2Model",
  "transformers.GPT2PreTrainedModel",
  "transformers.GPT2Tokenizer",
  "transformers.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.GPT2_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.InputExample",
  "transformers.InputFeatures",
  "transformers.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.OpenAIGPTConfig",
  "transformers.OpenAIGPTDoubleHeadsModel",
  "transformers.OpenAIGPTLMHeadModel",
  "transformers.OpenAIGPTModel",
  "transformers.OpenAIGPTPreTrainedModel",
  "transformers.OpenAIGPTTokenizer",
  "transformers.PYTORCH_PRETRAINED_BERT_CACHE",
  "transformers.PYTORCH_TRANSFORMERS_CACHE",
  "transformers.PreTrainedModel",
  "transformers.PreTrainedTokenizer",
  "transformers.PretrainedConfig",
  "transformers.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.RobertaConfig",
  "transformers.RobertaEmbeddings",
  "transformers.RobertaForMaskedLM",
  "transformers.RobertaForMultipleChoice",
  "transformers.RobertaForSequenceClassification",
  "transformers.RobertaModel",
  "transformers.RobertaTokenizer",
  "transformers.SPIECE_UNDERLINE",
  "transformers.TF2_WEIGHTS_NAME",
  "transformers.TFAutoModel",
  "transformers.TFBertEmbeddings",
  "transformers.TFBertForMaskedLM",
  "transformers.TFBertForMultipleChoice",
  "transformers.TFBertForNextSentencePrediction",
  "transformers.TFBertForPreTraining",
  "transformers.TFBertForQuestionAnswering",
  "transformers.TFBertForSequenceClassification",
  "transformers.TFBertForTokenClassification",
  "transformers.TFBertMainLayer",
  "transformers.TFBertModel",
  "transformers.TFBertPreTrainedModel",
  "transformers.TFCTRLLMHeadModel",
  "transformers.TFCTRLModel",
  "transformers.TFCTRLPreTrainedModel",
  "transformers.TFDistilBertForMaskedLM",
  "transformers.TFDistilBertForQuestionAnswering",
  "transformers.TFDistilBertForSequenceClassification",
  "transformers.TFDistilBertMainLayer",
  "transformers.TFDistilBertModel",
  "transformers.TFDistilBertPreTrainedModel",
  "transformers.TFGPT2DoubleHeadsModel",
  "transformers.TFGPT2LMHeadModel",
  "transformers.TFGPT2MainLayer",
  "transformers.TFGPT2Model",
  "transformers.TFGPT2PreTrainedModel",
  "transformers.TFOpenAIGPTDoubleHeadsModel",
  "transformers.TFOpenAIGPTLMHeadModel",
  "transformers.TFOpenAIGPTMainLayer",
  "transformers.TFOpenAIGPTModel",
  "transformers.TFOpenAIGPTPreTrainedModel",
  "transformers.TFPreTrainedModel",
  "transformers.TFRobertaForMaskedLM",
  "transformers.TFRobertaForSequenceClassification",
  "transformers.TFRobertaMainLayer",
  "transformers.TFRobertaModel",
  "transformers.TFRobertaPreTrainedModel",
  "transformers.TFSequenceSummary",
  "transformers.TFSharedEmbeddings",
  "transformers.TFTransfoXLLMHeadModel",
  "transformers.TFTransfoXLMainLayer",
  "transformers.TFTransfoXLModel",
  "transformers.TFTransfoXLPreTrainedModel",
  "transformers.TFXLMForQuestionAnsweringSimple",
  "transformers.TFXLMForSequenceClassification",
  "transformers.TFXLMMainLayer",
  "transformers.TFXLMModel",
  "transformers.TFXLMPreTrainedModel",
  "transformers.TFXLMWithLMHeadModel",
  "transformers.TFXLNetForQuestionAnsweringSimple",
  "transformers.TFXLNetForSequenceClassification",
  "transformers.TFXLNetLMHeadModel",
  "transformers.TFXLNetMainLayer",
  "transformers.TFXLNetModel",
  "transformers.TFXLNetPreTrainedModel",
  "transformers.TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_DISTILBERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_WEIGHTS_NAME",
  "transformers.TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TRANSFORMERS_CACHE",
  "transformers.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.TransfoXLConfig",
  "transformers.TransfoXLCorpus",
  "transformers.TransfoXLLMHeadModel",
  "transformers.TransfoXLModel",
  "transformers.TransfoXLPreTrainedModel",
  "transformers.TransfoXLTokenizer",
  "transformers.WEIGHTS_NAME",
  "transformers.WarmupConstantSchedule",
  "transformers.WarmupCosineSchedule",
  "transformers.WarmupCosineWithHardRestartsSchedule",
  "transformers.WarmupLinearSchedule",
  "transformers.WordpieceTokenizer",
  "transformers.XLMConfig",
  "transformers.XLMForQuestionAnswering",
  "transformers.XLMForSequenceClassification",
  "transformers.XLMModel",
  "transformers.XLMPreTrainedModel",
  "transformers.XLMTokenizer",
  "transformers.XLMWithLMHeadModel",
  "transformers.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.XLM_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.XLNET_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.XLNetConfig",
  "transformers.XLNetForMultipleChoice",
  "transformers.XLNetForQuestionAnswering",
  "transformers.XLNetForSequenceClassification",
  "transformers.XLNetLMHeadModel",
  "transformers.XLNetModel",
  "transformers.XLNetPreTrainedModel",
  "transformers.XLNetTokenizer",
  "transformers.__main__",
  "transformers.__main__.main",
  "transformers.__version__",
  "transformers.add_end_docstrings",
  "transformers.add_start_docstrings",
  "transformers.cached_path",
  "transformers.configuration_auto",
  "transformers.configuration_auto.AutoConfig",
  "transformers.configuration_auto.logger",
  "transformers.configuration_bert",
  "transformers.configuration_bert.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_bert.BertConfig",
  "transformers.configuration_bert.logger",
  "transformers.configuration_bert.pretrained_config_archive_map",
  "transformers.configuration_ctrl",
  "transformers.configuration_ctrl.CTRLConfig",
  "transformers.configuration_ctrl.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_ctrl.logger",
  "transformers.configuration_ctrl.pretrained_config_archive_map",
  "transformers.configuration_distilbert",
  "transformers.configuration_distilbert.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_distilbert.DistilBertConfig",
  "transformers.configuration_distilbert.logger",
  "transformers.configuration_distilbert.pretrained_config_archive_map",
  "transformers.configuration_gpt2",
  "transformers.configuration_gpt2.GPT2Config",
  "transformers.configuration_gpt2.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_gpt2.logger",
  "transformers.configuration_gpt2.pretrained_config_archive_map",
  "transformers.configuration_openai",
  "transformers.configuration_openai.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_openai.OpenAIGPTConfig",
  "transformers.configuration_openai.logger",
  "transformers.configuration_openai.pretrained_config_archive_map",
  "transformers.configuration_roberta",
  "transformers.configuration_roberta.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_roberta.RobertaConfig",
  "transformers.configuration_roberta.logger",
  "transformers.configuration_transfo_xl",
  "transformers.configuration_transfo_xl.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_transfo_xl.TransfoXLConfig",
  "transformers.configuration_transfo_xl.logger",
  "transformers.configuration_transfo_xl.pretrained_config_archive_map",
  "transformers.configuration_utils",
  "transformers.configuration_utils.PretrainedConfig",
  "transformers.configuration_utils.PretrainedConfig.pretrained_config_archive_map",
  "transformers.configuration_utils.logger",
  "transformers.configuration_xlm",
  "transformers.configuration_xlm.XLMConfig",
  "transformers.configuration_xlm.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_xlm.logger",
  "transformers.configuration_xlm.pretrained_config_archive_map",
  "transformers.configuration_xlnet",
  "transformers.configuration_xlnet.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.configuration_xlnet.XLNetConfig",
  "transformers.configuration_xlnet.logger",
  "transformers.configuration_xlnet.pretrained_config_archive_map",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.BertConfig",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.BertForPreTraining",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.args",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.load_tf_weights_in_bert",
  "transformers.convert_bert_original_tf_checkpoint_to_pytorch.parser",
  "transformers.convert_bert_pytorch_checkpoint_to_original_tf",
  "transformers.convert_bert_pytorch_checkpoint_to_original_tf.BertModel",
  "transformers.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf",
  "transformers.convert_bert_pytorch_checkpoint_to_original_tf.main",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.CONFIG_NAME",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.GPT2Config",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.GPT2Model",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.WEIGHTS_NAME",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.args",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.load_tf_weights_in_gpt2",
  "transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.parser",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.CONFIG_NAME",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.OpenAIGPTConfig",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.OpenAIGPTModel",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.WEIGHTS_NAME",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.args",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.load_tf_weights_in_openai_gpt",
  "transformers.convert_openai_original_tf_checkpoint_to_pytorch.parser",
  "transformers.convert_pytorch_checkpoint_to_tf2",
  "transformers.convert_pytorch_checkpoint_to_tf2.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.BERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.BertForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRLConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.CTRL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.DISTILBERT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.DISTILBERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.DistilBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2Config",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2LMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.GPT2_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.MODEL_CLASSES",
  "transformers.convert_pytorch_checkpoint_to_tf2.OPENAI_GPT_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.OpenAIGPTConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.OpenAIGPTLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.ROBERTA_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.RobertaForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForPreTraining",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFBertForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFCTRLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDistilBertForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFDistilBertForQuestionAnswering",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFGPT2LMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFOpenAIGPTLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFRobertaForMaskedLM",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFRobertaForSequenceClassification",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFTransfoXLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFXLMWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TFXLNetLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.TRANSFO_XL_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.TransfoXLConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.TransfoXLLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLMWithLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLM_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLM_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNET_PRETRAINED_CONFIG_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNET_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNetConfig",
  "transformers.convert_pytorch_checkpoint_to_tf2.XLNetLMHeadModel",
  "transformers.convert_pytorch_checkpoint_to_tf2.args",
  "transformers.convert_pytorch_checkpoint_to_tf2.cached_path",
  "transformers.convert_pytorch_checkpoint_to_tf2.convert_all_pt_checkpoints_to_tf",
  "transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf",
  "transformers.convert_pytorch_checkpoint_to_tf2.is_torch_available",
  "transformers.convert_pytorch_checkpoint_to_tf2.load_pytorch_checkpoint_in_tf2_model",
  "transformers.convert_pytorch_checkpoint_to_tf2.parser",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertConfig",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertEncoder",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertIntermediate",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertLayer",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertModel",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertOutput",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertSelfAttention",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.BertSelfOutput",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.RobertaEmbeddings",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.RobertaForMaskedLM",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.RobertaForSequenceClassification",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.RobertaModel",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.SAMPLE_TEXT",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.logger",
  "transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.convert_tf_weight_name_to_pt_weight_name",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.CONFIG_NAME",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.CORPUS_NAME",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.TransfoXLConfig",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.TransfoXLLMHeadModel",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.VOCAB_FILES_NAMES",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.WEIGHTS_NAME",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.args",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.load_tf_weights_in_transfo_xl",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.parser",
  "transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.tokenization_transfo_xl",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.CONFIG_NAME",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.VOCAB_FILES_NAMES",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.WEIGHTS_NAME",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.args",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch",
  "transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.parser",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.CONFIG_NAME",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.GLUE_TASKS_NUM_LABELS",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.WEIGHTS_NAME",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.XLNetConfig",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.XLNetForQuestionAnswering",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.XLNetForSequenceClassification",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.XLNetLMHeadModel",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.args",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.load_tf_weights_in_xlnet",
  "transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.parser",
  "transformers.data",
  "transformers.data.DataProcessor",
  "transformers.data.InputExample",
  "transformers.data.InputFeatures",
  "transformers.data.glue_compute_metrics",
  "transformers.data.glue_convert_examples_to_features",
  "transformers.data.glue_output_modes",
  "transformers.data.glue_processors",
  "transformers.data.glue_tasks_num_labels",
  "transformers.data.is_sklearn_available",
  "transformers.data.metrics",
  "transformers.data.metrics._has_sklearn",
  "transformers.data.metrics.acc_and_f1",
  "transformers.data.metrics.e",
  "transformers.data.metrics.glue_compute_metrics",
  "transformers.data.metrics.is_sklearn_available",
  "transformers.data.metrics.logger",
  "transformers.data.metrics.pearson_and_spearman",
  "transformers.data.metrics.simple_accuracy",
  "transformers.data.processors",
  "transformers.data.processors.DataProcessor",
  "transformers.data.processors.InputExample",
  "transformers.data.processors.InputFeatures",
  "transformers.data.processors.glue",
  "transformers.data.processors.glue.ColaProcessor",
  "transformers.data.processors.glue.MnliMismatchedProcessor",
  "transformers.data.processors.glue.MnliProcessor",
  "transformers.data.processors.glue.MrpcProcessor",
  "transformers.data.processors.glue.QnliProcessor",
  "transformers.data.processors.glue.QqpProcessor",
  "transformers.data.processors.glue.RteProcessor",
  "transformers.data.processors.glue.Sst2Processor",
  "transformers.data.processors.glue.StsbProcessor",
  "transformers.data.processors.glue.WnliProcessor",
  "transformers.data.processors.glue.glue_convert_examples_to_features",
  "transformers.data.processors.glue.glue_output_modes",
  "transformers.data.processors.glue.glue_processors",
  "transformers.data.processors.glue.glue_tasks_num_labels",
  "transformers.data.processors.glue.logger",
  "transformers.data.processors.glue_convert_examples_to_features",
  "transformers.data.processors.glue_output_modes",
  "transformers.data.processors.glue_processors",
  "transformers.data.processors.glue_tasks_num_labels",
  "transformers.data.processors.utils",
  "transformers.data.processors.utils.DataProcessor",
  "transformers.data.processors.utils.InputExample",
  "transformers.data.processors.utils.InputFeatures",
  "transformers.file_utils",
  "transformers.file_utils.CONFIG_NAME",
  "transformers.file_utils.PYTORCH_PRETRAINED_BERT_CACHE",
  "transformers.file_utils.PYTORCH_TRANSFORMERS_CACHE",
  "transformers.file_utils.TF2_WEIGHTS_NAME",
  "transformers.file_utils.TF_WEIGHTS_NAME",
  "transformers.file_utils.TRANSFORMERS_CACHE",
  "transformers.file_utils.WEIGHTS_NAME",
  "transformers.file_utils._tf_available",
  "transformers.file_utils._torch_available",
  "transformers.file_utils.add_end_docstrings",
  "transformers.file_utils.add_start_docstrings",
  "transformers.file_utils.cached_path",
  "transformers.file_utils.default_cache_path",
  "transformers.file_utils.filename_to_url",
  "transformers.file_utils.get_from_cache",
  "transformers.file_utils.http_get",
  "transformers.file_utils.is_tf_available",
  "transformers.file_utils.is_torch_available",
  "transformers.file_utils.logger",
  "transformers.file_utils.s3_etag",
  "transformers.file_utils.s3_get",
  "transformers.file_utils.s3_request",
  "transformers.file_utils.split_s3_path",
  "transformers.file_utils.torch_cache_home",
  "transformers.file_utils.url_to_filename",
  "transformers.glue_compute_metrics",
  "transformers.glue_convert_examples_to_features",
  "transformers.glue_output_modes",
  "transformers.glue_processors",
  "transformers.glue_tasks_num_labels",
  "transformers.is_sklearn_available",
  "transformers.is_tf_available",
  "transformers.is_torch_available",
  "transformers.load_pytorch_checkpoint_in_tf2_model",
  "transformers.load_pytorch_model_in_tf2_model",
  "transformers.load_pytorch_weights_in_tf2_model",
  "transformers.load_tf2_checkpoint_in_pytorch_model",
  "transformers.load_tf2_model_in_pytorch_model",
  "transformers.load_tf2_weights_in_pytorch_model",
  "transformers.load_tf_weights_in_bert",
  "transformers.load_tf_weights_in_gpt2",
  "transformers.load_tf_weights_in_openai_gpt",
  "transformers.load_tf_weights_in_transfo_xl",
  "transformers.load_tf_weights_in_xlnet",
  "transformers.logger",
  "transformers.modeling_auto",
  "transformers.modeling_auto.AutoModel",
  "transformers.modeling_auto.logger",
  "transformers.modeling_bert",
  "transformers.modeling_bert.ACT2FN",
  "transformers.modeling_bert.BERT_INPUTS_DOCSTRING",
  "transformers.modeling_bert.BERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_bert.BERT_START_DOCSTRING",
  "transformers.modeling_bert.BertAttention",
  "transformers.modeling_bert.BertEmbeddings",
  "transformers.modeling_bert.BertEncoder",
  "transformers.modeling_bert.BertForMaskedLM",
  "transformers.modeling_bert.BertForMultipleChoice",
  "transformers.modeling_bert.BertForNextSentencePrediction",
  "transformers.modeling_bert.BertForPreTraining",
  "transformers.modeling_bert.BertForQuestionAnswering",
  "transformers.modeling_bert.BertForSequenceClassification",
  "transformers.modeling_bert.BertForTokenClassification",
  "transformers.modeling_bert.BertIntermediate",
  "transformers.modeling_bert.BertLMPredictionHead",
  "transformers.modeling_bert.BertLayer",
  "transformers.modeling_bert.BertModel",
  "transformers.modeling_bert.BertOnlyMLMHead",
  "transformers.modeling_bert.BertOnlyNSPHead",
  "transformers.modeling_bert.BertOutput",
  "transformers.modeling_bert.BertPooler",
  "transformers.modeling_bert.BertPreTrainedModel",
  "transformers.modeling_bert.BertPreTrainingHeads",
  "transformers.modeling_bert.BertPredictionHeadTransform",
  "transformers.modeling_bert.BertSelfAttention",
  "transformers.modeling_bert.BertSelfOutput",
  "transformers.modeling_bert.gelu",
  "transformers.modeling_bert.load_tf_weights_in_bert",
  "transformers.modeling_bert.logger",
  "transformers.modeling_bert.swish",
  "transformers.modeling_ctrl",
  "transformers.modeling_ctrl.CTRLLMHeadModel",
  "transformers.modeling_ctrl.CTRLModel",
  "transformers.modeling_ctrl.CTRLPreTrainedModel",
  "transformers.modeling_ctrl.CTRL_INPUTS_DOCSTRING",
  "transformers.modeling_ctrl.CTRL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_ctrl.CTRL_START_DOCSTRING",
  "transformers.modeling_ctrl.EncoderLayer",
  "transformers.modeling_ctrl.MultiHeadAttention",
  "transformers.modeling_ctrl.angle_defn",
  "transformers.modeling_ctrl.load_tf_weights",
  "transformers.modeling_ctrl.logger",
  "transformers.modeling_ctrl.point_wise_feed_forward_network",
  "transformers.modeling_ctrl.positional_encoding",
  "transformers.modeling_ctrl.scaled_dot_product_attention",
  "transformers.modeling_distilbert",
  "transformers.modeling_distilbert.DISTILBERT_INPUTS_DOCSTRING",
  "transformers.modeling_distilbert.DISTILBERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_distilbert.DISTILBERT_START_DOCSTRING",
  "transformers.modeling_distilbert.DistilBertForMaskedLM",
  "transformers.modeling_distilbert.DistilBertForQuestionAnswering",
  "transformers.modeling_distilbert.DistilBertForSequenceClassification",
  "transformers.modeling_distilbert.DistilBertModel",
  "transformers.modeling_distilbert.DistilBertPreTrainedModel",
  "transformers.modeling_distilbert.Embeddings",
  "transformers.modeling_distilbert.FFN",
  "transformers.modeling_distilbert.MultiHeadSelfAttention",
  "transformers.modeling_distilbert.Transformer",
  "transformers.modeling_distilbert.create_sinusoidal_embeddings",
  "transformers.modeling_distilbert.gelu",
  "transformers.modeling_distilbert.logger",
  "transformers.modeling_gpt2",
  "transformers.modeling_gpt2.Attention",
  "transformers.modeling_gpt2.Block",
  "transformers.modeling_gpt2.GPT2DoubleHeadsModel",
  "transformers.modeling_gpt2.GPT2LMHeadModel",
  "transformers.modeling_gpt2.GPT2Model",
  "transformers.modeling_gpt2.GPT2PreTrainedModel",
  "transformers.modeling_gpt2.GPT2_INPUTS_DOCSTRING",
  "transformers.modeling_gpt2.GPT2_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_gpt2.GPT2_START_DOCSTRING",
  "transformers.modeling_gpt2.MLP",
  "transformers.modeling_gpt2.gelu",
  "transformers.modeling_gpt2.load_tf_weights_in_gpt2",
  "transformers.modeling_gpt2.logger",
  "transformers.modeling_openai",
  "transformers.modeling_openai.ACT_FNS",
  "transformers.modeling_openai.Attention",
  "transformers.modeling_openai.Block",
  "transformers.modeling_openai.MLP",
  "transformers.modeling_openai.OPENAI_GPT_INPUTS_DOCSTRING",
  "transformers.modeling_openai.OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_openai.OPENAI_GPT_START_DOCSTRING",
  "transformers.modeling_openai.OpenAIGPTDoubleHeadsModel",
  "transformers.modeling_openai.OpenAIGPTLMHeadModel",
  "transformers.modeling_openai.OpenAIGPTModel",
  "transformers.modeling_openai.OpenAIGPTPreTrainedModel",
  "transformers.modeling_openai.gelu",
  "transformers.modeling_openai.load_tf_weights_in_openai_gpt",
  "transformers.modeling_openai.logger",
  "transformers.modeling_openai.swish",
  "transformers.modeling_roberta",
  "transformers.modeling_roberta.ROBERTA_INPUTS_DOCSTRING",
  "transformers.modeling_roberta.ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_roberta.ROBERTA_START_DOCSTRING",
  "transformers.modeling_roberta.RobertaClassificationHead",
  "transformers.modeling_roberta.RobertaEmbeddings",
  "transformers.modeling_roberta.RobertaForMaskedLM",
  "transformers.modeling_roberta.RobertaForMultipleChoice",
  "transformers.modeling_roberta.RobertaForSequenceClassification",
  "transformers.modeling_roberta.RobertaLMHead",
  "transformers.modeling_roberta.RobertaModel",
  "transformers.modeling_roberta.logger",
  "transformers.modeling_tf_auto",
  "transformers.modeling_tf_auto.TFAutoModel",
  "transformers.modeling_tf_auto.logger",
  "transformers.modeling_tf_bert",
  "transformers.modeling_tf_bert.ACT2FN",
  "transformers.modeling_tf_bert.BERT_INPUTS_DOCSTRING",
  "transformers.modeling_tf_bert.BERT_START_DOCSTRING",
  "transformers.modeling_tf_bert.TFBertAttention",
  "transformers.modeling_tf_bert.TFBertEmbeddings",
  "transformers.modeling_tf_bert.TFBertEncoder",
  "transformers.modeling_tf_bert.TFBertForMaskedLM",
  "transformers.modeling_tf_bert.TFBertForMultipleChoice",
  "transformers.modeling_tf_bert.TFBertForNextSentencePrediction",
  "transformers.modeling_tf_bert.TFBertForPreTraining",
  "transformers.modeling_tf_bert.TFBertForQuestionAnswering",
  "transformers.modeling_tf_bert.TFBertForSequenceClassification",
  "transformers.modeling_tf_bert.TFBertForTokenClassification",
  "transformers.modeling_tf_bert.TFBertIntermediate",
  "transformers.modeling_tf_bert.TFBertLMPredictionHead",
  "transformers.modeling_tf_bert.TFBertLayer",
  "transformers.modeling_tf_bert.TFBertMLMHead",
  "transformers.modeling_tf_bert.TFBertMainLayer",
  "transformers.modeling_tf_bert.TFBertModel",
  "transformers.modeling_tf_bert.TFBertNSPHead",
  "transformers.modeling_tf_bert.TFBertOutput",
  "transformers.modeling_tf_bert.TFBertPooler",
  "transformers.modeling_tf_bert.TFBertPreTrainedModel",
  "transformers.modeling_tf_bert.TFBertPredictionHeadTransform",
  "transformers.modeling_tf_bert.TFBertSelfAttention",
  "transformers.modeling_tf_bert.TFBertSelfOutput",
  "transformers.modeling_tf_bert.TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_bert.dummy_inputs",
  "transformers.modeling_tf_bert.gelu",
  "transformers.modeling_tf_bert.logger",
  "transformers.modeling_tf_bert.swish",
  "transformers.modeling_tf_ctrl",
  "transformers.modeling_tf_ctrl.CTRL_INPUTS_DOCSTRING",
  "transformers.modeling_tf_ctrl.CTRL_START_DOCSTRING",
  "transformers.modeling_tf_ctrl.TFCTRLLMHead",
  "transformers.modeling_tf_ctrl.TFCTRLMainLayer",
  "transformers.modeling_tf_ctrl.TFCTRLModel",
  "transformers.modeling_tf_ctrl.TFCTRLPreTrainedModel",
  "transformers.modeling_tf_ctrl.TFEncoderLayer",
  "transformers.modeling_tf_ctrl.TFMultiHeadAttention",
  "transformers.modeling_tf_ctrl.TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_ctrl.angle_defn",
  "transformers.modeling_tf_ctrl.dummy_inputs",
  "transformers.modeling_tf_ctrl.logger",
  "transformers.modeling_tf_ctrl.point_wise_feed_forward_network",
  "transformers.modeling_tf_ctrl.positional_encoding",
  "transformers.modeling_tf_ctrl.scaled_dot_product_attention",
  "transformers.modeling_tf_distilbert",
  "transformers.modeling_tf_distilbert.DISTILBERT_INPUTS_DOCSTRING",
  "transformers.modeling_tf_distilbert.DISTILBERT_START_DOCSTRING",
  "transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM",
  "transformers.modeling_tf_distilbert.TFDistilBertForQuestionAnswering",
  "transformers.modeling_tf_distilbert.TFDistilBertForSequenceClassification",
  "transformers.modeling_tf_distilbert.TFDistilBertLMHead",
  "transformers.modeling_tf_distilbert.TFDistilBertMainLayer",
  "transformers.modeling_tf_distilbert.TFDistilBertModel",
  "transformers.modeling_tf_distilbert.TFDistilBertPreTrainedModel",
  "transformers.modeling_tf_distilbert.TFEmbeddings",
  "transformers.modeling_tf_distilbert.TFFFN",
  "transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention",
  "transformers.modeling_tf_distilbert.TFTransformer",
  "transformers.modeling_tf_distilbert.TF_DISTILBERT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_distilbert.dummy_inputs",
  "transformers.modeling_tf_distilbert.gelu",
  "transformers.modeling_tf_distilbert.logger",
  "transformers.modeling_tf_gpt2",
  "transformers.modeling_tf_gpt2.GPT2_INPUTS_DOCSTRING",
  "transformers.modeling_tf_gpt2.GPT2_START_DOCSTRING",
  "transformers.modeling_tf_gpt2.TFAttention",
  "transformers.modeling_tf_gpt2.TFBlock",
  "transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel",
  "transformers.modeling_tf_gpt2.TFGPT2LMHeadModel",
  "transformers.modeling_tf_gpt2.TFGPT2MainLayer",
  "transformers.modeling_tf_gpt2.TFGPT2Model",
  "transformers.modeling_tf_gpt2.TFGPT2PreTrainedModel",
  "transformers.modeling_tf_gpt2.TFMLP",
  "transformers.modeling_tf_gpt2.TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_gpt2.dummy_inputs",
  "transformers.modeling_tf_gpt2.gelu",
  "transformers.modeling_tf_gpt2.logger",
  "transformers.modeling_tf_openai",
  "transformers.modeling_tf_openai.ACT_FNS",
  "transformers.modeling_tf_openai.OPENAI_GPT_INPUTS_DOCSTRING",
  "transformers.modeling_tf_openai.OPENAI_GPT_START_DOCSTRING",
  "transformers.modeling_tf_openai.TFAttention",
  "transformers.modeling_tf_openai.TFBlock",
  "transformers.modeling_tf_openai.TFMLP",
  "transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel",
  "transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel",
  "transformers.modeling_tf_openai.TFOpenAIGPTMainLayer",
  "transformers.modeling_tf_openai.TFOpenAIGPTModel",
  "transformers.modeling_tf_openai.TFOpenAIGPTPreTrainedModel",
  "transformers.modeling_tf_openai.TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_openai.dummy_inputs",
  "transformers.modeling_tf_openai.gelu",
  "transformers.modeling_tf_openai.logger",
  "transformers.modeling_tf_openai.swish",
  "transformers.modeling_tf_pytorch_utils",
  "transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name",
  "transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model",
  "transformers.modeling_tf_pytorch_utils.load_pytorch_model_in_tf2_model",
  "transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model",
  "transformers.modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model",
  "transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model",
  "transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model",
  "transformers.modeling_tf_pytorch_utils.logger",
  "transformers.modeling_tf_roberta",
  "transformers.modeling_tf_roberta.ROBERTA_INPUTS_DOCSTRING",
  "transformers.modeling_tf_roberta.ROBERTA_START_DOCSTRING",
  "transformers.modeling_tf_roberta.TFRobertaClassificationHead",
  "transformers.modeling_tf_roberta.TFRobertaEmbeddings",
  "transformers.modeling_tf_roberta.TFRobertaForMaskedLM",
  "transformers.modeling_tf_roberta.TFRobertaForSequenceClassification",
  "transformers.modeling_tf_roberta.TFRobertaLMHead",
  "transformers.modeling_tf_roberta.TFRobertaMainLayer",
  "transformers.modeling_tf_roberta.TFRobertaModel",
  "transformers.modeling_tf_roberta.TFRobertaPreTrainedModel",
  "transformers.modeling_tf_roberta.TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_roberta.dummy_inputs",
  "transformers.modeling_tf_roberta.logger",
  "transformers.modeling_tf_transfo_xl",
  "transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding",
  "transformers.modeling_tf_transfo_xl.TFPositionalEmbedding",
  "transformers.modeling_tf_transfo_xl.TFPositionwiseFF",
  "transformers.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer",
  "transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn",
  "transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel",
  "transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer",
  "transformers.modeling_tf_transfo_xl.TFTransfoXLModel",
  "transformers.modeling_tf_transfo_xl.TFTransfoXLPreTrainedModel",
  "transformers.modeling_tf_transfo_xl.TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_transfo_xl.TRANSFO_XL_INPUTS_DOCSTRING",
  "transformers.modeling_tf_transfo_xl.TRANSFO_XL_START_DOCSTRING",
  "transformers.modeling_tf_transfo_xl.dummy_inputs",
  "transformers.modeling_tf_transfo_xl.logger",
  "transformers.modeling_tf_transfo_xl_utilities",
  "transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask",
  "transformers.modeling_tf_utils",
  "transformers.modeling_tf_utils.DUMMY_INPUTS",
  "transformers.modeling_tf_utils.TFConv1D",
  "transformers.modeling_tf_utils.TFPreTrainedModel",
  "transformers.modeling_tf_utils.TFPreTrainedModel.dummy_inputs",
  "transformers.modeling_tf_utils.TFSequenceSummary",
  "transformers.modeling_tf_utils.TFSharedEmbeddings",
  "transformers.modeling_tf_utils.get_initializer",
  "transformers.modeling_tf_utils.logger",
  "transformers.modeling_tf_utils.shape_list",
  "transformers.modeling_tf_xlm",
  "transformers.modeling_tf_xlm.TFMultiHeadAttention",
  "transformers.modeling_tf_xlm.TFTransformerFFN",
  "transformers.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple",
  "transformers.modeling_tf_xlm.TFXLMForSequenceClassification",
  "transformers.modeling_tf_xlm.TFXLMMainLayer",
  "transformers.modeling_tf_xlm.TFXLMModel",
  "transformers.modeling_tf_xlm.TFXLMPreTrainedModel",
  "transformers.modeling_tf_xlm.TFXLMPredLayer",
  "transformers.modeling_tf_xlm.TFXLMWithLMHeadModel",
  "transformers.modeling_tf_xlm.TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_xlm.XLM_INPUTS_DOCSTRING",
  "transformers.modeling_tf_xlm.XLM_START_DOCSTRING",
  "transformers.modeling_tf_xlm.create_sinusoidal_embeddings",
  "transformers.modeling_tf_xlm.gelu",
  "transformers.modeling_tf_xlm.get_masks",
  "transformers.modeling_tf_xlm.logger",
  "transformers.modeling_tf_xlnet",
  "transformers.modeling_tf_xlnet.ACT2FN",
  "transformers.modeling_tf_xlnet.TFXLNetFeedForward",
  "transformers.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple",
  "transformers.modeling_tf_xlnet.TFXLNetForSequenceClassification",
  "transformers.modeling_tf_xlnet.TFXLNetLMHead",
  "transformers.modeling_tf_xlnet.TFXLNetLayer",
  "transformers.modeling_tf_xlnet.TFXLNetMainLayer",
  "transformers.modeling_tf_xlnet.TFXLNetModel",
  "transformers.modeling_tf_xlnet.TFXLNetPreTrainedModel",
  "transformers.modeling_tf_xlnet.TFXLNetRelativeAttention",
  "transformers.modeling_tf_xlnet.TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_tf_xlnet.XLNET_INPUTS_DOCSTRING",
  "transformers.modeling_tf_xlnet.XLNET_START_DOCSTRING",
  "transformers.modeling_tf_xlnet.gelu",
  "transformers.modeling_tf_xlnet.logger",
  "transformers.modeling_tf_xlnet.swish",
  "transformers.modeling_transfo_xl",
  "transformers.modeling_transfo_xl.AdaptiveEmbedding",
  "transformers.modeling_transfo_xl.PositionalEmbedding",
  "transformers.modeling_transfo_xl.PositionwiseFF",
  "transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer",
  "transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn",
  "transformers.modeling_transfo_xl.TRANSFO_XL_INPUTS_DOCSTRING",
  "transformers.modeling_transfo_xl.TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_transfo_xl.TRANSFO_XL_START_DOCSTRING",
  "transformers.modeling_transfo_xl.TransfoXLLMHeadModel",
  "transformers.modeling_transfo_xl.TransfoXLModel",
  "transformers.modeling_transfo_xl.TransfoXLPreTrainedModel",
  "transformers.modeling_transfo_xl.build_tf_to_pytorch_map",
  "transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl",
  "transformers.modeling_transfo_xl.logger",
  "transformers.modeling_transfo_xl_utilities",
  "transformers.modeling_transfo_xl_utilities.LogUniformSampler",
  "transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax",
  "transformers.modeling_transfo_xl_utilities.all_b",
  "transformers.modeling_transfo_xl_utilities.all_ids",
  "transformers.modeling_transfo_xl_utilities.all_w",
  "transformers.modeling_transfo_xl_utilities.b1",
  "transformers.modeling_transfo_xl_utilities.b2",
  "transformers.modeling_transfo_xl_utilities.hit",
  "transformers.modeling_transfo_xl_utilities.logits",
  "transformers.modeling_transfo_xl_utilities.n_sample",
  "transformers.modeling_transfo_xl_utilities.neg_samples",
  "transformers.modeling_transfo_xl_utilities.samp_log_probs",
  "transformers.modeling_transfo_xl_utilities.sample_b",
  "transformers.modeling_transfo_xl_utilities.sample_logits",
  "transformers.modeling_transfo_xl_utilities.sample_logits.all_b",
  "transformers.modeling_transfo_xl_utilities.sample_logits.all_ids",
  "transformers.modeling_transfo_xl_utilities.sample_logits.all_w",
  "transformers.modeling_transfo_xl_utilities.sample_logits.b1",
  "transformers.modeling_transfo_xl_utilities.sample_logits.b2",
  "transformers.modeling_transfo_xl_utilities.sample_logits.hit",
  "transformers.modeling_transfo_xl_utilities.sample_logits.logits",
  "transformers.modeling_transfo_xl_utilities.sample_logits.n_sample",
  "transformers.modeling_transfo_xl_utilities.sample_logits.neg_samples",
  "transformers.modeling_transfo_xl_utilities.sample_logits.samp_log_probs",
  "transformers.modeling_transfo_xl_utilities.sample_logits.sample_b",
  "transformers.modeling_transfo_xl_utilities.sample_logits.sample_logits",
  "transformers.modeling_transfo_xl_utilities.sample_logits.sample_w",
  "transformers.modeling_transfo_xl_utilities.sample_logits.true_b",
  "transformers.modeling_transfo_xl_utilities.sample_logits.true_log_probs",
  "transformers.modeling_transfo_xl_utilities.sample_logits.true_logits",
  "transformers.modeling_transfo_xl_utilities.sample_logits.true_w",
  "transformers.modeling_transfo_xl_utilities.sample_w",
  "transformers.modeling_transfo_xl_utilities.true_b",
  "transformers.modeling_transfo_xl_utilities.true_log_probs",
  "transformers.modeling_transfo_xl_utilities.true_logits",
  "transformers.modeling_transfo_xl_utilities.true_w",
  "transformers.modeling_utils",
  "transformers.modeling_utils.Conv1D",
  "transformers.modeling_utils.Identity",
  "transformers.modeling_utils.PoolerAnswerClass",
  "transformers.modeling_utils.PoolerEndLogits",
  "transformers.modeling_utils.PoolerStartLogits",
  "transformers.modeling_utils.PreTrainedModel",
  "transformers.modeling_utils.PreTrainedModel.load_tf_weights",
  "transformers.modeling_utils.SQuADHead",
  "transformers.modeling_utils.SequenceSummary",
  "transformers.modeling_utils.logger",
  "transformers.modeling_utils.prune_conv1d_layer",
  "transformers.modeling_utils.prune_layer",
  "transformers.modeling_utils.prune_linear_layer",
  "transformers.modeling_xlm",
  "transformers.modeling_xlm.MultiHeadAttention",
  "transformers.modeling_xlm.TransformerFFN",
  "transformers.modeling_xlm.XLMForQuestionAnswering",
  "transformers.modeling_xlm.XLMForSequenceClassification",
  "transformers.modeling_xlm.XLMModel",
  "transformers.modeling_xlm.XLMPreTrainedModel",
  "transformers.modeling_xlm.XLMPredLayer",
  "transformers.modeling_xlm.XLMWithLMHeadModel",
  "transformers.modeling_xlm.XLM_INPUTS_DOCSTRING",
  "transformers.modeling_xlm.XLM_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_xlm.XLM_START_DOCSTRING",
  "transformers.modeling_xlm.create_sinusoidal_embeddings",
  "transformers.modeling_xlm.gelu",
  "transformers.modeling_xlm.get_masks",
  "transformers.modeling_xlm.logger",
  "transformers.modeling_xlnet",
  "transformers.modeling_xlnet.ACT2FN",
  "transformers.modeling_xlnet.XLNET_INPUTS_DOCSTRING",
  "transformers.modeling_xlnet.XLNET_PRETRAINED_MODEL_ARCHIVE_MAP",
  "transformers.modeling_xlnet.XLNET_START_DOCSTRING",
  "transformers.modeling_xlnet.XLNetFeedForward",
  "transformers.modeling_xlnet.XLNetForMultipleChoice",
  "transformers.modeling_xlnet.XLNetForQuestionAnswering",
  "transformers.modeling_xlnet.XLNetForSequenceClassification",
  "transformers.modeling_xlnet.XLNetLMHeadModel",
  "transformers.modeling_xlnet.XLNetLayer",
  "transformers.modeling_xlnet.XLNetModel",
  "transformers.modeling_xlnet.XLNetPreTrainedModel",
  "transformers.modeling_xlnet.XLNetRelativeAttention",
  "transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map",
  "transformers.modeling_xlnet.e",
  "transformers.modeling_xlnet.gelu",
  "transformers.modeling_xlnet.load_tf_weights_in_xlnet",
  "transformers.modeling_xlnet.logger",
  "transformers.modeling_xlnet.swish",
  "transformers.optimization",
  "transformers.optimization.AdamW",
  "transformers.optimization.ConstantLRSchedule",
  "transformers.optimization.WarmupConstantSchedule",
  "transformers.optimization.WarmupCosineSchedule",
  "transformers.optimization.WarmupCosineWithHardRestartsSchedule",
  "transformers.optimization.WarmupLinearSchedule",
  "transformers.optimization.logger",
  "transformers.prune_layer",
  "transformers.tokenization_auto",
  "transformers.tokenization_auto.AutoTokenizer",
  "transformers.tokenization_auto.logger",
  "transformers.tokenization_bert",
  "transformers.tokenization_bert.BasicTokenizer",
  "transformers.tokenization_bert.BertTokenizer",
  "transformers.tokenization_bert.BertTokenizer.pretrained_init_configuration",
  "transformers.tokenization_bert.BertTokenizer.vocab_size",
  "transformers.tokenization_bert.PRETRAINED_INIT_CONFIGURATION",
  "transformers.tokenization_bert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_bert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_bert.VOCAB_FILES_NAMES",
  "transformers.tokenization_bert.WordpieceTokenizer",
  "transformers.tokenization_bert._is_control",
  "transformers.tokenization_bert._is_punctuation",
  "transformers.tokenization_bert._is_whitespace",
  "transformers.tokenization_bert.load_vocab",
  "transformers.tokenization_bert.logger",
  "transformers.tokenization_bert.whitespace_tokenize",
  "transformers.tokenization_ctrl",
  "transformers.tokenization_ctrl.CTRLTokenizer",
  "transformers.tokenization_ctrl.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_ctrl.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_ctrl.VOCAB_FILES_NAMES",
  "transformers.tokenization_ctrl.get_pairs",
  "transformers.tokenization_ctrl.logger",
  "transformers.tokenization_distilbert",
  "transformers.tokenization_distilbert.DistilBertTokenizer",
  "transformers.tokenization_distilbert.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_distilbert.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_distilbert.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_distilbert.VOCAB_FILES_NAMES",
  "transformers.tokenization_distilbert.additional_special_tokens_ids",
  "transformers.tokenization_distilbert.all_special_ids",
  "transformers.tokenization_distilbert.all_special_tokens",
  "transformers.tokenization_distilbert.bos_token_id",
  "transformers.tokenization_distilbert.cls_token_id",
  "transformers.tokenization_distilbert.eos_token_id",
  "transformers.tokenization_distilbert.logger",
  "transformers.tokenization_distilbert.mask_token_id",
  "transformers.tokenization_distilbert.pad_token_id",
  "transformers.tokenization_distilbert.pretrained_init_configuration",
  "transformers.tokenization_distilbert.sep_token_id",
  "transformers.tokenization_distilbert.special_tokens_map",
  "transformers.tokenization_distilbert.unk_token_id",
  "transformers.tokenization_distilbert.vocab_size",
  "transformers.tokenization_gpt2",
  "transformers.tokenization_gpt2.GPT2Tokenizer.max_model_input_sizes",
  "transformers.tokenization_gpt2.GPT2Tokenizer.pretrained_vocab_files_map",
  "transformers.tokenization_gpt2.GPT2Tokenizer.save_vocabulary.merge_file",
  "transformers.tokenization_gpt2.GPT2Tokenizer.vocab_files_names",
  "transformers.tokenization_gpt2.GPT2Tokenizer.vocab_size",
  "transformers.tokenization_gpt2.merge_file",
  "transformers.tokenization_openai",
  "transformers.tokenization_openai.OpenAIGPTTokenizer",
  "transformers.tokenization_openai.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_openai.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_openai.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_openai.VOCAB_FILES_NAMES",
  "transformers.tokenization_openai.additional_special_tokens_ids",
  "transformers.tokenization_openai.all_special_ids",
  "transformers.tokenization_openai.all_special_tokens",
  "transformers.tokenization_openai.bos_token_id",
  "transformers.tokenization_openai.cls_token_id",
  "transformers.tokenization_openai.eos_token_id",
  "transformers.tokenization_openai.get_pairs",
  "transformers.tokenization_openai.logger",
  "transformers.tokenization_openai.mask_token_id",
  "transformers.tokenization_openai.max_model_input_sizes",
  "transformers.tokenization_openai.pad_token_id",
  "transformers.tokenization_openai.pretrained_init_configuration",
  "transformers.tokenization_openai.pretrained_vocab_files_map",
  "transformers.tokenization_openai.sep_token_id",
  "transformers.tokenization_openai.special_tokens_map",
  "transformers.tokenization_openai.text_standardize",
  "transformers.tokenization_openai.unk_token_id",
  "transformers.tokenization_openai.vocab_files_names",
  "transformers.tokenization_roberta",
  "transformers.tokenization_roberta.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_roberta.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_roberta.RobertaTokenizer",
  "transformers.tokenization_roberta.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_roberta.VOCAB_FILES_NAMES",
  "transformers.tokenization_roberta.additional_special_tokens_ids",
  "transformers.tokenization_roberta.all_special_ids",
  "transformers.tokenization_roberta.all_special_tokens",
  "transformers.tokenization_roberta.bos_token_id",
  "transformers.tokenization_roberta.cls_token_id",
  "transformers.tokenization_roberta.eos_token_id",
  "transformers.tokenization_roberta.logger",
  "transformers.tokenization_roberta.lru_cache",
  "transformers.tokenization_roberta.mask_token_id",
  "transformers.tokenization_roberta.max_model_input_sizes",
  "transformers.tokenization_roberta.pad_token_id",
  "transformers.tokenization_roberta.pretrained_init_configuration",
  "transformers.tokenization_roberta.pretrained_vocab_files_map",
  "transformers.tokenization_roberta.sep_token_id",
  "transformers.tokenization_roberta.special_tokens_map",
  "transformers.tokenization_roberta.unk_token_id",
  "transformers.tokenization_roberta.vocab_files_names",
  "transformers.tokenization_roberta.vocab_size",
  "transformers.tokenization_transfo_xl",
  "transformers.tokenization_transfo_xl.CORPUS_NAME",
  "transformers.tokenization_transfo_xl.LMMultiFileIterator",
  "transformers.tokenization_transfo_xl.LMOrderedIterator",
  "transformers.tokenization_transfo_xl.LMShuffledIterator",
  "transformers.tokenization_transfo_xl.PRETRAINED_CORPUS_ARCHIVE_MAP",
  "transformers.tokenization_transfo_xl.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_transfo_xl.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_transfo_xl.TransfoXLCorpus",
  "transformers.tokenization_transfo_xl.TransfoXLTokenizer",
  "transformers.tokenization_transfo_xl.VOCAB_FILES_NAMES",
  "transformers.tokenization_transfo_xl.get_lm_corpus",
  "transformers.tokenization_transfo_xl.logger",
  "transformers.tokenization_utils",
  "transformers.tokenization_utils.ADDED_TOKENS_FILE",
  "transformers.tokenization_utils.PreTrainedTokenizer",
  "transformers.tokenization_utils.PreTrainedTokenizer.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens_ids",
  "transformers.tokenization_utils.PreTrainedTokenizer.all_special_ids",
  "transformers.tokenization_utils.PreTrainedTokenizer.all_special_tokens",
  "transformers.tokenization_utils.PreTrainedTokenizer.bos_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.cls_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.eos_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.mask_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.max_model_input_sizes",
  "transformers.tokenization_utils.PreTrainedTokenizer.pad_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.pretrained_init_configuration",
  "transformers.tokenization_utils.PreTrainedTokenizer.pretrained_vocab_files_map",
  "transformers.tokenization_utils.PreTrainedTokenizer.sep_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.special_tokens_map",
  "transformers.tokenization_utils.PreTrainedTokenizer.unk_token_id",
  "transformers.tokenization_utils.PreTrainedTokenizer.vocab_files_names",
  "transformers.tokenization_utils.SPECIAL_TOKENS_MAP_FILE",
  "transformers.tokenization_utils.TOKENIZER_CONFIG_FILE",
  "transformers.tokenization_utils.logger",
  "transformers.tokenization_xlm",
  "transformers.tokenization_xlm.PRETRAINED_INIT_CONFIGURATION",
  "transformers.tokenization_xlm.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_xlm.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_xlm.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_xlm.VOCAB_FILES_NAMES",
  "transformers.tokenization_xlm.XLMTokenizer",
  "transformers.tokenization_xlm.additional_special_tokens_ids",
  "transformers.tokenization_xlm.all_special_ids",
  "transformers.tokenization_xlm.all_special_tokens",
  "transformers.tokenization_xlm.bos_token_id",
  "transformers.tokenization_xlm.cls_token_id",
  "transformers.tokenization_xlm.eos_token_id",
  "transformers.tokenization_xlm.get_pairs",
  "transformers.tokenization_xlm.logger",
  "transformers.tokenization_xlm.lowercase_and_remove_accent",
  "transformers.tokenization_xlm.mask_token_id",
  "transformers.tokenization_xlm.max_model_input_sizes",
  "transformers.tokenization_xlm.pad_token_id",
  "transformers.tokenization_xlm.pretrained_init_configuration",
  "transformers.tokenization_xlm.pretrained_vocab_files_map",
  "transformers.tokenization_xlm.remove_non_printing_char",
  "transformers.tokenization_xlm.replace_unicode_punct",
  "transformers.tokenization_xlm.romanian_preprocessing",
  "transformers.tokenization_xlm.sep_token_id",
  "transformers.tokenization_xlm.special_tokens_map",
  "transformers.tokenization_xlm.unk_token_id",
  "transformers.tokenization_xlm.vocab_files_names",
  "transformers.tokenization_xlnet",
  "transformers.tokenization_xlnet.PRETRAINED_POSITIONAL_EMBEDDINGS_SIZES",
  "transformers.tokenization_xlnet.PRETRAINED_VOCAB_FILES_MAP",
  "transformers.tokenization_xlnet.SEG_ID_A",
  "transformers.tokenization_xlnet.SEG_ID_B",
  "transformers.tokenization_xlnet.SEG_ID_CLS",
  "transformers.tokenization_xlnet.SEG_ID_PAD",
  "transformers.tokenization_xlnet.SEG_ID_SEP",
  "transformers.tokenization_xlnet.SPECIAL_TOKENS_ATTRIBUTES",
  "transformers.tokenization_xlnet.SPIECE_UNDERLINE",
  "transformers.tokenization_xlnet.VOCAB_FILES_NAMES",
  "transformers.tokenization_xlnet.XLNetTokenizer",
  "transformers.tokenization_xlnet.additional_special_tokens_ids",
  "transformers.tokenization_xlnet.all_special_ids",
  "transformers.tokenization_xlnet.all_special_tokens",
  "transformers.tokenization_xlnet.bos_token_id",
  "transformers.tokenization_xlnet.cls_token_id",
  "transformers.tokenization_xlnet.eos_token_id",
  "transformers.tokenization_xlnet.logger",
  "transformers.tokenization_xlnet.mask_token_id",
  "transformers.tokenization_xlnet.max_model_input_sizes",
  "transformers.tokenization_xlnet.pad_token_id",
  "transformers.tokenization_xlnet.pretrained_init_configuration",
  "transformers.tokenization_xlnet.pretrained_vocab_files_map",
  "transformers.tokenization_xlnet.sep_token_id",
  "transformers.tokenization_xlnet.special_tokens_map",
  "transformers.tokenization_xlnet.unk_token_id",
  "transformers.tokenization_xlnet.vocab_files_names"
 ]
}