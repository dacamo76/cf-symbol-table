{
 "errors": {
  "camb.postborn": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 727, in tree_name_to_values",
    "    types = context.predefined_names[node][tree_name.value]",
    "KeyError: <ForStmt: for i, ll in enumerate(lsamp_out):         ell = np.float64(ll)         for llp in range(10, lmax):             lp = np.float64(llp)             if abs(ll - llp) > 200 and lp > 200:                 nphi = 2 * int(min(lp / 10 * acc, 200)) + 1             elif ll > 2000:                 nphi = 2 * int(lp / 10 * acc) + 1             else:                 nphi = 2 * int(lp) + 1             dphi = 2 * np.pi / nphi             phi = np.linspace(dphi, (nphi - 1) / 2 * dphi, (nphi - 1) // 2)             w = 2 * np.ones(phi.size)             cosphi = np.cos(phi)             sinphi = np.sin(phi)             sin2phi = np.sin(2 * phi)             lpp = np.sqrt(lp ** 2 + ell ** 2 - 2 * cosphi * ell * lp)             w[lpp < 2] = 0             w[lpp > lmax] = 0             curls = CurlSp(lpp)             dCEs = cl_E_unlensed_sp(lp) * lp * dphi             crossterm = sinphi * ell * lp / lpp ** 2             Bcurl[i] += np.dot(w, curls * (crossterm * sin2phi) ** 2) * dCEs@205,4>",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/numpy/lib/financial.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 134, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 116, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 217, in get_return_values",
    "    value_set = self.infer_annotations()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 368, in infer_annotations",
    "    return infer_return_types(self._value, self._arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/annotation.py\", line 230, in infer_return_types",
    "    type_var_dict = infer_type_vars_for_execution(function, arguments, all_annotations)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/annotation.py\", line 264, in infer_type_vars_for_execution",
    "    actual_value_set = executed_param_name.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 733, in tree_name_to_values",
    "    is_async=node.parent.type == 'async_stmt',",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 310, in iterate_values",
    "    for lazy_value in values.iterate(contextualized_node, is_async=is_async)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 309, in <genexpr>",
    "    lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 476, in iterate",
    "    type_iters = [c.iterate(contextualized_node, is_async=is_async) for c in self._set]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 476, in <listcomp>",
    "    type_iters = [c.iterate(contextualized_node, is_async=is_async) for c in self._set]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 116, in iterate",
    "    return self.py__iter__(contextualized_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 252, in py__iter__",
    "    iter_slot_names = self.get_function_slot_names('__iter__')",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 302, in get_function_slot_names",
    "    for filter in self.get_filters(include_self_names=False):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 336, in _get_annotated_class_object",
    "    or not signature.matches_signature(args):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in matches_signature",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in <genexpr>",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 33, in matches_signature",
    "    argument_values = self.infer().py__class__()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 71, in get_filters",
    "    yield from self.iter_star_filters()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 124, in star_imports",
    "    modules += module.star_imports()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "camb.CAMBError",
  "camb.CAMBFortranError",
  "camb.CAMBParamRangeError",
  "camb.CAMBUnknownArgumentError",
  "camb.CAMBValueError",
  "camb.CAMBdata",
  "camb.CAMBparams",
  "camb.ClTransferData",
  "camb.DarkEnergyFluid",
  "camb.DarkEnergyPPF",
  "camb.Halofit",
  "camb.InitialPowerLaw",
  "camb.MatterTransferData",
  "camb.SplinedInitialPower",
  "camb.TanhReionization",
  "camb.TransferParams",
  "camb.__author__",
  "camb.__contact__",
  "camb.__url__",
  "camb.__version__",
  "camb._command_line",
  "camb._command_line.lib_import",
  "camb._command_line.run_command_line",
  "camb._compilers",
  "camb._compilers.call_command",
  "camb._compilers.check_gfortran",
  "camb._compilers.check_ifort",
  "camb._compilers.compiler_environ",
  "camb._compilers.get_gfortran_version",
  "camb._compilers.get_ifort_version",
  "camb._compilers.gfortran_bits",
  "camb._compilers.gfortran_min",
  "camb._compilers.is_32_bit",
  "camb._compilers.is_windows",
  "camb._compilers.makefile_dict",
  "camb._config",
  "camb._config._config",
  "camb._config.config",
  "camb._config.lensing_method_curv_corr",
  "camb._config.lensing_method_flat_corr",
  "camb._config.lensing_method_harmonic",
  "camb.baseconfig",
  "camb.baseconfig.AllocatableArrayDouble",
  "camb.baseconfig.AllocatableArrayInt",
  "camb.baseconfig.AllocatableObject",
  "camb.baseconfig.BASEDIR",
  "camb.baseconfig.BoolField",
  "camb.baseconfig.CAMBError",
  "camb.baseconfig.CAMBFortranError",
  "camb.baseconfig.CAMBL",
  "camb.baseconfig.CAMBParamRangeError",
  "camb.baseconfig.CAMBStructureMeta",
  "camb.baseconfig.CAMBUnknownArgumentError",
  "camb.baseconfig.CAMBValueError",
  "camb.baseconfig.CAMB_Structure",
  "camb.baseconfig.DLLNAME",
  "camb.baseconfig.F2003Class",
  "camb.baseconfig.F2003Class.__slots__",
  "camb.baseconfig.F2003Class._class_names",
  "camb.baseconfig.F2003Class._class_pointers",
  "camb.baseconfig.F2003Class.fortran_self",
  "camb.baseconfig.FortranAllocatable",
  "camb.baseconfig.FortranManagedField",
  "camb.baseconfig.IfortGfortranLoader",
  "camb.baseconfig.NamedIntField",
  "camb.baseconfig.SizedArrayField",
  "camb.baseconfig._AllocatableArray",
  "camb.baseconfig._AllocatableObject",
  "camb.baseconfig._ArrayOfAllocatable",
  "camb.baseconfig._FortranSelf",
  "camb.baseconfig._class_cache",
  "camb.baseconfig._dll_value",
  "camb.baseconfig._f_allocatable_array_size",
  "camb.baseconfig._f_allocatable_object_array_size",
  "camb.baseconfig._f_allocatable_size",
  "camb.baseconfig._free_instance",
  "camb.baseconfig._get_allocatable",
  "camb.baseconfig._get_fortran_sizes",
  "camb.baseconfig._get_id",
  "camb.baseconfig._make_array_class",
  "camb.baseconfig._new_instance",
  "camb.baseconfig._reuse_pointer",
  "camb.baseconfig._reuse_typed_id",
  "camb.baseconfig._set_allocatable",
  "camb.baseconfig.camblib",
  "camb.baseconfig.check_fortran_version",
  "camb.baseconfig.f_pointer",
  "camb.baseconfig.fortran_array",
  "camb.baseconfig.fortran_class",
  "camb.baseconfig.gfortran",
  "camb.baseconfig.import_property",
  "camb.baseconfig.lib_import",
  "camb.baseconfig.method_import",
  "camb.baseconfig.mock_load",
  "camb.baseconfig.numpy_1d",
  "camb.baseconfig.numpy_1d_int",
  "camb.baseconfig.numpy_2d",
  "camb.baseconfig.numpy_3d",
  "camb.baseconfig.optional_fortran_class",
  "camb.baseconfig.set_cl_template_file",
  "camb.bbn",
  "camb.bbn.BBNPredictor",
  "camb.bbn.BBN_fitting_parthenope",
  "camb.bbn.BBN_table_interpolator",
  "camb.bbn.G",
  "camb.bbn.MeV",
  "camb.bbn.Mpc",
  "camb.bbn.TCMB",
  "camb.bbn._predictors",
  "camb.bbn.c",
  "camb.bbn.default_interpolation_table",
  "camb.bbn.eV",
  "camb.bbn.get_predictor",
  "camb.bbn.hbar",
  "camb.bbn.kB",
  "camb.bbn.mP",
  "camb.bbn.m_H",
  "camb.bbn.m_He",
  "camb.bbn.m_proton",
  "camb.bbn.n_photon",
  "camb.bbn.not4",
  "camb.bbn.omegafac",
  "camb.bbn.yhe_to_ypBBN",
  "camb.bbn.ypBBN_to_yhe",
  "camb.bbn.zeta3",
  "camb.bispectrum",
  "camb.bispectrum.Ini_max_string_len",
  "camb.bispectrum.TBispectrumParams",
  "camb.bispectrum.max_bispectrum_deltas",
  "camb.camb",
  "camb.camb.CAMB_GetAge",
  "camb.camb._debug_params",
  "camb.camb.get_age",
  "camb.camb.get_background",
  "camb.camb.get_matter_power_interpolator",
  "camb.camb.get_results",
  "camb.camb.get_transfer_functions",
  "camb.camb.get_zre_from_tau",
  "camb.camb.read_ini",
  "camb.camb.run_ini",
  "camb.camb.set_feedback_level",
  "camb.camb.set_params",
  "camb.camb.validate_ini_file",
  "camb.config",
  "camb.constants",
  "camb.constants.A10",
  "camb.constants.B10",
  "camb.constants.COBE_CMBTemp",
  "camb.constants.G",
  "camb.constants.Gyr",
  "camb.constants.MPc_in_sec",
  "camb.constants.Mpc",
  "camb.constants.T_21cm",
  "camb.constants.a_rad",
  "camb.constants.barssc0",
  "camb.constants.c",
  "camb.constants.compton_cT",
  "camb.constants.const_fourpi",
  "camb.constants.const_pi",
  "camb.constants.const_sqrt6",
  "camb.constants.const_twopi",
  "camb.constants.default_nnu",
  "camb.constants.eV",
  "camb.constants.f_21cm",
  "camb.constants.h_p",
  "camb.constants.hbar",
  "camb.constants.inv_neutrino_mass_fac",
  "camb.constants.k_B",
  "camb.constants.kappa",
  "camb.constants.l_21cm",
  "camb.constants.line21_const",
  "camb.constants.m_H",
  "camb.constants.m_e",
  "camb.constants.m_p",
  "camb.constants.mass_ratio_He_H",
  "camb.constants.neutrino_mass_fac",
  "camb.constants.sigma_boltz",
  "camb.constants.sigma_thomson",
  "camb.constants.zeta3",
  "camb.constants.zeta5",
  "camb.constants.zeta7",
  "camb.correlations",
  "camb.correlations._cached_gauss_legendre",
  "camb.correlations._gauss_legendre_cache",
  "camb.correlations.cl2corr",
  "camb.correlations.corr2cl",
  "camb.correlations.gauss_legendre",
  "camb.correlations.gauss_legendre_correlation",
  "camb.correlations.legendre_funcs",
  "camb.correlations.lensed_cl_derivative_unlensed",
  "camb.correlations.lensed_cl_derivatives",
  "camb.correlations.lensed_cls",
  "camb.correlations.lensed_correlations",
  "camb.correlations.lensing_R",
  "camb.correlations.lensing_correlations",
  "camb.dark_energy",
  "camb.dark_energy.AxionEffectiveFluid",
  "camb.dark_energy.DarkEnergyEqnOfState",
  "camb.dark_energy.DarkEnergyFluid",
  "camb.dark_energy.DarkEnergyModel",
  "camb.dark_energy.DarkEnergyPPF",
  "camb.emission_angle",
  "camb.emission_angle.cl_deflection_limber",
  "camb.emission_angle.get_emission_angle_powers",
  "camb.emission_angle.get_emission_delay_BB",
  "camb.emission_angle.get_source_cmb_cl",
  "camb.get_age",
  "camb.get_background",
  "camb.get_matter_power_interpolator",
  "camb.get_results",
  "camb.get_transfer_functions",
  "camb.get_zre_from_tau",
  "camb.initialpower",
  "camb.initialpower.InitialPower",
  "camb.initialpower.SplinedInitialPower",
  "camb.initialpower.__slots__",
  "camb.initialpower._class_names",
  "camb.initialpower._class_pointers",
  "camb.initialpower.fortran_self",
  "camb.initialpower.tensor_param_AT",
  "camb.initialpower.tensor_param_indeptilt",
  "camb.initialpower.tensor_param_rpivot",
  "camb.initialpower.tensor_parameterization_names",
  "camb.mathutils",
  "camb.mathutils._3j",
  "camb.mathutils._chi2",
  "camb.mathutils._coupling_3j",
  "camb.mathutils._gauss_legendre",
  "camb.mathutils.chi_squared",
  "camb.mathutils.gauss_legendre",
  "camb.mathutils.int_arg",
  "camb.mathutils.scalar_coupling_matrix",
  "camb.mathutils.threej",
  "camb.model",
  "camb.model.AccuracyParams",
  "camb.model.CAMBparams",
  "camb.model.CustomSources",
  "camb.model.NonLinear_both",
  "camb.model.NonLinear_lens",
  "camb.model.NonLinear_names",
  "camb.model.NonLinear_none",
  "camb.model.NonLinear_pk",
  "camb.model.SourceTermParams",
  "camb.model.TransferParams",
  "camb.model.Transfer_Newt_vel_baryon",
  "camb.model.Transfer_Newt_vel_cdm",
  "camb.model.Transfer_Weyl",
  "camb.model.Transfer_b",
  "camb.model.Transfer_cdm",
  "camb.model.Transfer_g",
  "camb.model.Transfer_kh",
  "camb.model.Transfer_max",
  "camb.model.Transfer_nonu",
  "camb.model.Transfer_nu",
  "camb.model.Transfer_r",
  "camb.model.Transfer_tot",
  "camb.model.Transfer_tot_de",
  "camb.model.Transfer_vel_baryon_cdm",
  "camb.model.background_names",
  "camb.model.density_names",
  "camb.model.derived_names",
  "camb.model.evolve_names",
  "camb.model.max_nu",
  "camb.model.max_transfer_redshifts",
  "camb.model.neutrino_hierarchies",
  "camb.model.neutrino_hierarchy_degenerate",
  "camb.model.neutrino_hierarchy_inverted",
  "camb.model.neutrino_hierarchy_normal",
  "camb.model.nthermo_derived",
  "camb.model.set_default_params",
  "camb.model.transfer_names",
  "camb.nonlinear",
  "camb.nonlinear.Halofit",
  "camb.nonlinear.NonLinearModel",
  "camb.nonlinear.SecondOrderPK",
  "camb.nonlinear.__slots__",
  "camb.nonlinear._class_names",
  "camb.nonlinear._class_pointers",
  "camb.nonlinear.fortran_self",
  "camb.nonlinear.halofit_bird",
  "camb.nonlinear.halofit_casarini",
  "camb.nonlinear.halofit_default",
  "camb.nonlinear.halofit_halomodel",
  "camb.nonlinear.halofit_mead",
  "camb.nonlinear.halofit_mead2015",
  "camb.nonlinear.halofit_original",
  "camb.nonlinear.halofit_peacock",
  "camb.nonlinear.halofit_takahashi",
  "camb.nonlinear.halofit_version_names",
  "camb.postborn",
  "camb.read_ini",
  "camb.recombination",
  "camb.recombination.CosmoRec",
  "camb.recombination.HyRec",
  "camb.recombination.Recfast",
  "camb.recombination.RecombinationModel",
  "camb.recombination.__slots__",
  "camb.recombination._class_names",
  "camb.recombination._class_pointers",
  "camb.recombination.fortran_self",
  "camb.reionization",
  "camb.reionization.ReionizationModel",
  "camb.reionization.TanhReionization",
  "camb.reionization.__slots__",
  "camb.reionization._class_names",
  "camb.reionization._class_pointers",
  "camb.reionization.fortran_self",
  "camb.results",
  "camb.results.CAMB_BackgroundThermalEvolution",
  "camb.results.CAMB_GetBackgroundOutputs",
  "camb.results.CAMB_SetLensPotentialCls",
  "camb.results.CAMB_SetLensedScalCls",
  "camb.results.CAMB_SetTensorCls",
  "camb.results.CAMB_SetTotCls",
  "camb.results.CAMB_SetUnlensedCls",
  "camb.results.CAMB_SetUnlensedScalCls",
  "camb.results.CAMB_SetUnlensedScalarArray",
  "camb.results.CAMB_TimeEvolution",
  "camb.results.CAMBdata",
  "camb.results.ClTransferData",
  "camb.results.MatterTransferData",
  "camb.results._ClTransferData",
  "camb.results._MatterTransferData",
  "camb.results.d_arg",
  "camb.results.int_arg",
  "camb.results.save_cmb_power_array",
  "camb.run_ini",
  "camb.set_feedback_level",
  "camb.set_params",
  "camb.sources",
  "camb.sources.GaussianSourceWindow",
  "camb.sources.SourceWindow",
  "camb.sources.SplinedSourceWindow",
  "camb.sources.__slots__",
  "camb.sources._class_names",
  "camb.sources._class_pointers",
  "camb.sources.fortran_self",
  "camb.symbolic",
  "camb.symbolic.A",
  "camb.symbolic.Delta_P_b",
  "camb.symbolic.Delta_P_de",
  "camb.symbolic.Delta_P_nu",
  "camb.symbolic.Delta_b",
  "camb.symbolic.Delta_c",
  "camb.symbolic.Delta_de",
  "camb.symbolic.Delta_g",
  "camb.symbolic.Delta_nu",
  "camb.symbolic.Delta_r",
  "camb.symbolic.E_2",
  "camb.symbolic.E_3",
  "camb.symbolic.E_eq",
  "camb.symbolic.Friedmann",
  "camb.symbolic.Friedmann_Kfac_subs",
  "camb.symbolic.Friedmann_subs",
  "camb.symbolic.G_eq",
  "camb.symbolic.H",
  "camb.symbolic.H_t",
  "camb.symbolic.J_3",
  "camb.symbolic.J_eq",
  "camb.symbolic.K_fac",
  "camb.symbolic.K_fac_sub",
  "camb.symbolic.K_sub",
  "camb.symbolic.Kf",
  "camb.symbolic.LinearPerturbation",
  "camb.symbolic.Newt_vars",
  "camb.symbolic.Newtonian_subs",
  "camb.symbolic.Newtonian_var_subs",
  "camb.symbolic.P",
  "camb.symbolic.P_t",
  "camb.symbolic.Phi_N",
  "camb.symbolic.Pi",
  "camb.symbolic.Psi_N",
  "camb.symbolic._camb_cache",
  "camb.symbolic._default_compiler",
  "camb.symbolic._default_flags",
  "camb.symbolic._first_compile",
  "camb.symbolic._func_cache",
  "camb.symbolic._make_index_func",
  "camb.symbolic._source_file_count",
  "camb.symbolic.a",
  "camb.symbolic.background_eqs",
  "camb.symbolic.camb_fortran",
  "camb.symbolic.cdm_gauge",
  "camb.symbolic.cdm_subs",
  "camb.symbolic.compile_source_function_code",
  "camb.symbolic.compile_sympy_to_camb_source_func",
  "camb.symbolic.component_eqs",
  "camb.symbolic.cons1",
  "camb.symbolic.cons2",
  "camb.symbolic.cons3",
  "camb.symbolic.cons4",
  "camb.symbolic.constraint_subs_for_variable_set",
  "camb.symbolic.constraints",
  "camb.symbolic.csq_b",
  "camb.symbolic.csqhat_de",
  "camb.symbolic.dH",
  "camb.symbolic.define_variable",
  "camb.symbolic.delta",
  "camb.symbolic.delta_P",
  "camb.symbolic.delta_eqs",
  "camb.symbolic.delta_frame",
  "camb.symbolic.density_eqs",
  "camb.symbolic.deta",
  "camb.symbolic.deta_2",
  "camb.symbolic.dphi",
  "camb.symbolic.drag_t",
  "camb.symbolic.dsigma",
  "camb.symbolic.dz",
  "camb.symbolic.eta",
  "camb.symbolic.eta_s",
  "camb.symbolic.exptau",
  "camb.symbolic.f_K",
  "camb.symbolic.frame_change",
  "camb.symbolic.frame_names",
  "camb.symbolic.get_default_compiler",
  "camb.symbolic.get_hierarchies",
  "camb.symbolic.get_scalar_temperature_sources",
  "camb.symbolic.half",
  "camb.symbolic.hdot",
  "camb.symbolic.hdot_s",
  "camb.symbolic.hdot_sub",
  "camb.symbolic.hierarchies",
  "camb.symbolic.internal_consistency_checks",
  "camb.symbolic.list_frame_dependent_vars",
  "camb.symbolic.list_perturbations",
  "camb.symbolic.make_frame_invariant",
  "camb.symbolic.newtonian_gauge",
  "camb.symbolic.opacity",
  "camb.symbolic.p_b",
  "camb.symbolic.p_c",
  "camb.symbolic.p_de",
  "camb.symbolic.p_g",
  "camb.symbolic.p_nu",
  "camb.symbolic.p_r",
  "camb.symbolic.pert_eqs",
  "camb.symbolic.phi",
  "camb.symbolic.phi_sub",
  "camb.symbolic.pi_g",
  "camb.symbolic.pi_nu",
  "camb.symbolic.pi_r",
  "camb.symbolic.polter",
  "camb.symbolic.polter_sub",
  "camb.symbolic.polter_t",
  "camb.symbolic.q",
  "camb.symbolic.q_g",
  "camb.symbolic.q_nu",
  "camb.symbolic.q_r",
  "camb.symbolic.q_sub",
  "camb.symbolic.rho",
  "camb.symbolic.rho_b",
  "camb.symbolic.rho_c",
  "camb.symbolic.rho_de",
  "camb.symbolic.rho_g",
  "camb.symbolic.rho_nu",
  "camb.symbolic.rho_r",
  "camb.symbolic.rho_t",
  "camb.symbolic.scalar_E_source",
  "camb.symbolic.sigma",
  "camb.symbolic.sigma_sub",
  "camb.symbolic.simplify_sum",
  "camb.symbolic.solve",
  "camb.symbolic.subs",
  "camb.symbolic.synchronous_gauge",
  "camb.symbolic.synchronous_subs",
  "camb.symbolic.synchronous_vars",
  "camb.symbolic.tau0",
  "camb.symbolic.tau_maxvis",
  "camb.symbolic.third",
  "camb.symbolic.tot_eqs",
  "camb.symbolic.tot_pert_subs",
  "camb.symbolic.tot_subs",
  "camb.symbolic.total_eqs",
  "camb.symbolic.v_b",
  "camb.symbolic.v_c",
  "camb.symbolic.v_de",
  "camb.symbolic.var_subs",
  "camb.symbolic.vel_eqs",
  "camb.symbolic.visibility",
  "camb.symbolic.w_de",
  "camb.symbolic.z",
  "camb.symbolic.z_sub",
  "camb.tests",
  "camb.tests.camb_test",
  "camb.tests.camb_test.CAMBParamRangeError",
  "camb.tests.camb_test.CAMBValueError",
  "camb.tests.camb_test.CambTest",
  "camb.tests.camb_test.bbn",
  "camb.tests.camb_test.correlations",
  "camb.tests.camb_test.dark_energy",
  "camb.tests.camb_test.e",
  "camb.tests.camb_test.emission_angle",
  "camb.tests.camb_test.fast",
  "camb.tests.camb_test.initialpower",
  "camb.tests.camb_test.model",
  "camb.tests.camb_test.postborn",
  "camb.threej"
 ]
}