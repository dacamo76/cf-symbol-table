{
 "errors": {
  "pyfoamalgo.tests": {
   "exception": "[Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/__init__.py'",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 111, in __init__",
    "    with open(path, 'rb') as f:",
    "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/__init__.py'",
    ""
   ]
  },
  "pyfoamalgo.tests.test_data_structures": {
   "exception": "[Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/test_data_structures.py'",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 111, in __init__",
    "    with open(path, 'rb') as f:",
    "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/test_data_structures.py'",
    ""
   ]
  },
  "pyfoamalgo.tests.test_spectrum": {
   "exception": "The subprocess /usr/share/miniconda/envs/test/bin/python has crashed (EOFError('Ran out of input'), stderr=).",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 110, in wrapper",
    "    return dct[key]",
    "KeyError: (('is_allowed_getattr', 'True', False), frozenset())",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 248, in _send",
    "    is_exception, traceback, result = pickle_load(self._get_process().stdout)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 28, in pickle_load",
    "    return pickle.load(file)",
    "EOFError: Ran out of input",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 478, in infer_or_test",
    "    context.infer_node(right))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 531, in _infer_comparison",
    "    for left in left_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 532, in <genexpr>",
    "    for right in right_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 630, in _infer_comparison_part",
    "    return ValueSet([_bool_to_value(inference_state, bool_result)])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 561, in _bool_to_value",
    "    return compiled.builtin_from_name(inference_state, str(bool_))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/__init__.py\", line 16, in builtin_from_name",
    "    name, = filter_.get(string)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/value.py\", line 445, in get",
    "    check_has_attribute=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/value.py\", line 457, in _get",
    "    unsafe=self._inference_state.allow_descriptor_getattr",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/value.py\", line 443, in <lambda>",
    "    lambda name, unsafe: access_handle.is_allowed_getattr(name, unsafe),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 386, in _workaround",
    "    return self._cached_results(name, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 112, in wrapper",
    "    result = method(self, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 390, in _cached_results",
    "    return self._subprocess.get_compiled_method_return(self.id, name, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 226, in run",
    "    return self._send(id(inference_state), function, args, kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 260, in _send",
    "    stderr,",
    "jedi.api.exceptions.InternalError: The subprocess /usr/share/miniconda/envs/test/bin/python has crashed (EOFError('Ran out of input'), stderr=).",
    ""
   ]
  },
  "pyfoamalgo.tests.test_statistics": {
   "exception": "[Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/test_statistics.py'",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 111, in __init__",
    "    with open(path, 'rb') as f:",
    "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmph1cjtkl6/lib/python3.8/site-packages/pyfoamalgo/tests/test_statistics.py'",
    ""
   ]
  }
 },
 "symbols": [
  "pyfoamalgo.AzimuthalIntegrator",
  "pyfoamalgo.CONST_HC_E",
  "pyfoamalgo.ConcentricRingsFinder",
  "pyfoamalgo.MovingAverageArray",
  "pyfoamalgo.MovingAverageScalar",
  "pyfoamalgo.OneWayAccuPairSequence",
  "pyfoamalgo.OrderedSet",
  "pyfoamalgo.SimplePairSequence",
  "pyfoamalgo.SimpleQueue",
  "pyfoamalgo.SimpleSequence",
  "pyfoamalgo.SimpleVectorSequence",
  "pyfoamalgo.Stack",
  "pyfoamalgo._AbstractSequence",
  "pyfoamalgo._MovingAverageBase",
  "pyfoamalgo._NAN_CPP_TYPES",
  "pyfoamalgo._StatDataItem",
  "pyfoamalgo.__all__",
  "pyfoamalgo.__version__",
  "pyfoamalgo._get_outer_edges",
  "pyfoamalgo.azimuthal_integration",
  "pyfoamalgo.azimuthal_integration.CONST_HC_E",
  "pyfoamalgo.azimuthal_integration.__all__",
  "pyfoamalgo.azimuthal_integration.compute_q",
  "pyfoamalgo.azimuthal_integration.energy2wavelength",
  "pyfoamalgo.compute_q",
  "pyfoamalgo.compute_spectrum_1d",
  "pyfoamalgo.compute_statistics",
  "pyfoamalgo.computer_vision",
  "pyfoamalgo.computer_vision.__all__",
  "pyfoamalgo.computer_vision.edge_detect",
  "pyfoamalgo.computer_vision.fourier_transform_2d",
  "pyfoamalgo.correct_image_data",
  "pyfoamalgo.data_structures",
  "pyfoamalgo.data_structures.MovingAverageArray",
  "pyfoamalgo.data_structures.MovingAverageScalar",
  "pyfoamalgo.data_structures.OneWayAccuPairSequence",
  "pyfoamalgo.data_structures.OrderedSet",
  "pyfoamalgo.data_structures.SimplePairSequence",
  "pyfoamalgo.data_structures.SimpleQueue",
  "pyfoamalgo.data_structures.SimpleSequence",
  "pyfoamalgo.data_structures.SimpleVectorSequence",
  "pyfoamalgo.data_structures.Stack",
  "pyfoamalgo.data_structures._AbstractSequence",
  "pyfoamalgo.data_structures._MovingAverageBase",
  "pyfoamalgo.data_structures._StatDataItem",
  "pyfoamalgo.data_structures.__all__",
  "pyfoamalgo.down_sample",
  "pyfoamalgo.edge_detect",
  "pyfoamalgo.energy2wavelength",
  "pyfoamalgo.fourier_transform_2d",
  "pyfoamalgo.geometry",
  "pyfoamalgo.geometry.AGIPD_1MGeometry",
  "pyfoamalgo.geometry.DSSC_1MGeometry",
  "pyfoamalgo.geometry.EPix100Geometry",
  "pyfoamalgo.geometry.JungFrauGeometry",
  "pyfoamalgo.geometry.LPD_1MGeometry",
  "pyfoamalgo.geometry.__all__",
  "pyfoamalgo.geometry.geometry_1m",
  "pyfoamalgo.geometry.geometry_1m.AGIPD_1MGeometry",
  "pyfoamalgo.geometry.geometry_1m.DSSC_1MGeometry",
  "pyfoamalgo.geometry.geometry_1m.LPD_1MGeometry",
  "pyfoamalgo.geometry.geometry_1m._IMAGE_DTYPE",
  "pyfoamalgo.geometry.geometry_base",
  "pyfoamalgo.geometry.geometry_base._1MGeometryMixin",
  "pyfoamalgo.geometry.geometry_base._GeneralizedGeometryMixin",
  "pyfoamalgo.geometry.geometry_base._GeneralizedGeometryMixin.n_modules",
  "pyfoamalgo.geometry.geometry_base._GeometryMixin",
  "pyfoamalgo.geometry.geometry_base._IMAGE_DTYPE",
  "pyfoamalgo.geometry.geometry_generalized",
  "pyfoamalgo.geometry.geometry_generalized.EPix100Geometry",
  "pyfoamalgo.geometry.geometry_generalized.JungFrauGeometry",
  "pyfoamalgo.geometry.geometry_generalized._IMAGE_DTYPE",
  "pyfoamalgo.geometry.geometry_generalized.n_modules",
  "pyfoamalgo.geometry.geometry_utils",
  "pyfoamalgo.geometry.geometry_utils.stack_detector_modules",
  "pyfoamalgo.geometry.geometry_utils.use_doc",
  "pyfoamalgo.geometry.stack_detector_modules",
  "pyfoamalgo.geometry.tests",
  "pyfoamalgo.geometry.tests.test_1M_geometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.AGIPD_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.DSSC_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.LPD_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.TestAGIPD_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.TestDSSC_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry.TestLPD_1MGeometry",
  "pyfoamalgo.geometry.tests.test_1M_geometry._IMAGE_DTYPE",
  "pyfoamalgo.geometry.tests.test_1M_geometry._RAW_IMAGE_DTYPE",
  "pyfoamalgo.geometry.tests.test_1M_geometry._Test1MGeometryMixin",
  "pyfoamalgo.geometry.tests.test_1M_geometry._geom_path",
  "pyfoamalgo.geometry.tests.test_geometry",
  "pyfoamalgo.geometry.tests.test_geometry.EPix100Geometry",
  "pyfoamalgo.geometry.tests.test_geometry.JungFrauGeometry",
  "pyfoamalgo.geometry.tests.test_geometry.TestEPix100Geometry",
  "pyfoamalgo.geometry.tests.test_geometry.TestJungFrauGeometry",
  "pyfoamalgo.geometry.tests.test_geometry._IMAGE_DTYPE",
  "pyfoamalgo.geometry.tests.test_geometry._RAW_IMAGE_DTYPE",
  "pyfoamalgo.geometry.tests.test_geometry._geom_path",
  "pyfoamalgo.geometry.tests.test_geometry_utils",
  "pyfoamalgo.geometry.tests.test_geometry_utils.TestStackDetectorModules",
  "pyfoamalgo.geometry.tests.test_geometry_utils.stack_detector_modules",
  "pyfoamalgo.hist_with_stats",
  "pyfoamalgo.imageproc",
  "pyfoamalgo.imageproc.__all__",
  "pyfoamalgo.imageproc.correct_image_data",
  "pyfoamalgo.imageproc.mask_image_data",
  "pyfoamalgo.imageproc.nanmean_image_data",
  "pyfoamalgo.imageproc.nanmean_images",
  "pyfoamalgo.intersection",
  "pyfoamalgo.lib",
  "pyfoamalgo.lib.imageproc.movingAvgImageData",
  "pyfoamalgo.mask_image_data",
  "pyfoamalgo.miscellaneous",
  "pyfoamalgo.miscellaneous.__all__",
  "pyfoamalgo.miscellaneous.normalize_auc",
  "pyfoamalgo.nanhist_with_stats",
  "pyfoamalgo.nanmean",
  "pyfoamalgo.nanmean_image_data",
  "pyfoamalgo.nanmean_images",
  "pyfoamalgo.nanstd",
  "pyfoamalgo.nansum",
  "pyfoamalgo.nanvar",
  "pyfoamalgo.normalize_auc",
  "pyfoamalgo.quick_min_max",
  "pyfoamalgo.sampling",
  "pyfoamalgo.sampling.__all__",
  "pyfoamalgo.sampling.down_sample",
  "pyfoamalgo.sampling.slice_curve",
  "pyfoamalgo.sampling.up_sample",
  "pyfoamalgo.slice_curve",
  "pyfoamalgo.spectrum",
  "pyfoamalgo.spectrum.__all__",
  "pyfoamalgo.spectrum.compute_spectrum_1d",
  "pyfoamalgo.statistics",
  "pyfoamalgo.statistics._NAN_CPP_TYPES",
  "pyfoamalgo.statistics.__all__",
  "pyfoamalgo.statistics._get_outer_edges",
  "pyfoamalgo.statistics.compute_statistics",
  "pyfoamalgo.statistics.hist_with_stats",
  "pyfoamalgo.statistics.nanhist_with_stats",
  "pyfoamalgo.statistics.nanmean",
  "pyfoamalgo.statistics.nanstd",
  "pyfoamalgo.statistics.nansum",
  "pyfoamalgo.statistics.nanvar",
  "pyfoamalgo.statistics.quick_min_max",
  "pyfoamalgo.tests",
  "pyfoamalgo.tests.test_azimuthal_integ.AzimuthalIntegrator",
  "pyfoamalgo.tests.test_azimuthal_integ.ConcentricRingsFinder",
  "pyfoamalgo.tests.test_azimuthal_integ.TestAzimuthalIntegrationMisc",
  "pyfoamalgo.tests.test_azimuthal_integ.TestAzimuthalIntegrator",
  "pyfoamalgo.tests.test_azimuthal_integ.TestConcentricRingsFinder",
  "pyfoamalgo.tests.test_azimuthal_integ.compute_q",
  "pyfoamalgo.tests.test_azimuthal_integ.energy2wavelength",
  "pyfoamalgo.tests.test_computer_vision.TestEdgeDetect",
  "pyfoamalgo.tests.test_computer_vision.TestFourierTransform",
  "pyfoamalgo.tests.test_computer_vision.edge_detect",
  "pyfoamalgo.tests.test_computer_vision.fourier_transform_2d",
  "pyfoamalgo.tests.test_helpers.TestGeometry",
  "pyfoamalgo.tests.test_helpers.intersection",
  "pyfoamalgo.tests.test_imageproc.TestImageProc",
  "pyfoamalgo.tests.test_imageproc.TestMaskImageData",
  "pyfoamalgo.tests.test_imageproc.correct_image_data",
  "pyfoamalgo.tests.test_imageproc.mask_image_data",
  "pyfoamalgo.tests.test_imageproc.movingAvgImageData",
  "pyfoamalgo.tests.test_imageproc.nanmean_image_data",
  "pyfoamalgo.tests.test_imageproc.nanmean_images",
  "pyfoamalgo.tests.test_miscellaneous.TestMiscellaneous",
  "pyfoamalgo.tests.test_miscellaneous.normalize_auc",
  "pyfoamalgo.tests.test_sampling.TestSampling",
  "pyfoamalgo.tests.test_sampling.down_sample",
  "pyfoamalgo.tests.test_sampling.slice_curve",
  "pyfoamalgo.tests.test_sampling.up_sample",
  "pyfoamalgo.up_sample"
 ]
}