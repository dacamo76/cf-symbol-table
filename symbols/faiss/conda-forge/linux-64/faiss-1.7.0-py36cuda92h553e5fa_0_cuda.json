{
 "errors": {
  "faiss.loader": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 487, in get_global_filters",
    "    origin_scope=origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 326, in get_filters",
    "    yield from filters",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 71, in get_filters",
    "    yield from self.iter_star_filters()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 388, in import_module_by_names",
    "    _add_error(module_context, name, message)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 121, in _add_error",
    "    analysis.add(value, 'import-error', name, message)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/analysis.py\", line 78, in add",
    "    if _check_for_exception_catch(node_context, node, exception, payload):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/analysis.py\", line 205, in _check_for_exception_catch",
    "    if obj.type == 'try_stmt' and check_try_for_except(obj, exception):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/analysis.py\", line 158, in check_try_for_except",
    "    except_classes = node_context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "faiss.AlignedTableFloat32",
  "faiss.AlignedTableUint16",
  "faiss.AlignedTableUint8",
  "faiss.AlignedTable_to_array",
  "faiss.AllocInfo",
  "faiss.AllocRequest",
  "faiss.ArrayInvertedLists",
  "faiss.AutoTuneCriterion",
  "faiss.BitstringReader",
  "faiss.BitstringWriter",
  "faiss.BlockInvertedLists",
  "faiss.BufferList",
  "faiss.BufferedIOReader",
  "faiss.BufferedIOWriter",
  "faiss.ByteVector",
  "faiss.CMax_float_partition_fuzzy",
  "faiss.CMax_uint16_partition_fuzzy",
  "faiss.CMin_float_partition_fuzzy",
  "faiss.CMin_uint16_partition_fuzzy",
  "faiss.CenteringTransform",
  "faiss.CharVector",
  "faiss.Cloner",
  "faiss.Clustering",
  "faiss.ConcatenatedInvertedLists",
  "faiss.Device",
  "faiss.DirectMap",
  "faiss.DistanceComputer",
  "faiss.DistanceDataType_F16",
  "faiss.DistanceDataType_F32",
  "faiss.DoubleVector",
  "faiss.EnumeratedVectors",
  "faiss.FAISS_VERSION_MAJOR",
  "faiss.FAISS_VERSION_MINOR",
  "faiss.FAISS_VERSION_PATCH",
  "faiss.FastScanStats",
  "faiss.FileIOReader",
  "faiss.FileIOWriter",
  "faiss.FlatData",
  "faiss.FloatVector",
  "faiss.GpuClonerOptions",
  "faiss.GpuDistanceParams",
  "faiss.GpuIndex",
  "faiss.GpuMultipleClonerOptions",
  "faiss.GpuParameterSpace",
  "faiss.GpuResources",
  "faiss.HNSW",
  "faiss.HStackInvertedLists",
  "faiss.IDSelector",
  "faiss.INDICES_32_BIT",
  "faiss.INDICES_64_BIT",
  "faiss.INDICES_CPU",
  "faiss.INDICES_IVF",
  "faiss.IOReader",
  "faiss.IOWriter",
  "faiss.IO_FLAG_MMAP",
  "faiss.IO_FLAG_ONDISK_SAME_DIR",
  "faiss.IO_FLAG_READ_ONLY",
  "faiss.IO_FLAG_SKIP_IVF_DATA",
  "faiss.ITQMatrix",
  "faiss.ITQTransform",
  "faiss.IVFFastScanStats",
  "faiss.IVFLists",
  "faiss.IVFPQSearchParameters",
  "faiss.IVFSearchParameters",
  "faiss.Index",
  "faiss.IndexProxy",
  "faiss.IndicesDataType_I32",
  "faiss.IndicesDataType_I64",
  "faiss.Int16Vector",
  "faiss.IntVector",
  "faiss.InterruptCallback",
  "faiss.IntersectionCriterion",
  "faiss.InvertedLists",
  "faiss.Kmeans",
  "faiss.Level1Quantizer",
  "faiss.LinearTransform",
  "faiss.LongLongVector",
  "faiss.LongVector",
  "faiss.METRIC_BrayCurtis",
  "faiss.METRIC_Canberra",
  "faiss.METRIC_INNER_PRODUCT",
  "faiss.METRIC_JensenShannon",
  "faiss.METRIC_L1",
  "faiss.METRIC_L2",
  "faiss.METRIC_Linf",
  "faiss.METRIC_Lp",
  "faiss.MapLong2Long",
  "faiss.MaskedInvertedLists",
  "faiss.MatrixStats",
  "faiss.MultiIndexQuantizer",
  "faiss.NormalizationTransform",
  "faiss.OPQMatrix",
  "faiss.OnDiskInvertedLists",
  "faiss.OnDiskOneList",
  "faiss.OneRecallAtRCriterion",
  "faiss.OperatingPoint",
  "faiss.Other",
  "faiss.PCAMatrix",
  "faiss.PQDecoder16",
  "faiss.PQDecoder8",
  "faiss.PQDecoderGeneric",
  "faiss.PQEncoder16",
  "faiss.PQEncoder8",
  "faiss.PQEncoderGeneric",
  "faiss.ParameterRange",
  "faiss.ParameterSpace",
  "faiss.PartitionStats",
  "faiss.PermutationObjective",
  "faiss.PolysemousTraining",
  "faiss.ProductQuantizer",
  "faiss.PyCallbackIOReader",
  "faiss.PyCallbackIOWriter",
  "faiss.Quantizer",
  "faiss.QuantizerPrecomputedCodes",
  "faiss.RandomGenerator",
  "faiss.RandomRotationMatrix",
  "faiss.RangeQueryResult",
  "faiss.RangeSearchPartialResult",
  "faiss.RangeSearchResult",
  "faiss.ReadOnlyInvertedLists",
  "faiss.ReconstructFromNeighbors",
  "faiss.RemapDimensionsTransform",
  "faiss.Repeat",
  "faiss.ReproduceDistancesObjective",
  "faiss.ResultHeap",
  "faiss.SHARED_PTR_DISOWN",
  "faiss.ScalarQuantizer",
  "faiss.SimulatedAnnealingOptimizer",
  "faiss.SimulatedAnnealingParameters",
  "faiss.SliceInvertedLists",
  "faiss.SlidingIndexWindow",
  "faiss.StandardGpuResources",
  "faiss.StopWordsInvertedLists",
  "faiss.SwigPyIterator",
  "faiss.Temporary",
  "faiss.TemporaryMemoryBuffer",
  "faiss.TemporaryMemoryOverflow",
  "faiss.ThreadedIndexBase",
  "faiss.ToCPUCloner",
  "faiss.ToGpuCloner",
  "faiss.UInt16Vector",
  "faiss.UInt32Vector",
  "faiss.Uint64Vector",
  "faiss.Unified",
  "faiss.VStackInvertedLists",
  "faiss.VectorIOReader",
  "faiss.VectorIOWriter",
  "faiss.VectorTransform",
  "faiss.VisitedTable",
  "faiss.ZnSphereCodec",
  "faiss.ZnSphereSearch",
  "faiss._SwigNonDynamicMeta",
  "faiss.__version__",
  "faiss._swig_add_metaclass",
  "faiss._swig_repr",
  "faiss._swig_setattr_nondynamic_class_variable",
  "faiss._swig_setattr_nondynamic_instance_variable",
  "faiss.add_ref_in_constructor",
  "faiss.add_ref_in_function",
  "faiss.add_ref_in_method",
  "faiss.allocTypeToString",
  "faiss.array_to_AlignedTable",
  "faiss.bfKnn",
  "faiss.binary_to_real",
  "faiss.bincode_hist",
  "faiss.bitvec_print",
  "faiss.bitvec_shuffle",
  "faiss.bitvecs2fvecs",
  "faiss.bruteForceKnn",
  "faiss.byte_rand",
  "faiss.cast_cudastream_t_to_integer",
  "faiss.cast_integer_to_cudastream_t",
  "faiss.cast_integer_to_float_ptr",
  "faiss.cast_integer_to_idx_t_ptr",
  "faiss.cast_integer_to_int_ptr",
  "faiss.cast_integer_to_uint8_ptr",
  "faiss.cast_integer_to_void_ptr",
  "faiss.check_compatible_for_merge",
  "faiss.check_openmp",
  "faiss.clone_index",
  "faiss.compute_PQ_dis_tables_dsub2",
  "faiss.contrib",
  "faiss.contrib.client_server.ClientIndex",
  "faiss.contrib.client_server.SearchServer",
  "faiss.contrib.client_server.run_index_server",
  "faiss.contrib.datasets.Dataset",
  "faiss.contrib.datasets.SyntheticDataset",
  "faiss.contrib.datasets.dataset_basedir",
  "faiss.contrib.datasets.sanitize",
  "faiss.contrib.evaluation.counts_to_PR",
  "faiss.contrib.evaluation.filter_range_results",
  "faiss.contrib.evaluation.knn_intersection_measure",
  "faiss.contrib.evaluation.range_PR",
  "faiss.contrib.evaluation.sort_range_res_1",
  "faiss.contrib.evaluation.sort_range_res_2",
  "faiss.contrib.evaluation.test_ref_knn_with_draws",
  "faiss.contrib.evaluation.test_ref_range_results",
  "faiss.contrib.exhaustive_search.LOG",
  "faiss.contrib.exhaustive_search.apply_maxres",
  "faiss.contrib.exhaustive_search.knn",
  "faiss.contrib.exhaustive_search.knn_ground_truth",
  "faiss.contrib.exhaustive_search.range_ground_truth",
  "faiss.contrib.exhaustive_search.range_search_gpu",
  "faiss.contrib.exhaustive_search.range_search_max_results",
  "faiss.contrib.exhaustive_search.threshold_radius",
  "faiss.contrib.factory_tools.get_code_size",
  "faiss.contrib.factory_tools.reverse_index_factory",
  "faiss.contrib.inspect_tools.get_LinearTransform_matrix",
  "faiss.contrib.inspect_tools.get_invlist",
  "faiss.contrib.inspect_tools.get_pq_centroids",
  "faiss.contrib.inspect_tools.print_object_fields",
  "faiss.contrib.ondisk.LOG",
  "faiss.contrib.ondisk.merge_ondisk",
  "faiss.contrib.rpc.Client",
  "faiss.contrib.rpc.FileSock",
  "faiss.contrib.rpc.LOG",
  "faiss.contrib.rpc.PORT",
  "faiss.contrib.rpc.Server",
  "faiss.contrib.rpc.inline_send_handle",
  "faiss.contrib.rpc.inline_send_string",
  "faiss.contrib.rpc.run_server",
  "faiss.contrib.torch_utils.faiss_module",
  "faiss.contrib.torch_utils.handle_torch_Index",
  "faiss.contrib.torch_utils.obj",
  "faiss.contrib.torch_utils.swig_ptr_from_FloatTensor",
  "faiss.contrib.torch_utils.swig_ptr_from_HalfTensor",
  "faiss.contrib.torch_utils.swig_ptr_from_IndicesTensor",
  "faiss.contrib.torch_utils.swig_ptr_from_IntTensor",
  "faiss.contrib.torch_utils.swig_ptr_from_UInt8Tensor",
  "faiss.contrib.torch_utils.symbol",
  "faiss.contrib.torch_utils.the_class",
  "faiss.contrib.torch_utils.torch_replace_method",
  "faiss.contrib.torch_utils.torch_replacement_knn_gpu",
  "faiss.contrib.torch_utils.using_stream",
  "faiss.contrib.vecs_io.bvecs_mmap",
  "faiss.contrib.vecs_io.fvecs_mmap",
  "faiss.contrib.vecs_io.fvecs_read",
  "faiss.contrib.vecs_io.fvecs_write",
  "faiss.contrib.vecs_io.ivecs_mmap",
  "faiss.contrib.vecs_io.ivecs_read",
  "faiss.contrib.vecs_io.ivecs_write",
  "faiss.copy_array_to_AlignedTable",
  "faiss.copy_array_to_vector",
  "faiss.crosshamming_count_thres",
  "faiss.cvar",
  "faiss.deserialize_index",
  "faiss.downcast_IndexBinary",
  "faiss.downcast_InvertedLists",
  "faiss.downcast_VectorTransform",
  "faiss.downcast_index",
  "faiss.eval_intersection",
  "faiss.extract_index_ivf",
  "faiss.float_maxheap_array_t",
  "faiss.float_minheap_array_t",
  "faiss.float_rand",
  "faiss.fourcc",
  "faiss.fvec2bitvec",
  "faiss.fvec_L1",
  "faiss.fvec_L2sqr",
  "faiss.fvec_Linf",
  "faiss.fvec_argsort",
  "faiss.fvec_inner_product",
  "faiss.fvec_madd",
  "faiss.fvec_norm_L2sqr",
  "faiss.fvec_norms_L2",
  "faiss.fvec_renorm_L2",
  "faiss.fvecs2bitvecs",
  "faiss.fvecs_maybe_subsample",
  "faiss.get_cycles",
  "faiss.get_extra_distance_computer",
  "faiss.get_invlist_range",
  "faiss.get_mem_usage_kb",
  "faiss.get_num_gpus",
  "faiss.getmillisecs",
  "faiss.gpu_profiler_start",
  "faiss.gpu_profiler_stop",
  "faiss.gpu_sync_all_devices",
  "faiss.hamming_count_thres",
  "faiss.hamming_range_search",
  "faiss.hammings",
  "faiss.handle_AutoTuneCriterion",
  "faiss.handle_Clustering",
  "faiss.handle_IOReader",
  "faiss.handle_IOWriter",
  "faiss.handle_Index",
  "faiss.handle_MatrixStats",
  "faiss.handle_ParameterSpace",
  "faiss.handle_Quantizer",
  "faiss.handle_VectorTransform",
  "faiss.hash_bytes",
  "faiss.imbalance_factor",
  "faiss.index_binary_factory",
  "faiss.index_cpu_to_all_gpus",
  "faiss.index_cpu_to_gpu",
  "faiss.index_cpu_to_gpu_multiple_py",
  "faiss.index_cpu_to_gpus_list",
  "faiss.index_factory",
  "faiss.index_gpu_to_cpu",
  "faiss.initialize_IVFPQ_precomputed_table",
  "faiss.inner_product_to_L2sqr",
  "faiss.instr_set",
  "faiss.instruction_set",
  "faiss.int64_rand",
  "faiss.int_maxheap_array_t",
  "faiss.int_minheap_array_t",
  "faiss.ivec_checksum",
  "faiss.ivec_hist",
  "faiss.kmax",
  "faiss.kmeans_clustering",
  "faiss.kmin",
  "faiss.knn",
  "faiss.knn_L2sqr",
  "faiss.knn_extra_metrics",
  "faiss.knn_inner_product",
  "faiss.lo_build",
  "faiss.lo_listno",
  "faiss.lo_offset",
  "faiss.loader",
  "faiss.loader.instr_set",
  "faiss.loader.instruction_set",
  "faiss.loader.logger",
  "faiss.logger",
  "faiss.lrand",
  "faiss.makeDevAlloc",
  "faiss.makeSpaceAlloc",
  "faiss.makeTempAlloc",
  "faiss.match_hamming_thres",
  "faiss.matrix_qr",
  "faiss.memcpy",
  "faiss.memorySpaceToString",
  "faiss.merge_into",
  "faiss.merge_result_table_with",
  "faiss.normalize_L2",
  "faiss.obj",
  "faiss.omp_get_max_threads",
  "faiss.omp_set_num_threads",
  "faiss.pairwise_L2sqr",
  "faiss.pairwise_distances",
  "faiss.pairwise_extra_distances",
  "faiss.pairwise_indexed_L2sqr",
  "faiss.pairwise_indexed_inner_product",
  "faiss.popcount64",
  "faiss.quantize_LUT_and_bias",
  "faiss.rand",
  "faiss.rand_perm",
  "faiss.range_search_L2sqr",
  "faiss.range_search_inner_product",
  "faiss.range_search_with_parameters",
  "faiss.ranklist_handle_ties",
  "faiss.ranklist_intersection_size",
  "faiss.read_InvertedLists",
  "faiss.read_ProductQuantizer",
  "faiss.read_VectorTransform",
  "faiss.read_index",
  "faiss.real_to_binary",
  "faiss.reflection",
  "faiss.replace_method",
  "faiss.replacement_map_add",
  "faiss.replacement_map_search_multiple",
  "faiss.rev_swig_ptr",
  "faiss.round_uint8_per_column",
  "faiss.search_and_return_centroids",
  "faiss.search_centroid",
  "faiss.search_with_parameters",
  "faiss.serialize_index",
  "faiss.set_invlist_range",
  "faiss.simd_histogram_16",
  "faiss.simd_histogram_8",
  "faiss.sizeof_long",
  "faiss.swig_ptr",
  "faiss.swigfaiss",
  "faiss.swigfaiss.AlignedTableFloat32",
  "faiss.swigfaiss.AlignedTableUint16",
  "faiss.swigfaiss.AlignedTableUint8",
  "faiss.swigfaiss.AllocInfo",
  "faiss.swigfaiss.AllocRequest",
  "faiss.swigfaiss.ArrayInvertedLists",
  "faiss.swigfaiss.AutoTuneCriterion",
  "faiss.swigfaiss.BitstringReader",
  "faiss.swigfaiss.BitstringWriter",
  "faiss.swigfaiss.BlockInvertedLists",
  "faiss.swigfaiss.BufferList",
  "faiss.swigfaiss.BufferedIOReader",
  "faiss.swigfaiss.BufferedIOWriter",
  "faiss.swigfaiss.ByteVector",
  "faiss.swigfaiss.CMax_float_partition_fuzzy",
  "faiss.swigfaiss.CMax_uint16_partition_fuzzy",
  "faiss.swigfaiss.CMin_float_partition_fuzzy",
  "faiss.swigfaiss.CMin_uint16_partition_fuzzy",
  "faiss.swigfaiss.CenteringTransform",
  "faiss.swigfaiss.CharVector",
  "faiss.swigfaiss.Cloner",
  "faiss.swigfaiss.Clustering",
  "faiss.swigfaiss.Device",
  "faiss.swigfaiss.DirectMap",
  "faiss.swigfaiss.DistanceComputer",
  "faiss.swigfaiss.DistanceDataType_F16",
  "faiss.swigfaiss.DistanceDataType_F32",
  "faiss.swigfaiss.DoubleVector",
  "faiss.swigfaiss.EnumeratedVectors",
  "faiss.swigfaiss.FAISS_VERSION_MAJOR",
  "faiss.swigfaiss.FAISS_VERSION_MINOR",
  "faiss.swigfaiss.FAISS_VERSION_PATCH",
  "faiss.swigfaiss.FastScanStats",
  "faiss.swigfaiss.FileIOReader",
  "faiss.swigfaiss.FileIOWriter",
  "faiss.swigfaiss.FlatData",
  "faiss.swigfaiss.FloatVector",
  "faiss.swigfaiss.GpuClonerOptions",
  "faiss.swigfaiss.GpuDistanceParams",
  "faiss.swigfaiss.GpuIndex",
  "faiss.swigfaiss.GpuMultipleClonerOptions",
  "faiss.swigfaiss.GpuParameterSpace",
  "faiss.swigfaiss.GpuResources",
  "faiss.swigfaiss.HNSW",
  "faiss.swigfaiss.HStackInvertedLists",
  "faiss.swigfaiss.IDSelector",
  "faiss.swigfaiss.INDICES_32_BIT",
  "faiss.swigfaiss.INDICES_64_BIT",
  "faiss.swigfaiss.INDICES_CPU",
  "faiss.swigfaiss.INDICES_IVF",
  "faiss.swigfaiss.IOReader",
  "faiss.swigfaiss.IOWriter",
  "faiss.swigfaiss.IO_FLAG_MMAP",
  "faiss.swigfaiss.IO_FLAG_ONDISK_SAME_DIR",
  "faiss.swigfaiss.IO_FLAG_READ_ONLY",
  "faiss.swigfaiss.IO_FLAG_SKIP_IVF_DATA",
  "faiss.swigfaiss.ITQMatrix",
  "faiss.swigfaiss.ITQTransform",
  "faiss.swigfaiss.IVFFastScanStats",
  "faiss.swigfaiss.IVFLists",
  "faiss.swigfaiss.IVFPQSearchParameters",
  "faiss.swigfaiss.IVFSearchParameters",
  "faiss.swigfaiss.Index",
  "faiss.swigfaiss.IndicesDataType_I32",
  "faiss.swigfaiss.IndicesDataType_I64",
  "faiss.swigfaiss.Int16Vector",
  "faiss.swigfaiss.IntVector",
  "faiss.swigfaiss.InterruptCallback",
  "faiss.swigfaiss.IntersectionCriterion",
  "faiss.swigfaiss.InvertedLists",
  "faiss.swigfaiss.Level1Quantizer",
  "faiss.swigfaiss.LinearTransform",
  "faiss.swigfaiss.LongLongVector",
  "faiss.swigfaiss.LongVector",
  "faiss.swigfaiss.METRIC_BrayCurtis",
  "faiss.swigfaiss.METRIC_Canberra",
  "faiss.swigfaiss.METRIC_INNER_PRODUCT",
  "faiss.swigfaiss.METRIC_JensenShannon",
  "faiss.swigfaiss.METRIC_L1",
  "faiss.swigfaiss.METRIC_L2",
  "faiss.swigfaiss.METRIC_Linf",
  "faiss.swigfaiss.METRIC_Lp",
  "faiss.swigfaiss.MapLong2Long",
  "faiss.swigfaiss.MaskedInvertedLists",
  "faiss.swigfaiss.MatrixStats",
  "faiss.swigfaiss.MultiIndexQuantizer",
  "faiss.swigfaiss.NormalizationTransform",
  "faiss.swigfaiss.OPQMatrix",
  "faiss.swigfaiss.OnDiskInvertedLists",
  "faiss.swigfaiss.OnDiskOneList",
  "faiss.swigfaiss.OneRecallAtRCriterion",
  "faiss.swigfaiss.OperatingPoint",
  "faiss.swigfaiss.Other",
  "faiss.swigfaiss.PCAMatrix",
  "faiss.swigfaiss.PQDecoder16",
  "faiss.swigfaiss.PQDecoder8",
  "faiss.swigfaiss.PQDecoderGeneric",
  "faiss.swigfaiss.PQEncoder16",
  "faiss.swigfaiss.PQEncoder8",
  "faiss.swigfaiss.PQEncoderGeneric",
  "faiss.swigfaiss.ParameterRange",
  "faiss.swigfaiss.ParameterSpace",
  "faiss.swigfaiss.PartitionStats",
  "faiss.swigfaiss.PermutationObjective",
  "faiss.swigfaiss.PolysemousTraining",
  "faiss.swigfaiss.ProductQuantizer",
  "faiss.swigfaiss.PyCallbackIOReader",
  "faiss.swigfaiss.PyCallbackIOWriter",
  "faiss.swigfaiss.Quantizer",
  "faiss.swigfaiss.QuantizerPrecomputedCodes",
  "faiss.swigfaiss.RandomGenerator",
  "faiss.swigfaiss.RandomRotationMatrix",
  "faiss.swigfaiss.RangeQueryResult",
  "faiss.swigfaiss.RangeSearchPartialResult",
  "faiss.swigfaiss.RangeSearchResult",
  "faiss.swigfaiss.ReadOnlyInvertedLists",
  "faiss.swigfaiss.ReconstructFromNeighbors",
  "faiss.swigfaiss.RemapDimensionsTransform",
  "faiss.swigfaiss.Repeat",
  "faiss.swigfaiss.ReproduceDistancesObjective",
  "faiss.swigfaiss.SHARED_PTR_DISOWN",
  "faiss.swigfaiss.ScalarQuantizer",
  "faiss.swigfaiss.SimulatedAnnealingOptimizer",
  "faiss.swigfaiss.SimulatedAnnealingParameters",
  "faiss.swigfaiss.SliceInvertedLists",
  "faiss.swigfaiss.SlidingIndexWindow",
  "faiss.swigfaiss.StandardGpuResources",
  "faiss.swigfaiss.StopWordsInvertedLists",
  "faiss.swigfaiss.SwigPyIterator",
  "faiss.swigfaiss.Temporary",
  "faiss.swigfaiss.TemporaryMemoryBuffer",
  "faiss.swigfaiss.TemporaryMemoryOverflow",
  "faiss.swigfaiss.ThreadedIndexBase",
  "faiss.swigfaiss.ToCPUCloner",
  "faiss.swigfaiss.ToGpuCloner",
  "faiss.swigfaiss.UInt16Vector",
  "faiss.swigfaiss.UInt32Vector",
  "faiss.swigfaiss.Uint64Vector",
  "faiss.swigfaiss.Unified",
  "faiss.swigfaiss.VStackInvertedLists",
  "faiss.swigfaiss.VectorIOReader",
  "faiss.swigfaiss.VectorIOWriter",
  "faiss.swigfaiss.VectorTransform",
  "faiss.swigfaiss.VisitedTable",
  "faiss.swigfaiss.ZnSphereCodec",
  "faiss.swigfaiss.ZnSphereSearch",
  "faiss.swigfaiss._SwigNonDynamicMeta",
  "faiss.swigfaiss._swig_add_metaclass",
  "faiss.swigfaiss._swig_repr",
  "faiss.swigfaiss._swig_setattr_nondynamic_class_variable",
  "faiss.swigfaiss._swig_setattr_nondynamic_instance_variable",
  "faiss.swigfaiss.allocTypeToString",
  "faiss.swigfaiss.bfKnn",
  "faiss.swigfaiss.binary_to_real",
  "faiss.swigfaiss.bincode_hist",
  "faiss.swigfaiss.bitvec_print",
  "faiss.swigfaiss.bitvec_shuffle",
  "faiss.swigfaiss.bitvecs2fvecs",
  "faiss.swigfaiss.bruteForceKnn",
  "faiss.swigfaiss.byte_rand",
  "faiss.swigfaiss.cast_cudastream_t_to_integer",
  "faiss.swigfaiss.cast_integer_to_cudastream_t",
  "faiss.swigfaiss.cast_integer_to_float_ptr",
  "faiss.swigfaiss.cast_integer_to_idx_t_ptr",
  "faiss.swigfaiss.cast_integer_to_int_ptr",
  "faiss.swigfaiss.cast_integer_to_uint8_ptr",
  "faiss.swigfaiss.cast_integer_to_void_ptr",
  "faiss.swigfaiss.check_compatible_for_merge",
  "faiss.swigfaiss.check_openmp",
  "faiss.swigfaiss.clone_index",
  "faiss.swigfaiss.compute_PQ_dis_tables_dsub2",
  "faiss.swigfaiss.crosshamming_count_thres",
  "faiss.swigfaiss.cvar",
  "faiss.swigfaiss.downcast_IndexBinary",
  "faiss.swigfaiss.downcast_InvertedLists",
  "faiss.swigfaiss.downcast_VectorTransform",
  "faiss.swigfaiss.downcast_index",
  "faiss.swigfaiss.extract_index_ivf",
  "faiss.swigfaiss.float_maxheap_array_t",
  "faiss.swigfaiss.float_minheap_array_t",
  "faiss.swigfaiss.float_rand",
  "faiss.swigfaiss.fourcc",
  "faiss.swigfaiss.fvec2bitvec",
  "faiss.swigfaiss.fvec_L1",
  "faiss.swigfaiss.fvec_L2sqr",
  "faiss.swigfaiss.fvec_Linf",
  "faiss.swigfaiss.fvec_argsort",
  "faiss.swigfaiss.fvec_inner_product",
  "faiss.swigfaiss.fvec_madd",
  "faiss.swigfaiss.fvec_norm_L2sqr",
  "faiss.swigfaiss.fvec_norms_L2",
  "faiss.swigfaiss.fvec_renorm_L2",
  "faiss.swigfaiss.fvecs2bitvecs",
  "faiss.swigfaiss.fvecs_maybe_subsample",
  "faiss.swigfaiss.get_cycles",
  "faiss.swigfaiss.get_extra_distance_computer",
  "faiss.swigfaiss.get_invlist_range",
  "faiss.swigfaiss.get_mem_usage_kb",
  "faiss.swigfaiss.get_num_gpus",
  "faiss.swigfaiss.getmillisecs",
  "faiss.swigfaiss.gpu_profiler_start",
  "faiss.swigfaiss.gpu_profiler_stop",
  "faiss.swigfaiss.gpu_sync_all_devices",
  "faiss.swigfaiss.hamming_count_thres",
  "faiss.swigfaiss.hamming_range_search",
  "faiss.swigfaiss.hammings",
  "faiss.swigfaiss.hash_bytes",
  "faiss.swigfaiss.imbalance_factor",
  "faiss.swigfaiss.index_binary_factory",
  "faiss.swigfaiss.index_cpu_to_gpu",
  "faiss.swigfaiss.index_factory",
  "faiss.swigfaiss.index_gpu_to_cpu",
  "faiss.swigfaiss.initialize_IVFPQ_precomputed_table",
  "faiss.swigfaiss.inner_product_to_L2sqr",
  "faiss.swigfaiss.int64_rand",
  "faiss.swigfaiss.int_maxheap_array_t",
  "faiss.swigfaiss.int_minheap_array_t",
  "faiss.swigfaiss.ivec_checksum",
  "faiss.swigfaiss.ivec_hist",
  "faiss.swigfaiss.kmeans_clustering",
  "faiss.swigfaiss.knn_L2sqr",
  "faiss.swigfaiss.knn_extra_metrics",
  "faiss.swigfaiss.knn_inner_product",
  "faiss.swigfaiss.lo_build",
  "faiss.swigfaiss.lo_listno",
  "faiss.swigfaiss.lo_offset",
  "faiss.swigfaiss.makeDevAlloc",
  "faiss.swigfaiss.makeSpaceAlloc",
  "faiss.swigfaiss.makeTempAlloc",
  "faiss.swigfaiss.match_hamming_thres",
  "faiss.swigfaiss.matrix_qr",
  "faiss.swigfaiss.memcpy",
  "faiss.swigfaiss.memorySpaceToString",
  "faiss.swigfaiss.merge_into",
  "faiss.swigfaiss.merge_result_table_with",
  "faiss.swigfaiss.omp_get_max_threads",
  "faiss.swigfaiss.omp_set_num_threads",
  "faiss.swigfaiss.pairwise_L2sqr",
  "faiss.swigfaiss.pairwise_extra_distances",
  "faiss.swigfaiss.pairwise_indexed_L2sqr",
  "faiss.swigfaiss.pairwise_indexed_inner_product",
  "faiss.swigfaiss.popcount64",
  "faiss.swigfaiss.quantize_LUT_and_bias",
  "faiss.swigfaiss.rand_perm",
  "faiss.swigfaiss.range_search_L2sqr",
  "faiss.swigfaiss.range_search_inner_product",
  "faiss.swigfaiss.range_search_with_parameters",
  "faiss.swigfaiss.ranklist_handle_ties",
  "faiss.swigfaiss.ranklist_intersection_size",
  "faiss.swigfaiss.read_InvertedLists",
  "faiss.swigfaiss.read_ProductQuantizer",
  "faiss.swigfaiss.read_VectorTransform",
  "faiss.swigfaiss.read_index",
  "faiss.swigfaiss.real_to_binary",
  "faiss.swigfaiss.reflection",
  "faiss.swigfaiss.rev_swig_ptr",
  "faiss.swigfaiss.round_uint8_per_column",
  "faiss.swigfaiss.search_and_return_centroids",
  "faiss.swigfaiss.search_centroid",
  "faiss.swigfaiss.search_with_parameters",
  "faiss.swigfaiss.set_invlist_range",
  "faiss.swigfaiss.simd_histogram_16",
  "faiss.swigfaiss.simd_histogram_8",
  "faiss.swigfaiss.swig_ptr",
  "faiss.swigfaiss.try_extract_index_ivf",
  "faiss.swigfaiss.wait",
  "faiss.swigfaiss.write_InvertedLists",
  "faiss.swigfaiss.write_ProductQuantizer",
  "faiss.swigfaiss.write_VectorTransform",
  "faiss.swigfaiss.write_index",
  "faiss.symbol",
  "faiss.the_class",
  "faiss.this_module",
  "faiss.try_extract_index_ivf",
  "faiss.vector_float_to_array",
  "faiss.vector_name_map",
  "faiss.vector_to_array",
  "faiss.wait",
  "faiss.write_InvertedLists",
  "faiss.write_ProductQuantizer",
  "faiss.write_VectorTransform",
  "faiss.write_index"
 ]
}