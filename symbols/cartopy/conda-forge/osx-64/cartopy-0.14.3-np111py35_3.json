{
 "errors": {
  "cartopy.tests.crs": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 487, in get_global_filters",
    "    origin_scope=origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 326, in get_filters",
    "    yield from filters",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 69, in get_filters",
    "    yield DictFilter(self.sub_modules_dict())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 47, in sub_modules_dict",
    "    self.py__path__()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_albers_equal_area": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_azimuthal_equidistant": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_geostationary": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_lambert_azimuthal_equal_area": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_lambert_conformal": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_mercator": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_robinson": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_rotated_geodetic": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_rotated_pole": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_sinusoidal": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_stereographic": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.crs.test_transverse_mercator": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.io.test_downloaders": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.io.test_ogc_clients": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  },
  "cartopy.tests.io.test_srtm": {
   "exception": "write to closed file",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 415, in import_module",
    "    is_global_search=True,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 133, in wrapper",
    "    kwargs=kwargs,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 223, in run",
    "    self._send(inference_state_id, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/compiled/subprocess/__init__.py\", line 241, in _send",
    "    pickle_dump(data, self._get_process().stdin, PICKLE_PROTOCOL)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/_compatibility.py\", line 39, in pickle_dump",
    "    pickle.dump(data, file, protocol)",
    "ValueError: write to closed file",
    ""
   ]
  }
 },
 "symbols": [
  "cartopy.__document_these__",
  "cartopy.__version__",
  "cartopy._crs.CRS",
  "cartopy._crs.Geocentric",
  "cartopy._crs.Geodetic",
  "cartopy._crs.Globe",
  "cartopy._crs.PROJ4_VERSION",
  "cartopy._epsg",
  "cartopy._epsg._EPSGProjection",
  "cartopy._epsg._GLOBE_PARAMS",
  "cartopy._epsg._method_map",
  "cartopy._epsg.ccw_boundary",
  "cartopy._epsg.crs",
  "cartopy._epsg.cw_boundary",
  "cartopy._epsg.domain",
  "cartopy.config",
  "cartopy.crs",
  "cartopy.crs.AlbersEqualArea",
  "cartopy.crs.AzimuthalEquidistant",
  "cartopy.crs.CRS",
  "cartopy.crs.EuroPP",
  "cartopy.crs.GOOGLE_MERCATOR",
  "cartopy.crs.Geocentric",
  "cartopy.crs.Geodetic",
  "cartopy.crs.Geostationary",
  "cartopy.crs.Globe",
  "cartopy.crs.Gnomonic",
  "cartopy.crs.InterruptedGoodeHomolosine",
  "cartopy.crs.LambertAzimuthalEqualArea",
  "cartopy.crs.LambertConformal",
  "cartopy.crs.LambertCylindrical",
  "cartopy.crs.Mercator",
  "cartopy.crs.Miller",
  "cartopy.crs.Mollweide",
  "cartopy.crs.NorthPolarStereo",
  "cartopy.crs.OSGB",
  "cartopy.crs.OSNI",
  "cartopy.crs.Orthographic",
  "cartopy.crs.PROJ4_VERSION",
  "cartopy.crs.PlateCarree",
  "cartopy.crs.Projection",
  "cartopy.crs.Projection._method_map",
  "cartopy.crs.Projection.ccw_boundary",
  "cartopy.crs.Projection.cw_boundary",
  "cartopy.crs.Projection.domain",
  "cartopy.crs.Robinson",
  "cartopy.crs.RotatedGeodetic",
  "cartopy.crs.RotatedPole",
  "cartopy.crs.Sinusoidal",
  "cartopy.crs.SouthPolarStereo",
  "cartopy.crs.Stereographic",
  "cartopy.crs.TransverseMercator",
  "cartopy.crs.UTM",
  "cartopy.crs.WGS84_SEMIMAJOR_AXIS",
  "cartopy.crs.WGS84_SEMIMINOR_AXIS",
  "cartopy.crs._BoundaryPoint",
  "cartopy.crs._CylindricalProjection",
  "cartopy.crs._RectangularProjection",
  "cartopy.crs._WarpedRectangularProjection",
  "cartopy.crs.__document_these__",
  "cartopy.crs._ellipse_boundary",
  "cartopy.crs._find_first_gt",
  "cartopy.crs.epsg",
  "cartopy.examples",
  "cartopy.examples.always_circular_stereo",
  "cartopy.examples.always_circular_stereo.__tags__",
  "cartopy.examples.always_circular_stereo.crs",
  "cartopy.examples.always_circular_stereo.main",
  "cartopy.examples.arrows",
  "cartopy.examples.arrows.__tags__",
  "cartopy.examples.arrows.crs",
  "cartopy.examples.arrows.main",
  "cartopy.examples.arrows.sample_data",
  "cartopy.examples.aurora_forecast",
  "cartopy.examples.aurora_forecast.__tags__",
  "cartopy.examples.aurora_forecast.aurora_cmap",
  "cartopy.examples.aurora_forecast.aurora_forecast",
  "cartopy.examples.aurora_forecast.crs",
  "cartopy.examples.aurora_forecast.fill_dark_side",
  "cartopy.examples.aurora_forecast.main",
  "cartopy.examples.aurora_forecast.sun_pos",
  "cartopy.examples.barbs",
  "cartopy.examples.barbs.__tags__",
  "cartopy.examples.barbs.crs",
  "cartopy.examples.barbs.main",
  "cartopy.examples.barbs.sample_data",
  "cartopy.examples.eccentric_ellipse",
  "cartopy.examples.eccentric_ellipse.__tags__",
  "cartopy.examples.eccentric_ellipse.crs",
  "cartopy.examples.eccentric_ellipse.main",
  "cartopy.examples.eccentric_ellipse.vesta_image",
  "cartopy.examples.effects_of_the_ellipse",
  "cartopy.examples.effects_of_the_ellipse.MapQuestOpenAerial",
  "cartopy.examples.effects_of_the_ellipse.__tags__",
  "cartopy.examples.effects_of_the_ellipse.crs",
  "cartopy.examples.effects_of_the_ellipse.main",
  "cartopy.examples.effects_of_the_ellipse.transform_fn_factory",
  "cartopy.examples.eyja_volcano",
  "cartopy.examples.eyja_volcano.__tags__",
  "cartopy.examples.eyja_volcano.crs",
  "cartopy.examples.eyja_volcano.img_tiles",
  "cartopy.examples.eyja_volcano.main",
  "cartopy.examples.favicon",
  "cartopy.examples.favicon.__tags__",
  "cartopy.examples.favicon.crs",
  "cartopy.examples.favicon.main",
  "cartopy.examples.feature_creation",
  "cartopy.examples.feature_creation.__tags__",
  "cartopy.examples.feature_creation.crs",
  "cartopy.examples.feature_creation.feature",
  "cartopy.examples.feature_creation.main",
  "cartopy.examples.features",
  "cartopy.examples.features.__tags__",
  "cartopy.examples.features.main",
  "cartopy.examples.geostationary",
  "cartopy.examples.geostationary.__tags__",
  "cartopy.examples.geostationary.crs",
  "cartopy.examples.geostationary.geos_image",
  "cartopy.examples.geostationary.main",
  "cartopy.examples.global_map",
  "cartopy.examples.global_map.__tags__",
  "cartopy.examples.global_map.crs",
  "cartopy.examples.global_map.main",
  "cartopy.examples.hurricane_katrina",
  "cartopy.examples.hurricane_katrina.__tags__",
  "cartopy.examples.hurricane_katrina.crs",
  "cartopy.examples.hurricane_katrina.main",
  "cartopy.examples.hurricane_katrina.sample_data",
  "cartopy.examples.hurricane_katrina.shapereader",
  "cartopy.examples.image_tiles",
  "cartopy.examples.image_tiles.StamenTerrain",
  "cartopy.examples.image_tiles.__tags__",
  "cartopy.examples.image_tiles.main",
  "cartopy.examples.logo",
  "cartopy.examples.logo.__tags__",
  "cartopy.examples.logo.crs",
  "cartopy.examples.logo.main",
  "cartopy.examples.regridding_arrows",
  "cartopy.examples.regridding_arrows.__tags__",
  "cartopy.examples.regridding_arrows.crs",
  "cartopy.examples.regridding_arrows.main",
  "cartopy.examples.regridding_arrows.sample_data",
  "cartopy.examples.rotated_pole",
  "cartopy.examples.rotated_pole.__tags__",
  "cartopy.examples.rotated_pole.crs",
  "cartopy.examples.rotated_pole.main",
  "cartopy.examples.srtm_shading",
  "cartopy.examples.srtm_shading.LocatedImage",
  "cartopy.examples.srtm_shading.PostprocessedRasterSource",
  "cartopy.examples.srtm_shading.SRTM1Source",
  "cartopy.examples.srtm_shading.SRTM3Source",
  "cartopy.examples.srtm_shading.__tags__",
  "cartopy.examples.srtm_shading.crs",
  "cartopy.examples.srtm_shading.main",
  "cartopy.examples.srtm_shading.plot",
  "cartopy.examples.srtm_shading.shade",
  "cartopy.examples.srtm_shading.srtm",
  "cartopy.examples.star_shaped_boundary",
  "cartopy.examples.star_shaped_boundary.__tags__",
  "cartopy.examples.star_shaped_boundary.crs",
  "cartopy.examples.star_shaped_boundary.main",
  "cartopy.examples.streamplot",
  "cartopy.examples.streamplot.__tags__",
  "cartopy.examples.streamplot.crs",
  "cartopy.examples.streamplot.main",
  "cartopy.examples.streamplot.sample_data",
  "cartopy.examples.tick_labels",
  "cartopy.examples.tick_labels.LatitudeFormatter",
  "cartopy.examples.tick_labels.LongitudeFormatter",
  "cartopy.examples.tick_labels.__tags__",
  "cartopy.examples.tick_labels.crs",
  "cartopy.examples.tick_labels.main",
  "cartopy.examples.tissot",
  "cartopy.examples.tissot.crs",
  "cartopy.examples.tissot.main",
  "cartopy.examples.tube_stations",
  "cartopy.examples.tube_stations.MapQuestOSM",
  "cartopy.examples.tube_stations.__tags__",
  "cartopy.examples.tube_stations.crs",
  "cartopy.examples.tube_stations.main",
  "cartopy.examples.tube_stations.tube_locations",
  "cartopy.examples.un_flag",
  "cartopy.examples.un_flag.__tags__",
  "cartopy.examples.un_flag.crs",
  "cartopy.examples.un_flag.filled_land",
  "cartopy.examples.un_flag.main",
  "cartopy.examples.un_flag.olive_path",
  "cartopy.examples.waves",
  "cartopy.examples.waves.__tags__",
  "cartopy.examples.waves.crs",
  "cartopy.examples.waves.main",
  "cartopy.examples.waves.sample_data",
  "cartopy.examples.wms",
  "cartopy.examples.wms.__tags__",
  "cartopy.examples.wms.crs",
  "cartopy.examples.wms.main",
  "cartopy.examples.wmts",
  "cartopy.examples.wmts.__tags__",
  "cartopy.examples.wmts.crs",
  "cartopy.examples.wmts.main",
  "cartopy.feature",
  "cartopy.feature.BORDERS",
  "cartopy.feature.COASTLINE",
  "cartopy.feature.COLORS",
  "cartopy.feature.Feature",
  "cartopy.feature.GSHHSFeature",
  "cartopy.feature.LAKES",
  "cartopy.feature.LAND",
  "cartopy.feature.NaturalEarthFeature",
  "cartopy.feature.OCEAN",
  "cartopy.feature.RIVERS",
  "cartopy.feature.ShapelyFeature",
  "cartopy.feature.WFSFeature",
  "cartopy.feature._NATURAL_EARTH_GEOM_CACHE",
  "cartopy.feature.shapereader",
  "cartopy.geodesic",
  "cartopy.geodesic.Geodesic",
  "cartopy.geodesic._geodesic.Geodesic",
  "cartopy.img_transform",
  "cartopy.img_transform._determine_bounds",
  "cartopy.img_transform.crs",
  "cartopy.img_transform.mesh_projection",
  "cartopy.img_transform.regrid",
  "cartopy.img_transform.warp_array",
  "cartopy.img_transform.warp_img",
  "cartopy.io",
  "cartopy.io.DownloadWarning",
  "cartopy.io.Downloader",
  "cartopy.io.LocatedImage",
  "cartopy.io.PostprocessedRasterSource",
  "cartopy.io.RasterSource",
  "cartopy.io.config",
  "cartopy.io.fh_getter",
  "cartopy.io.img_nest",
  "cartopy.io.img_nest.ImageCollection",
  "cartopy.io.img_nest.Img",
  "cartopy.io.img_nest.NestedImageCollection",
  "cartopy.io.img_nest._img_class_attrs",
  "cartopy.io.img_tiles",
  "cartopy.io.img_tiles.GoogleTiles",
  "cartopy.io.img_tiles.MapQuestOSM",
  "cartopy.io.img_tiles.MapQuestOpenAerial",
  "cartopy.io.img_tiles.MapboxTiles",
  "cartopy.io.img_tiles.OSM",
  "cartopy.io.img_tiles.QuadtreeTiles",
  "cartopy.io.img_tiles.StamenTerrain",
  "cartopy.io.img_tiles._merge_tiles",
  "cartopy.io.img_tiles.crs",
  "cartopy.io.ogc_clients",
  "cartopy.io.ogc_clients.LocatedImage",
  "cartopy.io.ogc_clients.METERS_PER_PIXEL",
  "cartopy.io.ogc_clients.METERS_PER_UNIT",
  "cartopy.io.ogc_clients.RasterSource",
  "cartopy.io.ogc_clients.WFSGeometrySource",
  "cartopy.io.ogc_clients.WMSRasterSource",
  "cartopy.io.ogc_clients.WMTSRasterSource",
  "cartopy.io.ogc_clients.WebFeatureService",
  "cartopy.io.ogc_clients.WebMapService",
  "cartopy.io.ogc_clients._CRS_TO_OGC_SRS",
  "cartopy.io.ogc_clients._GML_NS",
  "cartopy.io.ogc_clients._MAP_SERVER_NS",
  "cartopy.io.ogc_clients._OWSLIB_AVAILABLE",
  "cartopy.io.ogc_clients._OWSLIB_REQUIRED",
  "cartopy.io.ogc_clients._URN_TO_CRS",
  "cartopy.io.ogc_clients._WGS84_METERS_PER_UNIT",
  "cartopy.io.ogc_clients.crs",
  "cartopy.io.ogc_clients.warp_array",
  "cartopy.io.shapereader",
  "cartopy.io.shapereader.Downloader",
  "cartopy.io.shapereader.GEOMETRY_FACTORIES",
  "cartopy.io.shapereader.GSHHSShpDownloader",
  "cartopy.io.shapereader.NEShpDownloader",
  "cartopy.io.shapereader.Reader",
  "cartopy.io.shapereader.Record",
  "cartopy.io.shapereader.__all__",
  "cartopy.io.shapereader._create_point",
  "cartopy.io.shapereader._create_polygon",
  "cartopy.io.shapereader._create_polyline",
  "cartopy.io.shapereader._gshhs_key",
  "cartopy.io.shapereader._make_geometry",
  "cartopy.io.shapereader._ne_key",
  "cartopy.io.shapereader.config",
  "cartopy.io.shapereader.gshhs",
  "cartopy.io.shapereader.natural_earth",
  "cartopy.io.srtm",
  "cartopy.io.srtm.Downloader",
  "cartopy.io.srtm.LocatedImage",
  "cartopy.io.srtm.RasterSource",
  "cartopy.io.srtm.SRTM1Source",
  "cartopy.io.srtm.SRTM3Source",
  "cartopy.io.srtm.SRTM3_retrieve",
  "cartopy.io.srtm.SRTMDownloader",
  "cartopy.io.srtm._SRTMSource",
  "cartopy.io.srtm.add_shading",
  "cartopy.io.srtm.config",
  "cartopy.io.srtm.crs",
  "cartopy.io.srtm.fh_getter",
  "cartopy.io.srtm.fill_gaps",
  "cartopy.io.srtm.read_SRTM",
  "cartopy.io.srtm.srtm",
  "cartopy.mpl",
  "cartopy.mpl.clip_path",
  "cartopy.mpl.clip_path.bbox_to_path",
  "cartopy.mpl.clip_path.clip_path",
  "cartopy.mpl.clip_path.intersection_point",
  "cartopy.mpl.clip_path.lines_intersect",
  "cartopy.mpl.feature_artist",
  "cartopy.mpl.feature_artist.FeatureArtist",
  "cartopy.mpl.feature_artist._GeomKey",
  "cartopy.mpl.feature_artist.patch",
  "cartopy.mpl.geoaxes",
  "cartopy.mpl.geoaxes.GeoAxes",
  "cartopy.mpl.geoaxes.InterProjectionTransform",
  "cartopy.mpl.geoaxes.SlippyImageArtist",
  "cartopy.mpl.geoaxes._PATH_TRANSFORM_CACHE",
  "cartopy.mpl.geoaxes._trigger_patch_reclip",
  "cartopy.mpl.geoaxes.clip_path",
  "cartopy.mpl.geoaxes.config",
  "cartopy.mpl.geoaxes.crs",
  "cartopy.mpl.geoaxes.feature_artist",
  "cartopy.mpl.geoaxes.patch",
  "cartopy.mpl.geoaxes.vector_scalar_to_grid",
  "cartopy.mpl.gridliner",
  "cartopy.mpl.gridliner.Gridliner",
  "cartopy.mpl.gridliner.LATITUDE_FORMATTER",
  "cartopy.mpl.gridliner.LONGITUDE_FORMATTER",
  "cartopy.mpl.gridliner.Projection",
  "cartopy.mpl.gridliner._DEGREE_SYMBOL",
  "cartopy.mpl.gridliner._RectangularProjection",
  "cartopy.mpl.gridliner._east_west_formatted",
  "cartopy.mpl.gridliner._fix_lons",
  "cartopy.mpl.gridliner._lat_heimisphere",
  "cartopy.mpl.gridliner._lon_heimisphere",
  "cartopy.mpl.gridliner._north_south_formatted",
  "cartopy.mpl.gridliner.degree_locator",
  "cartopy.mpl.patch",
  "cartopy.mpl.patch._path_segments_doc",
  "cartopy.mpl.patch.geos_to_path",
  "cartopy.mpl.patch.path_segments",
  "cartopy.mpl.patch.path_to_geos",
  "cartopy.mpl.slippy_image_artist",
  "cartopy.mpl.slippy_image_artist.SlippyImageArtist",
  "cartopy.mpl.ticker",
  "cartopy.mpl.ticker.GeoAxes",
  "cartopy.mpl.ticker.LatitudeFormatter",
  "cartopy.mpl.ticker.LongitudeFormatter",
  "cartopy.mpl.ticker._PlateCarreeFormatter",
  "cartopy.mpl.ticker.crs",
  "cartopy.sphinxext",
  "cartopy.sphinxext.gallery",
  "cartopy.sphinxext.gallery.examples_code",
  "cartopy.sphinxext.gallery.gallery_code",
  "cartopy.sphinxext.gallery.gen_examples",
  "cartopy.sphinxext.gallery.gen_gallery",
  "cartopy.sphinxext.gallery.get_module",
  "cartopy.sphinxext.gallery.individual_example_rst",
  "cartopy.sphinxext.gallery.out_of_date",
  "cartopy.sphinxext.gallery.parent_module",
  "cartopy.sphinxext.gallery.safe_mod_name_and_fname",
  "cartopy.sphinxext.gallery.same_contents",
  "cartopy.sphinxext.gallery.setup",
  "cartopy.sphinxext.gallery.walk_module",
  "cartopy.sphinxext.summarise_package",
  "cartopy.sphinxext.summarise_package.gen_summary_rst",
  "cartopy.sphinxext.summarise_package.main",
  "cartopy.sphinxext.summarise_package.objects_to_document",
  "cartopy.sphinxext.summarise_package.setup",
  "cartopy.sphinxext.summarise_package.walk_module",
  "cartopy.tests",
  "cartopy.tests.crs",
  "cartopy.tests.io",
  "cartopy.tests.io.test_downloaders",
  "cartopy.tests.io.test_ogc_clients",
  "cartopy.tests.io.test_srtm",
  "cartopy.tests.mpl",
  "cartopy.tests.mpl.ImageTesting",
  "cartopy.tests.mpl.failed_images_html",
  "cartopy.tests.mpl.failed_images_iter",
  "cartopy.tests.mpl.show",
  "cartopy.tests.mpl.test_axes",
  "cartopy.tests.mpl.test_axes.InterProjectionTransform",
  "cartopy.tests.mpl.test_axes.TestNoSpherical",
  "cartopy.tests.mpl.test_axes.crs",
  "cartopy.tests.mpl.test_axes.test_geoaxes_subplot",
  "cartopy.tests.mpl.test_axes.test_transform_PlateCarree_shortcut",
  "cartopy.tests.mpl.test_caching",
  "cartopy.tests.mpl.test_caching.CallCounter",
  "cartopy.tests.mpl.test_caching.FeatureArtist",
  "cartopy.tests.mpl.test_caching.WMTSRasterSource",
  "cartopy.tests.mpl.test_caching.WebMapTileService",
  "cartopy.tests.mpl.test_caching._OWSLIB_AVAILABLE",
  "cartopy.tests.mpl.test_caching.crs",
  "cartopy.tests.mpl.test_caching.e",
  "cartopy.tests.mpl.test_caching.geoaxes",
  "cartopy.tests.mpl.test_caching.sample_data",
  "cartopy.tests.mpl.test_caching.test_coastline_loading_cache",
  "cartopy.tests.mpl.test_caching.test_contourf_transform_path_counting",
  "cartopy.tests.mpl.test_caching.test_shapefile_transform_cache",
  "cartopy.tests.mpl.test_caching.test_wmts_tile_caching",
  "cartopy.tests.mpl.test_crs",
  "cartopy.tests.mpl.test_crs.ImageTesting",
  "cartopy.tests.mpl.test_crs.crs",
  "cartopy.tests.mpl.test_crs.test_lambert_south",
  "cartopy.tests.mpl.test_crs.test_mercator_squashed",
  "cartopy.tests.mpl.test_examples",
  "cartopy.tests.mpl.test_examples.ExampleImageTesting",
  "cartopy.tests.mpl.test_examples.ImageTesting",
  "cartopy.tests.mpl.test_examples.test_global_map",
  "cartopy.tests.mpl.test_features",
  "cartopy.tests.mpl.test_features.ImageTesting",
  "cartopy.tests.mpl.test_features._OWSLIB_AVAILABLE",
  "cartopy.tests.mpl.test_features.crs",
  "cartopy.tests.mpl.test_features.feature",
  "cartopy.tests.mpl.test_features.test_gshhs",
  "cartopy.tests.mpl.test_features.test_natural_earth",
  "cartopy.tests.mpl.test_features.test_wfs",
  "cartopy.tests.mpl.test_gridliner",
  "cartopy.tests.mpl.test_gridliner.GeoAxes",
  "cartopy.tests.mpl.test_gridliner.ImageTesting",
  "cartopy.tests.mpl.test_gridliner.LATITUDE_FORMATTER",
  "cartopy.tests.mpl.test_gridliner.LONGITUDE_FORMATTER",
  "cartopy.tests.mpl.test_gridliner.crs",
  "cartopy.tests.mpl.test_gridliner.test_grid_labels",
  "cartopy.tests.mpl.test_gridliner.test_gridliner",
  "cartopy.tests.mpl.test_images",
  "cartopy.tests.mpl.test_images.ImageTesting",
  "cartopy.tests.mpl.test_images.NATURAL_EARTH_IMG",
  "cartopy.tests.mpl.test_images.REGIONAL_IMG",
  "cartopy.tests.mpl.test_images.config",
  "cartopy.tests.mpl.test_images.crs",
  "cartopy.tests.mpl.test_images.img_tiles",
  "cartopy.tests.mpl.test_images.test_image_merge",
  "cartopy.tests.mpl.test_images.test_image_nest",
  "cartopy.tests.mpl.test_images.test_img_nest",
  "cartopy.tests.mpl.test_images.test_img_tiles",
  "cartopy.tests.mpl.test_images.test_imshow",
  "cartopy.tests.mpl.test_images.test_pil_Image",
  "cartopy.tests.mpl.test_images.test_stock_img",
  "cartopy.tests.mpl.test_images.test_web_tiles",
  "cartopy.tests.mpl.test_img_transform",
  "cartopy.tests.mpl.test_img_transform.ImageTesting",
  "cartopy.tests.mpl.test_img_transform.TestRegrid",
  "cartopy.tests.mpl.test_img_transform.config",
  "cartopy.tests.mpl.test_img_transform.crs",
  "cartopy.tests.mpl.test_img_transform.img_transform",
  "cartopy.tests.mpl.test_img_transform.test_regrid_image",
  "cartopy.tests.mpl.test_mpl_integration",
  "cartopy.tests.mpl.test_mpl_integration.ImageTesting",
  "cartopy.tests.mpl.test_mpl_integration._ROB_TOL",
  "cartopy.tests.mpl.test_mpl_integration.crs",
  "cartopy.tests.mpl.test_mpl_integration.global_pcolor_wrap",
  "cartopy.tests.mpl.test_mpl_integration.test_axes_natural_earth_interface",
  "cartopy.tests.mpl.test_mpl_integration.test_barbs",
  "cartopy.tests.mpl.test_mpl_integration.test_cursor_values",
  "cartopy.tests.mpl.test_mpl_integration.test_global_contour_wrap_new_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_contour_wrap_no_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_contourf_wrap_new_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_contourf_wrap_no_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_map",
  "cartopy.tests.mpl.test_mpl_integration.test_global_pcolor_wrap_new_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_pcolor_wrap_no_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_scatter_wrap_new_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_global_scatter_wrap_no_transform",
  "cartopy.tests.mpl.test_mpl_integration.test_multiple_projections",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_global_with_wrap1",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_global_with_wrap2",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_global_with_wrap3",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_goode_wrap",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_limited_area_wrap",
  "cartopy.tests.mpl.test_mpl_integration.test_pcolormesh_mercator_wrap",
  "cartopy.tests.mpl.test_mpl_integration.test_quiver_plate_carree",
  "cartopy.tests.mpl.test_mpl_integration.test_quiver_regrid",
  "cartopy.tests.mpl.test_mpl_integration.test_quiver_rotated_pole",
  "cartopy.tests.mpl.test_mpl_integration.test_simple_global",
  "cartopy.tests.mpl.test_mpl_integration.test_streamplot",
  "cartopy.tests.mpl.test_patch",
  "cartopy.tests.mpl.test_patch.Test_path_to_geos",
  "cartopy.tests.mpl.test_patch.patch",
  "cartopy.tests.mpl.test_pseudo_color",
  "cartopy.tests.mpl.test_pseudo_color.crs",
  "cartopy.tests.mpl.test_pseudo_color.test_pcolormesh_fully_masked",
  "cartopy.tests.mpl.test_pseudo_color.test_pcolormesh_partially_masked",
  "cartopy.tests.mpl.test_pseudo_color.test_savefig_tight",
  "cartopy.tests.mpl.test_quiver",
  "cartopy.tests.mpl.test_quiver.TestQuiverShapes",
  "cartopy.tests.mpl.test_quiver.crs",
  "cartopy.tests.mpl.test_set_extent",
  "cartopy.tests.mpl.test_set_extent.crs",
  "cartopy.tests.mpl.test_set_extent.test_domain_extents",
  "cartopy.tests.mpl.test_set_extent.test_extents",
  "cartopy.tests.mpl.test_set_extent.test_limits_contour",
  "cartopy.tests.mpl.test_set_extent.test_limits_pcolor",
  "cartopy.tests.mpl.test_set_extent.test_update_lim",
  "cartopy.tests.mpl.test_set_extent.test_view_lim_autoscaling",
  "cartopy.tests.mpl.test_set_extent.test_view_lim_default_global",
  "cartopy.tests.mpl.test_shapely_to_mpl",
  "cartopy.tests.mpl.test_shapely_to_mpl.ImageTesting",
  "cartopy.tests.mpl.test_shapely_to_mpl.crs",
  "cartopy.tests.mpl.test_shapely_to_mpl.patch",
  "cartopy.tests.mpl.test_shapely_to_mpl.test_contour_interiors",
  "cartopy.tests.mpl.test_shapely_to_mpl.test_polygon_interiors",
  "cartopy.tests.mpl.test_ticker",
  "cartopy.tests.mpl.test_ticker.GeoAxes",
  "cartopy.tests.mpl.test_ticker.LatitudeFormatter",
  "cartopy.tests.mpl.test_ticker.LongitudeFormatter",
  "cartopy.tests.mpl.test_ticker.crs",
  "cartopy.tests.mpl.test_ticker.test_LatitudeFormatter",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_bad_axes",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_bad_projection",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_central_longitude_0",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_central_longitude_120",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_central_longitude_180",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_degree_symbol",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_mercator",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_number_format",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_small_numbers_0",
  "cartopy.tests.mpl.test_ticker.test_LongitudeFormatter_small_numbers_180",
  "cartopy.tests.mpl.test_ticks",
  "cartopy.tests.mpl.test_ticks.ImageTesting",
  "cartopy.tests.mpl.test_ticks._format_lat",
  "cartopy.tests.mpl.test_ticks._format_lon",
  "cartopy.tests.mpl.test_ticks.crs",
  "cartopy.tests.mpl.test_ticks.test_fn_suffix",
  "cartopy.tests.mpl.test_ticks.test_set_xticks_cylindrical",
  "cartopy.tests.mpl.test_ticks.test_set_xticks_no_transform",
  "cartopy.tests.mpl.test_ticks.test_set_xticks_non_cylindrical",
  "cartopy.tests.mpl.test_ticks.test_set_xyticks",
  "cartopy.tests.mpl.test_ticks.test_set_yticks_cylindrical",
  "cartopy.tests.mpl.test_ticks.test_set_yticks_no_transform",
  "cartopy.tests.mpl.test_ticks.test_set_yticks_non_cylindrical",
  "cartopy.tests.mpl.test_web_services",
  "cartopy.tests.mpl.test_web_services.ImageTesting",
  "cartopy.tests.mpl.test_web_services._OWSLIB_AVAILABLE",
  "cartopy.tests.mpl.test_web_services.crs",
  "cartopy.tests.mpl.test_web_services.test_wms",
  "cartopy.tests.mpl.test_web_services.test_wmts",
  "cartopy.tests.not_a_nose_fixture",
  "cartopy.tests.temp_dir",
  "cartopy.tests.test_coastline",
  "cartopy.tests.test_coastline.COASTLINE_PATH",
  "cartopy.tests.test_coastline.TestCoastline",
  "cartopy.tests.test_coastline.shapereader",
  "cartopy.tests.test_coding_standards",
  "cartopy.tests.test_coding_standards.CARTOPY_DIR",
  "cartopy.tests.test_coding_standards.LICENSE_RE",
  "cartopy.tests.test_coding_standards.LICENSE_RE_PATTERN",
  "cartopy.tests.test_coding_standards.LICENSE_TEMPLATE",
  "cartopy.tests.test_coding_standards.REPO_DIR",
  "cartopy.tests.test_coding_standards.TestCodeFormat",
  "cartopy.tests.test_coding_standards.TestFutureImports",
  "cartopy.tests.test_coding_standards.TestLicenseHeaders",
  "cartopy.tests.test_crs",
  "cartopy.tests.test_crs.TestCRS",
  "cartopy.tests.test_crs.crs",
  "cartopy.tests.test_crs.pyepsg",
  "cartopy.tests.test_crs.test_PlateCarree_shortcut",
  "cartopy.tests.test_crs.test_pickle",
  "cartopy.tests.test_crs_transform_vectors",
  "cartopy.tests.test_crs_transform_vectors.TestTransformVectors",
  "cartopy.tests.test_crs_transform_vectors.crs",
  "cartopy.tests.test_geodesic",
  "cartopy.tests.test_geodesic.TestGeodesic",
  "cartopy.tests.test_geodesic.geodesic",
  "cartopy.tests.test_img_nest",
  "cartopy.tests.test_img_nest.RoundedImg",
  "cartopy.tests.test_img_nest._TEST_DATA_AVAILABLE",
  "cartopy.tests.test_img_nest._TEST_DATA_DIR",
  "cartopy.tests.test_img_nest._TEST_DATA_VERSION",
  "cartopy.tests.test_img_nest._save_world",
  "cartopy.tests.test_img_nest._tile_from_img",
  "cartopy.tests.test_img_nest.config",
  "cartopy.tests.test_img_nest.crs",
  "cartopy.tests.test_img_nest.gen_nest",
  "cartopy.tests.test_img_nest.img_nest",
  "cartopy.tests.test_img_nest.img_tiles",
  "cartopy.tests.test_img_nest.requires_wmts_data",
  "cartopy.tests.test_img_nest.test_find_images",
  "cartopy.tests.test_img_nest.test_img_pickle_round_trip",
  "cartopy.tests.test_img_nest.test_intersect",
  "cartopy.tests.test_img_nest.test_nest",
  "cartopy.tests.test_img_nest.test_world_files",
  "cartopy.tests.test_img_nest.tests",
  "cartopy.tests.test_img_tiles",
  "cartopy.tests.test_img_tiles.GOOGLE_IMAGE_URL_REPLACEMENT",
  "cartopy.tests.test_img_tiles.KNOWN_EXTENTS",
  "cartopy.tests.test_img_tiles.crs",
  "cartopy.tests.test_img_tiles.img_tiles",
  "cartopy.tests.test_img_tiles.test_google_tile_styles",
  "cartopy.tests.test_img_tiles.test_google_wts",
  "cartopy.tests.test_img_tiles.test_image_for_domain",
  "cartopy.tests.test_img_tiles.test_mapbox_tiles",
  "cartopy.tests.test_img_tiles.test_quadtree_wts",
  "cartopy.tests.test_img_tiles.test_tile_bbox_y0_at_south_pole",
  "cartopy.tests.test_img_tiles.test_tile_find_images",
  "cartopy.tests.test_img_transform",
  "cartopy.tests.test_img_transform.crs",
  "cartopy.tests.test_img_transform.img_transform",
  "cartopy.tests.test_img_transform.test_griding_data_outside_projection",
  "cartopy.tests.test_img_transform.test_griding_data_std_range",
  "cartopy.tests.test_line_string",
  "cartopy.tests.test_line_string.FakeProjection",
  "cartopy.tests.test_line_string.TestBisect",
  "cartopy.tests.test_line_string.TestLineString",
  "cartopy.tests.test_line_string.TestMisc",
  "cartopy.tests.test_line_string.TestSymmetry",
  "cartopy.tests.test_line_string.crs",
  "cartopy.tests.test_linear_ring",
  "cartopy.tests.test_linear_ring.TestBoundary",
  "cartopy.tests.test_linear_ring.TestMisc",
  "cartopy.tests.test_linear_ring.crs",
  "cartopy.tests.test_polygon",
  "cartopy.tests.test_polygon.PolygonTests",
  "cartopy.tests.test_polygon.TestBoundary",
  "cartopy.tests.test_polygon.TestHoles",
  "cartopy.tests.test_polygon.TestMisc",
  "cartopy.tests.test_polygon.TestQuality",
  "cartopy.tests.test_polygon.TestWrap",
  "cartopy.tests.test_polygon.crs",
  "cartopy.tests.test_polygon.ring",
  "cartopy.tests.test_shapereader",
  "cartopy.tests.test_shapereader.LAKES_PATH",
  "cartopy.tests.test_shapereader.RIVERS_PATH",
  "cartopy.tests.test_shapereader.TestLakes",
  "cartopy.tests.test_shapereader.TestRivers",
  "cartopy.tests.test_shapereader.shapereader",
  "cartopy.tests.test_util",
  "cartopy.tests.test_util.Test_add_cyclic_point",
  "cartopy.tests.test_util.add_cyclic_point",
  "cartopy.tests.test_vector_transform",
  "cartopy.tests.test_vector_transform.Test_interpolate_to_grid",
  "cartopy.tests.test_vector_transform.Test_vector_scalar_to_grid",
  "cartopy.tests.test_vector_transform._sample_plate_carree_coordinates",
  "cartopy.tests.test_vector_transform._sample_plate_carree_scalar_field",
  "cartopy.tests.test_vector_transform._sample_plate_carree_vector_field",
  "cartopy.tests.test_vector_transform.crs",
  "cartopy.tests.test_vector_transform.vector_transform",
  "cartopy.util",
  "cartopy.util.add_cyclic_point",
  "cartopy.vector_transform",
  "cartopy.vector_transform._interpolate_to_grid",
  "cartopy.vector_transform.vector_scalar_to_grid"
 ]
}