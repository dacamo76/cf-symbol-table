{
 "errors": {
  "adaptive_scheduler._static_version": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "adaptive_scheduler.PBS",
  "adaptive_scheduler.RunManager",
  "adaptive_scheduler.SLURM",
  "adaptive_scheduler.__all__",
  "adaptive_scheduler.__version__",
  "adaptive_scheduler._mock_scheduler",
  "adaptive_scheduler._mock_scheduler.DEFAULT_URL",
  "adaptive_scheduler._mock_scheduler.MockScheduler",
  "adaptive_scheduler._mock_scheduler._external_command",
  "adaptive_scheduler._mock_scheduler.args",
  "adaptive_scheduler._mock_scheduler.cancel",
  "adaptive_scheduler._mock_scheduler.ctx",
  "adaptive_scheduler._mock_scheduler.fname",
  "adaptive_scheduler._mock_scheduler.job_id",
  "adaptive_scheduler._mock_scheduler.job_name",
  "adaptive_scheduler._mock_scheduler.log",
  "adaptive_scheduler._mock_scheduler.logger",
  "adaptive_scheduler._mock_scheduler.parser",
  "adaptive_scheduler._mock_scheduler.queue",
  "adaptive_scheduler._mock_scheduler.submit",
  "adaptive_scheduler._static_version",
  "adaptive_scheduler._version",
  "adaptive_scheduler._version.STATIC_VERSION_FILE",
  "adaptive_scheduler._version.Version",
  "adaptive_scheduler._version.__all__",
  "adaptive_scheduler._version.__version__",
  "adaptive_scheduler._version._build_py",
  "adaptive_scheduler._version._package_root_inside_src",
  "adaptive_scheduler._version._sdist",
  "adaptive_scheduler._version._write_version",
  "adaptive_scheduler._version.cmdclass",
  "adaptive_scheduler._version.distr_root",
  "adaptive_scheduler._version.get_static_version_info",
  "adaptive_scheduler._version.get_version",
  "adaptive_scheduler._version.package_name",
  "adaptive_scheduler._version.package_root",
  "adaptive_scheduler._version.pep440_format",
  "adaptive_scheduler._version.version_is_from_git",
  "adaptive_scheduler.client_support",
  "adaptive_scheduler.client_support._add_log_file_handler",
  "adaptive_scheduler.client_support._deserialize",
  "adaptive_scheduler.client_support._get_log_entry",
  "adaptive_scheduler.client_support._get_npoints",
  "adaptive_scheduler.client_support._serialize",
  "adaptive_scheduler.client_support.ctx",
  "adaptive_scheduler.client_support.get_learner",
  "adaptive_scheduler.client_support.log",
  "adaptive_scheduler.client_support.log_exception",
  "adaptive_scheduler.client_support.log_info",
  "adaptive_scheduler.client_support.logger",
  "adaptive_scheduler.client_support.maybe_lst",
  "adaptive_scheduler.client_support.tell_done",
  "adaptive_scheduler.scheduler",
  "adaptive_scheduler.scheduler.BaseScheduler",
  "adaptive_scheduler.scheduler.DefaultScheduler",
  "adaptive_scheduler.scheduler.LocalMockScheduler",
  "adaptive_scheduler.scheduler.PBS",
  "adaptive_scheduler.scheduler.SLURM",
  "adaptive_scheduler.scheduler._RequireAttrsABCMeta",
  "adaptive_scheduler.scheduler._get_default_scheduler",
  "adaptive_scheduler.scheduler._progress",
  "adaptive_scheduler.scheduler._run_submit",
  "adaptive_scheduler.sequence_learner",
  "adaptive_scheduler.sequence_learner.SequenceLearner",
  "adaptive_scheduler.sequence_learner._print_same_line",
  "adaptive_scheduler.sequence_learner.ensure_hashable",
  "adaptive_scheduler.sequence_learner.inf",
  "adaptive_scheduler.server_support",
  "adaptive_scheduler.server_support.BaseScheduler",
  "adaptive_scheduler.server_support.DatabaseManager",
  "adaptive_scheduler.server_support.JobManager",
  "adaptive_scheduler.server_support.KillManager",
  "adaptive_scheduler.server_support.MaxRestartsReached",
  "adaptive_scheduler.server_support.RunManager",
  "adaptive_scheduler.server_support._BaseManager",
  "adaptive_scheduler.server_support._delete_old_ipython_profiles",
  "adaptive_scheduler.server_support._deserialize",
  "adaptive_scheduler.server_support._get_all_files",
  "adaptive_scheduler.server_support._get_infos",
  "adaptive_scheduler.server_support._make_default_run_script",
  "adaptive_scheduler.server_support._progress",
  "adaptive_scheduler.server_support._remove_or_move_files",
  "adaptive_scheduler.server_support._serialize",
  "adaptive_scheduler.server_support.cleanup",
  "adaptive_scheduler.server_support.ctx",
  "adaptive_scheduler.server_support.get_allowed_url",
  "adaptive_scheduler.server_support.info",
  "adaptive_scheduler.server_support.load_parallel",
  "adaptive_scheduler.server_support.log",
  "adaptive_scheduler.server_support.logger",
  "adaptive_scheduler.server_support.logs_with_string_or_condition",
  "adaptive_scheduler.server_support.maybe_lst",
  "adaptive_scheduler.server_support.parse_log_files",
  "adaptive_scheduler.server_support.periodically_clean_ipython_profiles",
  "adaptive_scheduler.utils",
  "adaptive_scheduler.utils.LRUCachedCallable",
  "adaptive_scheduler.utils.MAX_LINE_LENGTH",
  "adaptive_scheduler.utils._NONE_RETURN_STR",
  "adaptive_scheduler.utils._RequireAttrsABCMeta",
  "adaptive_scheduler.utils._deserialize",
  "adaptive_scheduler.utils._get_default_args",
  "adaptive_scheduler.utils._get_npoints",
  "adaptive_scheduler.utils._print_same_line",
  "adaptive_scheduler.utils._progress",
  "adaptive_scheduler.utils._remove_or_move_files",
  "adaptive_scheduler.utils._serialize",
  "adaptive_scheduler.utils._split",
  "adaptive_scheduler.utils._wait_for_successful_ipyparallel_client_start",
  "adaptive_scheduler.utils.add_constant_to_fname",
  "adaptive_scheduler.utils.combine_sequence_learners",
  "adaptive_scheduler.utils.combo2fname",
  "adaptive_scheduler.utils.combo_to_fname",
  "adaptive_scheduler.utils.connect_to_ipyparallel",
  "adaptive_scheduler.utils.copy_from_sequence_learner",
  "adaptive_scheduler.utils.hash_anything",
  "adaptive_scheduler.utils.load_parallel",
  "adaptive_scheduler.utils.log_exception",
  "adaptive_scheduler.utils.maybe_lst",
  "adaptive_scheduler.utils.maybe_round",
  "adaptive_scheduler.utils.round_sigfigs",
  "adaptive_scheduler.utils.save_parallel",
  "adaptive_scheduler.utils.shared_memory_cache",
  "adaptive_scheduler.utils.shuffle_list",
  "adaptive_scheduler.utils.split",
  "adaptive_scheduler.widgets",
  "adaptive_scheduler.widgets._failed_job_logs",
  "adaptive_scheduler.widgets._files_that_contain",
  "adaptive_scheduler.widgets._get_fnames",
  "adaptive_scheduler.widgets._info_html",
  "adaptive_scheduler.widgets._read_file",
  "adaptive_scheduler.widgets._sort_fnames",
  "adaptive_scheduler.widgets.info",
  "adaptive_scheduler.widgets.log_explorer"
 ]
}