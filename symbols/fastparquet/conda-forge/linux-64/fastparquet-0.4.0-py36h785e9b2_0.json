{
 "errors": {
  "fastparquet.core": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 110, in wrapper",
    "    next_element = cached_lst[i]",
    "IndexError: list index out of range",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 91, in dynamic_param_lookup",
    "    arguments_list = _search_function_arguments(module_context, funcdef, string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 140, in _search_function_arguments",
    "    inference_state, random_context, compare_node, name, trailer):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 197, in _check_name_for_execution",
    "    for value in inference_state.infer(context, name):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 180, in infer",
    "    return helpers.infer_call_of_leaf(context, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 107, in infer_call_of_leaf",
    "    values = infer_trailer(context, values, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 180, in get_filters",
    "    for cls in class_value.py__mro__():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 117, in wrapper",
    "    next_element = next(actual_generator, None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 179, in py__mro__",
    "    for cls in lazy_cls.infer():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "fastparquet.encoding": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in values",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 243, in <listcomp>",
    "    return [n for filter in self._filters for n in filter.values()]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in _convert_names",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 88, in <listcomp>",
    "    return [self.name_class(self.parent_context, name) for name in names]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 70, in wrapper",
    "    and context.get_value() is inference_state.builtins_module:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "fastparquet.writer": {
   "exception": "invalid load key, '\\x00'.",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "_pickle.UnpicklingError: invalid load key, '\\x00'.",
    ""
   ]
  }
 },
 "symbols": [
  "fastparquet.ParquetException",
  "fastparquet.ParquetFile",
  "fastparquet.__version__",
  "fastparquet.api",
  "fastparquet.api.ParquetFile",
  "fastparquet.api._handle_np_array",
  "fastparquet.api._pre_allocate",
  "fastparquet.api.filter_in",
  "fastparquet.api.filter_not_in",
  "fastparquet.api.filter_out_cats",
  "fastparquet.api.filter_out_stats",
  "fastparquet.api.filter_val",
  "fastparquet.api.join_path",
  "fastparquet.api.paths_to_cats",
  "fastparquet.api.sorted_partitioned_columns",
  "fastparquet.api.statistics",
  "fastparquet.benchmarks",
  "fastparquet.benchmarks.columns.ParquetFile",
  "fastparquet.benchmarks.columns.f",
  "fastparquet.benchmarks.columns.ignoring",
  "fastparquet.benchmarks.columns.join_path",
  "fastparquet.benchmarks.columns.k",
  "fastparquet.benchmarks.columns.measure",
  "fastparquet.benchmarks.columns.result",
  "fastparquet.benchmarks.columns.run_find_nulls",
  "fastparquet.benchmarks.columns.time_column",
  "fastparquet.benchmarks.columns.time_find_nulls",
  "fastparquet.benchmarks.columns.time_text",
  "fastparquet.benchmarks.columns.tmpdir",
  "fastparquet.benchmarks.columns.write",
  "fastparquet.compression",
  "fastparquet.compression.COMPRESSION_LEVEL",
  "fastparquet.compression.brotli_decompress",
  "fastparquet.compression.compress_data",
  "fastparquet.compression.compressions",
  "fastparquet.compression.decompress_data",
  "fastparquet.compression.decompressions",
  "fastparquet.compression.gzip_compress_v3",
  "fastparquet.compression.gzip_decompress",
  "fastparquet.compression.lz4_compress",
  "fastparquet.compression.lz4_decompress",
  "fastparquet.compression.lzo_decompress",
  "fastparquet.compression.rev_map",
  "fastparquet.compression.snappy_decompress",
  "fastparquet.compression.zstd_compress",
  "fastparquet.compression.zstd_decompress",
  "fastparquet.converted_types",
  "fastparquet.converted_types.DAYS_TO_MILLIS",
  "fastparquet.converted_types.complex",
  "fastparquet.converted_types.convert",
  "fastparquet.converted_types.logger",
  "fastparquet.converted_types.nat",
  "fastparquet.converted_types.simple",
  "fastparquet.converted_types.time_shift",
  "fastparquet.converted_types.tobson",
  "fastparquet.converted_types.typemap",
  "fastparquet.converted_types.unbson",
  "fastparquet.core",
  "fastparquet.dataframe",
  "fastparquet.dataframe.Dummy",
  "fastparquet.dataframe.empty",
  "fastparquet.encoding",
  "fastparquet.parquet_thrift",
  "fastparquet.parquet_thrift.parquet",
  "fastparquet.parquet_thrift.parquet.__all__",
  "fastparquet.parquet_thrift.parquet.constants",
  "fastparquet.parquet_thrift.parquet.constants.ColumnChunk",
  "fastparquet.parquet_thrift.parquet.constants.ColumnMetaData",
  "fastparquet.parquet_thrift.parquet.constants.ColumnOrder",
  "fastparquet.parquet_thrift.parquet.constants.CompressionCodec",
  "fastparquet.parquet_thrift.parquet.constants.ConvertedType",
  "fastparquet.parquet_thrift.parquet.constants.DataPageHeader",
  "fastparquet.parquet_thrift.parquet.constants.DictionaryPageHeader",
  "fastparquet.parquet_thrift.parquet.constants.Encoding",
  "fastparquet.parquet_thrift.parquet.constants.FieldRepetitionType",
  "fastparquet.parquet_thrift.parquet.constants.FileMetaData",
  "fastparquet.parquet_thrift.parquet.constants.IndexPageHeader",
  "fastparquet.parquet_thrift.parquet.constants.KeyValue",
  "fastparquet.parquet_thrift.parquet.constants.PageEncodingStats",
  "fastparquet.parquet_thrift.parquet.constants.PageHeader",
  "fastparquet.parquet_thrift.parquet.constants.PageType",
  "fastparquet.parquet_thrift.parquet.constants.RowGroup",
  "fastparquet.parquet_thrift.parquet.constants.SchemaElement",
  "fastparquet.parquet_thrift.parquet.constants.SortingColumn",
  "fastparquet.parquet_thrift.parquet.constants.Statistics",
  "fastparquet.parquet_thrift.parquet.constants.Type",
  "fastparquet.parquet_thrift.parquet.ttypes",
  "fastparquet.parquet_thrift.parquet.ttypes.ColumnChunk",
  "fastparquet.parquet_thrift.parquet.ttypes.ColumnMetaData",
  "fastparquet.parquet_thrift.parquet.ttypes.ColumnOrder",
  "fastparquet.parquet_thrift.parquet.ttypes.CompressionCodec",
  "fastparquet.parquet_thrift.parquet.ttypes.ConvertedType",
  "fastparquet.parquet_thrift.parquet.ttypes.DataPageHeader",
  "fastparquet.parquet_thrift.parquet.ttypes.DictionaryPageHeader",
  "fastparquet.parquet_thrift.parquet.ttypes.Encoding",
  "fastparquet.parquet_thrift.parquet.ttypes.FieldRepetitionType",
  "fastparquet.parquet_thrift.parquet.ttypes.FileMetaData",
  "fastparquet.parquet_thrift.parquet.ttypes.IndexPageHeader",
  "fastparquet.parquet_thrift.parquet.ttypes.KeyValue",
  "fastparquet.parquet_thrift.parquet.ttypes.PageEncodingStats",
  "fastparquet.parquet_thrift.parquet.ttypes.PageHeader",
  "fastparquet.parquet_thrift.parquet.ttypes.PageType",
  "fastparquet.parquet_thrift.parquet.ttypes.RowGroup",
  "fastparquet.parquet_thrift.parquet.ttypes.SchemaElement",
  "fastparquet.parquet_thrift.parquet.ttypes.SortingColumn",
  "fastparquet.parquet_thrift.parquet.ttypes.Statistics",
  "fastparquet.parquet_thrift.parquet.ttypes.Type",
  "fastparquet.read_thrift",
  "fastparquet.schema",
  "fastparquet.schema.SchemaHelper",
  "fastparquet.schema._is_list_like",
  "fastparquet.schema._is_map_like",
  "fastparquet.schema.flatten",
  "fastparquet.schema.schema_to_text",
  "fastparquet.schema.schema_tree",
  "fastparquet.speedups.array_decode_utf8",
  "fastparquet.speedups.array_encode_utf8",
  "fastparquet.speedups.pack_byte_array",
  "fastparquet.speedups.unpack_byte_array",
  "fastparquet.test",
  "fastparquet.test.test_api",
  "fastparquet.test.test_api.ParquetFile",
  "fastparquet.test.test_api.TEST_DATA",
  "fastparquet.test.test_api.filter_in",
  "fastparquet.test.test_api.filter_not_in",
  "fastparquet.test.test_api.join_path",
  "fastparquet.test.test_api.sorted_partitioned_columns",
  "fastparquet.test.test_api.statistics",
  "fastparquet.test.test_api.tempdir",
  "fastparquet.test.test_api.test_attributes",
  "fastparquet.test.test_api.test_bad_file_paths",
  "fastparquet.test.test_api.test_cast_index",
  "fastparquet.test.test_api.test_compression_lz4",
  "fastparquet.test.test_api.test_compression_snappy",
  "fastparquet.test.test_api.test_compression_zstandard",
  "fastparquet.test.test_api.test_compression_zstd",
  "fastparquet.test.test_api.test_datetime_category_no_dupilcates",
  "fastparquet.test.test_api.test_datetime_partition_names",
  "fastparquet.test.test_api.test_datetime_partition_no_dupilcates",
  "fastparquet.test.test_api.test_drill_list",
  "fastparquet.test.test_api.test_empty_df",
  "fastparquet.test.test_api.test_empty_statistics",
  "fastparquet.test.test_api.test_filelike",
  "fastparquet.test.test_api.test_filter_dates",
  "fastparquet.test.test_api.test_filter_special",
  "fastparquet.test.test_api.test_filter_stats",
  "fastparquet.test.test_api.test_filter_without_paths",
  "fastparquet.test.test_api.test_floating_point_partition_name",
  "fastparquet.test.test_api.test_hive_and_drill_list",
  "fastparquet.test.test_api.test_import_without_warning",
  "fastparquet.test.test_api.test_in_filter",
  "fastparquet.test.test_api.test_index_not_in_columns",
  "fastparquet.test.test_api.test_input_column_list_not_mutated",
  "fastparquet.test.test_api.test_int96_stats",
  "fastparquet.test.test_api.test_iter",
  "fastparquet.test.test_api.test_logical_types",
  "fastparquet.test.test_api.test_mixed_partition_types_warning",
  "fastparquet.test.test_api.test_multi",
  "fastparquet.test.test_api.test_no_index_name",
  "fastparquet.test.test_api.test_numerical_partition_name",
  "fastparquet.test.test_api.test_only_partition_columns",
  "fastparquet.test.test_api.test_open_standard",
  "fastparquet.test.test_api.test_pandas_metadata_inference",
  "fastparquet.test.test_api.test_path_containing_metadata_df",
  "fastparquet.test.test_api.test_read_multiple_no_metadata",
  "fastparquet.test.test_api.test_request_nonexistent_column",
  "fastparquet.test.test_api.test_simple_nested",
  "fastparquet.test.test_api.test_single_upper_directory",
  "fastparquet.test.test_api.test_sorted_row_group_columns",
  "fastparquet.test.test_api.test_statistics",
  "fastparquet.test.test_api.test_unicode_cols",
  "fastparquet.test.test_api.test_zero_child_leaf",
  "fastparquet.test.test_api.write",
  "fastparquet.test.test_aroundtrips",
  "fastparquet.test.test_aroundtrips.TEST_DATA",
  "fastparquet.test.test_aroundtrips.compressions",
  "fastparquet.test.test_aroundtrips.s3",
  "fastparquet.test.test_aroundtrips.test_empty_row_groups",
  "fastparquet.test.test_aroundtrips.test_map_array",
  "fastparquet.test.test_aroundtrips.test_nested_list",
  "fastparquet.test.test_aroundtrips.test_pyspark_roundtrip",
  "fastparquet.test.test_aroundtrips.write",
  "fastparquet.test.test_compression",
  "fastparquet.test.test_compression.compress_data",
  "fastparquet.test.test_compression.compressions",
  "fastparquet.test.test_compression.decompress_data",
  "fastparquet.test.test_compression.decompressions",
  "fastparquet.test.test_compression.test_compress_decompress_roundtrip",
  "fastparquet.test.test_compression.test_errors",
  "fastparquet.test.test_compression.test_not_installed",
  "fastparquet.test.test_converted_types",
  "fastparquet.test.test_converted_types.PY2",
  "fastparquet.test.test_converted_types.convert",
  "fastparquet.test.test_converted_types.parquet_thrift",
  "fastparquet.test.test_converted_types.test_big_decimal",
  "fastparquet.test.test_converted_types.test_bson",
  "fastparquet.test.test_converted_types.test_date",
  "fastparquet.test.test_converted_types.test_int32",
  "fastparquet.test.test_converted_types.test_json",
  "fastparquet.test.test_converted_types.test_time_millis",
  "fastparquet.test.test_converted_types.test_timestamp_millis",
  "fastparquet.test.test_converted_types.test_uint16",
  "fastparquet.test.test_converted_types.test_uint32",
  "fastparquet.test.test_converted_types.test_uint64",
  "fastparquet.test.test_converted_types.test_utf8",
  "fastparquet.test.test_dataframe",
  "fastparquet.test.test_dataframe.DatetimeTZDtype",
  "fastparquet.test.test_dataframe.empty",
  "fastparquet.test.test_dataframe.test_empty",
  "fastparquet.test.test_dataframe.test_timestamps",
  "fastparquet.test.test_encoding",
  "fastparquet.test.test_encoding.parquet_thrift",
  "fastparquet.test.test_encoding.testFourByte",
  "fastparquet.test.test_encoding.testFromExample",
  "fastparquet.test.test_encoding.testSingleByte",
  "fastparquet.test.test_encoding.testWidths",
  "fastparquet.test.test_encoding.test_boolean",
  "fastparquet.test.test_encoding.test_double",
  "fastparquet.test.test_encoding.test_fixed",
  "fastparquet.test.test_encoding.test_float",
  "fastparquet.test.test_encoding.test_int32",
  "fastparquet.test.test_encoding.test_int64",
  "fastparquet.test.test_encoding.test_int96",
  "fastparquet.test.test_output",
  "fastparquet.test.test_output.ParquetFile",
  "fastparquet.test.test_output.TEST_DATA",
  "fastparquet.test.test_output.default_mkdirs",
  "fastparquet.test.test_output.encoding",
  "fastparquet.test.test_output.parquet_thrift",
  "fastparquet.test.test_output.s3",
  "fastparquet.test.test_output.sql",
  "fastparquet.test.test_output.test_append",
  "fastparquet.test.test_output.test_auto_null",
  "fastparquet.test.test_output.test_autocat",
  "fastparquet.test.test_output.test_bad_col",
  "fastparquet.test.test_output.test_bad_object_encoding",
  "fastparquet.test.test_output.test_bitpack",
  "fastparquet.test.test_output.test_cats_and_nulls",
  "fastparquet.test.test_output.test_cats_in_part_files",
  "fastparquet.test.test_output.test_cmd_bytesize",
  "fastparquet.test.test_output.test_consolidate_cats",
  "fastparquet.test.test_output.test_datetime_roundtrip",
  "fastparquet.test.test_output.test_dotted_column",
  "fastparquet.test.test_output.test_duplicate_columns",
  "fastparquet.test.test_output.test_empty_dataframe",
  "fastparquet.test.test_output.test_empty_groupby",
  "fastparquet.test.test_output.test_empty_row_group",
  "fastparquet.test.test_output.test_groups_iterable",
  "fastparquet.test.test_output.test_groups_roundtrip",
  "fastparquet.test.test_output.test_hasnulls_ordering",
  "fastparquet.test.test_output.test_index",
  "fastparquet.test.test_output.test_int_rowgroups",
  "fastparquet.test.test_output.test_length",
  "fastparquet.test.test_output.test_make_definitions_with_nulls",
  "fastparquet.test.test_output.test_make_definitions_without_nulls",
  "fastparquet.test.test_output.test_many_categories",
  "fastparquet.test.test_output.test_merge",
  "fastparquet.test.test_output.test_naive_index",
  "fastparquet.test.test_output.test_null_time",
  "fastparquet.test.test_output.test_nulls_roundtrip",
  "fastparquet.test.test_output.test_object_encoding_int32",
  "fastparquet.test.test_output.test_read_partitioned_and_write_with_empty_partions",
  "fastparquet.test.test_output.test_rle_bp",
  "fastparquet.test.test_output.test_roundtrip",
  "fastparquet.test.test_output.test_text_convert",
  "fastparquet.test.test_output.test_too_many_partition_columns",
  "fastparquet.test.test_output.test_uvarint",
  "fastparquet.test.test_output.test_write_compression_dict",
  "fastparquet.test.test_output.test_write_compression_schema",
  "fastparquet.test.test_output.test_write_delta",
  "fastparquet.test.test_output.write",
  "fastparquet.test.test_partition_filters_specialstrings",
  "fastparquet.test.test_partition_filters_specialstrings.ParquetFile",
  "fastparquet.test.test_partition_filters_specialstrings.frame_symbol_dtTrade_type_strike",
  "fastparquet.test.test_partition_filters_specialstrings.test_frame_write_read_verify",
  "fastparquet.test.test_partition_filters_specialstrings.write",
  "fastparquet.test.test_read",
  "fastparquet.test.test_read.TEST_DATA",
  "fastparquet.test.test_read.cols",
  "fastparquet.test.test_read.core",
  "fastparquet.test.test_read.csvfile",
  "fastparquet.test.test_read.files",
  "fastparquet.test.test_read.s3",
  "fastparquet.test.test_read.tempdir",
  "fastparquet.test.test_read.test_bad_catsize",
  "fastparquet.test.test_read.test_cat_filters",
  "fastparquet.test.test_read.test_converted_type_null",
  "fastparquet.test.test_read.test_dir_partition",
  "fastparquet.test.test_read.test_file_csv",
  "fastparquet.test.test_read.test_grab_cats",
  "fastparquet.test.test_read.test_header_magic_bytes",
  "fastparquet.test.test_read.test_index",
  "fastparquet.test.test_read.test_map_last_row_split",
  "fastparquet.test.test_read.test_map_multipage",
  "fastparquet.test.test_read.test_multi_index",
  "fastparquet.test.test_read.test_no_columns",
  "fastparquet.test.test_read.test_null_int",
  "fastparquet.test.test_read.test_null_plain_dictionary",
  "fastparquet.test.test_read.test_null_sizes",
  "fastparquet.test.test_read.test_read_footer",
  "fastparquet.test.test_read.test_read_s3",
  "fastparquet.test.test_read.test_skip_length",
  "fastparquet.test.test_read.test_stat_filters",
  "fastparquet.test.test_read.test_statistics",
  "fastparquet.test.test_read.test_timestamp96",
  "fastparquet.test.test_read.test_truncated_decimal",
  "fastparquet.test.test_read.writer",
  "fastparquet.test.test_schema",
  "fastparquet.test.test_schema.ParquetFile",
  "fastparquet.test.test_schema._convert_to_parquet",
  "fastparquet.test.test_schema._generate_random_dataframe",
  "fastparquet.test.test_schema.test_schema_eq",
  "fastparquet.test.test_schema.test_schema_ne_converted",
  "fastparquet.test.test_schema.test_schema_ne_different_order",
  "fastparquet.test.test_schema.test_schema_ne_renamed",
  "fastparquet.test.test_schema.test_schema_ne_subset",
  "fastparquet.test.test_schema.write",
  "fastparquet.test.test_speedups",
  "fastparquet.test.test_speedups.PY2",
  "fastparquet.test.test_speedups.PY3",
  "fastparquet.test.test_speedups.array_decode_utf8",
  "fastparquet.test.test_speedups.array_encode_utf8",
  "fastparquet.test.test_speedups.pack_byte_array",
  "fastparquet.test.test_speedups.strings",
  "fastparquet.test.test_speedups.test_array_decode_utf8",
  "fastparquet.test.test_speedups.test_array_encode_utf8",
  "fastparquet.test.test_speedups.test_pack_byte_array",
  "fastparquet.test.test_speedups.test_unpack_byte_array",
  "fastparquet.test.test_speedups.unpack_byte_array",
  "fastparquet.test.test_thrift_structures",
  "fastparquet.test.test_thrift_structures.ParquetFile",
  "fastparquet.test.test_thrift_structures.TEST_DATA",
  "fastparquet.test.test_thrift_structures.fn",
  "fastparquet.test.test_thrift_structures.pf",
  "fastparquet.test.test_thrift_structures.schema_tree",
  "fastparquet.test.test_thrift_structures.test_copy",
  "fastparquet.test.test_thrift_structures.test_serialize",
  "fastparquet.test.test_util",
  "fastparquet.test.test_util.analyse_paths",
  "fastparquet.test.test_util.get_column_metadata",
  "fastparquet.test.test_util.get_file_scheme",
  "fastparquet.test.test_util.groupby_types",
  "fastparquet.test.test_util.join_path",
  "fastparquet.test.test_util.test_abs_and_rel_paths",
  "fastparquet.test.test_util.test_analyse_paths",
  "fastparquet.test.test_util.test_bad_tz",
  "fastparquet.test.test_util.test_empty",
  "fastparquet.test.test_util.test_file_scheme",
  "fastparquet.test.test_util.test_groupby_types",
  "fastparquet.test.test_util.test_parents",
  "fastparquet.test.test_util.test_val_to_num",
  "fastparquet.test.test_util.val_to_num",
  "fastparquet.test.test_with_n",
  "fastparquet.test.test_with_n.ParquetFile",
  "fastparquet.test.test_with_n.TEST_DATA",
  "fastparquet.test.test_with_n.core",
  "fastparquet.test.test_with_n.count",
  "fastparquet.test.test_with_n.encoding",
  "fastparquet.test.test_with_n.here",
  "fastparquet.test.test_with_n.schema",
  "fastparquet.test.test_with_n.test_hybrid",
  "fastparquet.test.test_with_n.test_read_bitpacked",
  "fastparquet.test.test_with_n.test_read_data",
  "fastparquet.test.test_with_n.test_rle",
  "fastparquet.test.test_with_n.test_to_pandas",
  "fastparquet.test.test_with_n.test_uvarint",
  "fastparquet.test.test_with_n.util",
  "fastparquet.test.util",
  "fastparquet.test.util.TEST_DATA",
  "fastparquet.test.util.s3",
  "fastparquet.test.util.sql",
  "fastparquet.test.util.tempdir",
  "fastparquet.thrift_structures",
  "fastparquet.thrift_structures.bind_method",
  "fastparquet.thrift_structures.cls",
  "fastparquet.thrift_structures.clsname",
  "fastparquet.thrift_structures.copy_method",
  "fastparquet.thrift_structures.getstate_method",
  "fastparquet.thrift_structures.is_thrift_item",
  "fastparquet.thrift_structures.read_thrift",
  "fastparquet.thrift_structures.setstate_method",
  "fastparquet.thrift_structures.thrift_print",
  "fastparquet.thrift_structures.write_thrift",
  "fastparquet.util",
  "fastparquet.util.PANDAS_VERSION",
  "fastparquet.util.PY2",
  "fastparquet.util.PY3",
  "fastparquet.util.ParquetException",
  "fastparquet.util.STR_TYPE",
  "fastparquet.util.analyse_paths",
  "fastparquet.util.byte_buffer",
  "fastparquet.util.check_column_names",
  "fastparquet.util.created_by",
  "fastparquet.util.default_mkdirs",
  "fastparquet.util.default_open",
  "fastparquet.util.ensure_bytes",
  "fastparquet.util.ex_from_sep",
  "fastparquet.util.filterfalse",
  "fastparquet.util.get_column_metadata",
  "fastparquet.util.get_file_scheme",
  "fastparquet.util.get_numpy_type",
  "fastparquet.util.groupby_types",
  "fastparquet.util.infer_dtype",
  "fastparquet.util.join_path",
  "fastparquet.util.metadata_from_many",
  "fastparquet.util.seps",
  "fastparquet.util.unique_everseen",
  "fastparquet.util.val_to_num",
  "fastparquet.write",
  "fastparquet.writer"
 ]
}