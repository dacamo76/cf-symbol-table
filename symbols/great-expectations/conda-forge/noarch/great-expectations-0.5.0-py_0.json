{
 "errors": {
  "great_expectations.dataset.pandas_dataset": {
   "exception": "'NoneType' object has no attribute 'type'",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 311, in _complete_python",
    "    completion_names += self._complete_inherited(is_function=False)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 428, in _complete_inherited",
    "    if (name.api_type == 'function') == is_function:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 80, in api_type",
    "    if definition.type == 'funcdef':",
    "AttributeError: 'NoneType' object has no attribute 'type'",
    ""
   ]
  }
 },
 "symbols": [
  "great_expectations.__version__",
  "great_expectations.cli.Dataset",
  "great_expectations.cli.FileDataAsset",
  "great_expectations.cli.PandasDataset",
  "great_expectations.cli.__version__",
  "great_expectations.cli.dispatch",
  "great_expectations.cli.logger",
  "great_expectations.cli.main",
  "great_expectations.cli.read_csv",
  "great_expectations.cli.validate",
  "great_expectations.cli.version",
  "great_expectations.data_asset.FileDataAsset",
  "great_expectations.data_asset.base.DataAsset",
  "great_expectations.data_asset.base.DotDict",
  "great_expectations.data_asset.base.ValidationStatistics",
  "great_expectations.data_asset.base.__version__",
  "great_expectations.data_asset.base._calc_validation_statistics",
  "great_expectations.data_asset.base.columns_exist",
  "great_expectations.data_asset.base.logger",
  "great_expectations.data_asset.base.parse_result_format",
  "great_expectations.data_asset.base.recursively_convert_to_json_serializable",
  "great_expectations.data_asset.file_data_asset.DataAsset",
  "great_expectations.data_asset.file_data_asset.FileDataAsset",
  "great_expectations.data_asset.file_data_asset.MetaFileDataAsset",
  "great_expectations.data_asset.file_data_asset.parse_result_format",
  "great_expectations.data_asset.util.DocInherit",
  "great_expectations.data_asset.util.DotDict",
  "great_expectations.data_asset.util.parse_result_format",
  "great_expectations.data_asset.util.recursively_convert_to_json_serializable",
  "great_expectations.data_context.PandasCSVDataContext",
  "great_expectations.data_context.SqlAlchemyDataContext",
  "great_expectations.data_context.base",
  "great_expectations.data_context.base.DataContext",
  "great_expectations.data_context.get_data_context",
  "great_expectations.data_context.pandas_context",
  "great_expectations.data_context.pandas_context.PandasCSVDataContext",
  "great_expectations.data_context.sqlalchemy_context",
  "great_expectations.data_context.sqlalchemy_context.SqlAlchemyDataContext",
  "great_expectations.dataset",
  "great_expectations.dataset.Dataset",
  "great_expectations.dataset.MetaPandasDataset",
  "great_expectations.dataset.MetaSqlAlchemyDataset",
  "great_expectations.dataset.PandasDataset",
  "great_expectations.dataset.SqlAlchemyDataset",
  "great_expectations.dataset.autoinspect",
  "great_expectations.dataset.autoinspect.AutoInspectError",
  "great_expectations.dataset.autoinspect.columns_exist",
  "great_expectations.dataset.dataset",
  "great_expectations.dataset.dataset.DataAsset",
  "great_expectations.dataset.dataset.Dataset",
  "great_expectations.dataset.pandas_dataset",
  "great_expectations.dataset.sqlalchemy_dataset",
  "great_expectations.dataset.sqlalchemy_dataset.DocInherit",
  "great_expectations.dataset.sqlalchemy_dataset.MetaSqlAlchemyDataset",
  "great_expectations.dataset.sqlalchemy_dataset.SqlAlchemyDataset",
  "great_expectations.dataset.sqlalchemy_dataset.parse_result_format",
  "great_expectations.dataset.util",
  "great_expectations.dataset.util._scipy_distribution_positional_args_from_dict",
  "great_expectations.dataset.util.categorical_partition_data",
  "great_expectations.dataset.util.continuous_partition_data",
  "great_expectations.dataset.util.create_multiple_expectations",
  "great_expectations.dataset.util.infer_distribution_parameters",
  "great_expectations.dataset.util.is_valid_categorical_partition_object",
  "great_expectations.dataset.util.is_valid_continuous_partition_object",
  "great_expectations.dataset.util.is_valid_partition_object",
  "great_expectations.dataset.util.kde_partition_data",
  "great_expectations.dataset.util.partition_data",
  "great_expectations.dataset.util.validate_distribution_parameters",
  "great_expectations.read_csv",
  "great_expectations.util.DotDict",
  "great_expectations.util._convert_to_dataset_class",
  "great_expectations.util.dataset",
  "great_expectations.util.from_pandas",
  "great_expectations.util.read_csv",
  "great_expectations.util.read_excel",
  "great_expectations.util.read_json",
  "great_expectations.util.read_parquet",
  "great_expectations.util.read_table",
  "great_expectations.util.validate",
  "great_expectations.version.__version__",
  "tests.column_aggregate_expectations_distributional.test_pandas_dataset_distributional_expectations",
  "tests.column_aggregate_expectations_distributional.test_pandas_dataset_distributional_expectations.TestDistributionalExpectations",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.custom_dataset",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_broken_decorator_errors",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_column_fallback",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_custom_sqlalchemydataset",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_missing_engine_error",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_result_format_warning",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_schema_custom_sql_error",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_sqlalchemy_dataset_unexpected_count_calculations",
  "tests.sqlalchemy_dataset.test_sqlalchemydataset.test_sqlalchemydataset_with_custom_sql",
  "tests.test_definitions.test_expectations",
  "tests.test_definitions.test_expectations.contexts",
  "tests.test_definitions.test_expectations.logger",
  "tests.test_definitions.test_expectations.pytest_generate_tests",
  "tests.test_definitions.test_expectations.test_case_runner"
 ]
}