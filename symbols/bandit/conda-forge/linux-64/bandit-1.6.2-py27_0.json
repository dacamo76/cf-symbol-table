{
 "errors": {
  "bandit.core.metrics": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/typing.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 331, in _get_annotated_class_object",
    "    for signature in self.class_value.py__getattribute__('__init__').get_signatures():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 206, in get_filters",
    "    metaclasses = self.get_metaclasses()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 394, in get_metaclasses",
    "    for value in lazy_base.infer():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "bandit.CONFIDENCE_DEFAULT",
  "bandit.CRITERIA",
  "bandit.FALSE_VALUES",
  "bandit.Issue",
  "bandit.LOG",
  "bandit.RANKING",
  "bandit.RANKING_VALUES",
  "bandit.__main__",
  "bandit.__main__.main",
  "bandit.__version__",
  "bandit.accepts_baseline",
  "bandit.blacklists",
  "bandit.blacklists.calls",
  "bandit.blacklists.calls.gen_blacklist",
  "bandit.blacklists.calls.utils",
  "bandit.blacklists.imports",
  "bandit.blacklists.imports.gen_blacklist",
  "bandit.blacklists.imports.utils",
  "bandit.blacklists.utils",
  "bandit.blacklists.utils.build_conf_dict",
  "bandit.checks",
  "bandit.cli",
  "bandit.cli.baseline",
  "bandit.cli.baseline.LOG",
  "bandit.cli.baseline.bandit_args",
  "bandit.cli.baseline.baseline_setup",
  "bandit.cli.baseline.baseline_tmp_file",
  "bandit.cli.baseline.current_commit",
  "bandit.cli.baseline.default_output_format",
  "bandit.cli.baseline.init_logger",
  "bandit.cli.baseline.initialize",
  "bandit.cli.baseline.main",
  "bandit.cli.baseline.repo",
  "bandit.cli.baseline.report_basename",
  "bandit.cli.baseline.valid_baseline_formats",
  "bandit.cli.config_generator",
  "bandit.cli.config_generator.LOG",
  "bandit.cli.config_generator.PROG_NAME",
  "bandit.cli.config_generator.extension_loader",
  "bandit.cli.config_generator.get_config_settings",
  "bandit.cli.config_generator.init_logger",
  "bandit.cli.config_generator.main",
  "bandit.cli.config_generator.parse_args",
  "bandit.cli.config_generator.template",
  "bandit.cli.main",
  "bandit.cli.main.BASE_CONFIG",
  "bandit.cli.main.LOG",
  "bandit.cli.main._get_options_from_ini",
  "bandit.cli.main._get_profile",
  "bandit.cli.main._init_extensions",
  "bandit.cli.main._init_logger",
  "bandit.cli.main._log_info",
  "bandit.cli.main._log_option_source",
  "bandit.cli.main._running_under_virtualenv",
  "bandit.cli.main.config",
  "bandit.cli.main.constants",
  "bandit.cli.main.main",
  "bandit.cli.main.manager",
  "bandit.cli.main.utils",
  "bandit.config",
  "bandit.constants",
  "bandit.context",
  "bandit.core",
  "bandit.core.CONFIDENCE_DEFAULT",
  "bandit.core.CRITERIA",
  "bandit.core.FALSE_VALUES",
  "bandit.core.Issue",
  "bandit.core.LOG",
  "bandit.core.RANKING",
  "bandit.core.RANKING_VALUES",
  "bandit.core.accepts_baseline",
  "bandit.core.blacklisting",
  "bandit.core.blacklisting.blacklist",
  "bandit.core.blacklisting.issue",
  "bandit.core.blacklisting.report_issue",
  "bandit.core.checks",
  "bandit.core.config",
  "bandit.core.config.BanditConfig",
  "bandit.core.config.LOG",
  "bandit.core.config.constants",
  "bandit.core.config.extension_loader",
  "bandit.core.config.utils",
  "bandit.core.constants",
  "bandit.core.constants.CONFIDENCE_DEFAULT",
  "bandit.core.constants.CRITERIA",
  "bandit.core.constants.FALSE_VALUES",
  "bandit.core.constants.RANKING",
  "bandit.core.constants.RANKING_VALUES",
  "bandit.core.constants.log_format_string",
  "bandit.core.constants.plugin_name_pattern",
  "bandit.core.constants.progress_increment",
  "bandit.core.constants.rank",
  "bandit.core.context",
  "bandit.core.context.Context",
  "bandit.core.context.utils",
  "bandit.core.docs_utils",
  "bandit.core.docs_utils.BASE_URL",
  "bandit.core.docs_utils.extension_loader",
  "bandit.core.docs_utils.get_url",
  "bandit.core.extension_loader",
  "bandit.core.extension_loader.MANAGER",
  "bandit.core.extension_loader.Manager",
  "bandit.core.extension_loader.utils",
  "bandit.core.issue",
  "bandit.core.issue.Issue",
  "bandit.core.issue.constants",
  "bandit.core.issue.issue_from_dict",
  "bandit.core.issue_from_dict",
  "bandit.core.log_format_string",
  "bandit.core.manager",
  "bandit.core.manager.BanditManager",
  "bandit.core.manager.LOG",
  "bandit.core.manager._compare_baseline_results",
  "bandit.core.manager._find_candidate_matches",
  "bandit.core.manager._get_files_from_dir",
  "bandit.core.manager._is_file_included",
  "bandit.core.manager._matches_glob_list",
  "bandit.core.manager.constants",
  "bandit.core.manager.extension_loader",
  "bandit.core.manager.issue",
  "bandit.core.manager.meta_ast",
  "bandit.core.manager.metrics",
  "bandit.core.manager.node_visitor",
  "bandit.core.manager.test_set",
  "bandit.core.meta_ast",
  "bandit.core.meta_ast.BanditMetaAst",
  "bandit.core.meta_ast.LOG",
  "bandit.core.metrics",
  "bandit.core.node_visitor",
  "bandit.core.node_visitor.BanditNodeVisitor",
  "bandit.core.node_visitor.LOG",
  "bandit.core.node_visitor.constants",
  "bandit.core.node_visitor.tester",
  "bandit.core.node_visitor.utils",
  "bandit.core.plugin_name_pattern",
  "bandit.core.progress_increment",
  "bandit.core.rank",
  "bandit.core.takes_config",
  "bandit.core.test_id",
  "bandit.core.test_properties",
  "bandit.core.test_properties.LOG",
  "bandit.core.test_properties.accepts_baseline",
  "bandit.core.test_properties.checks",
  "bandit.core.test_properties.takes_config",
  "bandit.core.test_properties.test_id",
  "bandit.core.test_properties.utils",
  "bandit.core.test_set",
  "bandit.core.test_set.BanditTestSet",
  "bandit.core.test_set.LOG",
  "bandit.core.test_set.blacklisting",
  "bandit.core.test_set.extension_loader",
  "bandit.core.tester",
  "bandit.core.tester.BanditTester",
  "bandit.core.tester.LOG",
  "bandit.core.tester.constants",
  "bandit.core.tester.context",
  "bandit.core.tester.utils",
  "bandit.core.utils",
  "bandit.core.utils.ConfigError",
  "bandit.core.utils.InvalidModulePath",
  "bandit.core.utils.LOG",
  "bandit.core.utils.ProfileNotFound",
  "bandit.core.utils._get_attr_qual_name",
  "bandit.core.utils.check_ast_node",
  "bandit.core.utils.concat_string",
  "bandit.core.utils.deepgetattr",
  "bandit.core.utils.escaped_bytes_representation",
  "bandit.core.utils.get_call_name",
  "bandit.core.utils.get_called_name",
  "bandit.core.utils.get_func_name",
  "bandit.core.utils.get_module_qualname_from_path",
  "bandit.core.utils.get_path_for_function",
  "bandit.core.utils.get_qual_attr",
  "bandit.core.utils.linerange",
  "bandit.core.utils.namespace_path_join",
  "bandit.core.utils.namespace_path_split",
  "bandit.core.utils.parse_ini_file",
  "bandit.core.utils.warnings_formatter",
  "bandit.formatters",
  "bandit.formatters.csv",
  "bandit.formatters.csv.LOG",
  "bandit.formatters.csv.docs_utils",
  "bandit.formatters.csv.report",
  "bandit.formatters.custom",
  "bandit.formatters.custom.LOG",
  "bandit.formatters.custom.SafeMapper",
  "bandit.formatters.custom.report",
  "bandit.formatters.custom.test_properties",
  "bandit.formatters.html",
  "bandit.formatters.html.LOG",
  "bandit.formatters.html.docs_utils",
  "bandit.formatters.html.report",
  "bandit.formatters.html.test_properties",
  "bandit.formatters.html.utils",
  "bandit.formatters.json",
  "bandit.formatters.json.LOG",
  "bandit.formatters.json.docs_utils",
  "bandit.formatters.json.report",
  "bandit.formatters.json.test_properties",
  "bandit.formatters.screen",
  "bandit.formatters.screen.COLOR",
  "bandit.formatters.screen.LOG",
  "bandit.formatters.screen._output_issue_str",
  "bandit.formatters.screen.constants",
  "bandit.formatters.screen.do_print",
  "bandit.formatters.screen.docs_utils",
  "bandit.formatters.screen.get_metrics",
  "bandit.formatters.screen.get_results",
  "bandit.formatters.screen.get_verbose_details",
  "bandit.formatters.screen.header",
  "bandit.formatters.screen.report",
  "bandit.formatters.screen.test_properties",
  "bandit.formatters.text",
  "bandit.formatters.text.LOG",
  "bandit.formatters.text._output_issue_str",
  "bandit.formatters.text.constants",
  "bandit.formatters.text.docs_utils",
  "bandit.formatters.text.get_metrics",
  "bandit.formatters.text.get_results",
  "bandit.formatters.text.get_verbose_details",
  "bandit.formatters.text.report",
  "bandit.formatters.text.test_properties",
  "bandit.formatters.text.utils",
  "bandit.formatters.utils",
  "bandit.formatters.utils.convert_file_contents",
  "bandit.formatters.utils.wrap_file_object",
  "bandit.formatters.xml",
  "bandit.formatters.xml.LOG",
  "bandit.formatters.xml.docs_utils",
  "bandit.formatters.xml.report",
  "bandit.formatters.yaml",
  "bandit.formatters.yaml.LOG",
  "bandit.formatters.yaml.docs_utils",
  "bandit.formatters.yaml.report",
  "bandit.issue_from_dict",
  "bandit.log_format_string",
  "bandit.manager",
  "bandit.meta_ast",
  "bandit.node_visitor",
  "bandit.plugin_name_pattern",
  "bandit.plugins",
  "bandit.plugins.app_debug",
  "bandit.plugins.app_debug.flask_debug_true",
  "bandit.plugins.app_debug.test_properties",
  "bandit.plugins.asserts",
  "bandit.plugins.asserts.assert_used",
  "bandit.plugins.asserts.test_properties",
  "bandit.plugins.crypto_request_no_cert_validation",
  "bandit.plugins.crypto_request_no_cert_validation.request_with_no_cert_validation",
  "bandit.plugins.crypto_request_no_cert_validation.test_properties",
  "bandit.plugins.django_sql_injection",
  "bandit.plugins.django_sql_injection.django_extra_used",
  "bandit.plugins.django_sql_injection.django_rawsql_used",
  "bandit.plugins.django_sql_injection.keywords2dict",
  "bandit.plugins.django_sql_injection.test_properties",
  "bandit.plugins.django_xss",
  "bandit.plugins.django_xss.DeepAssignation",
  "bandit.plugins.django_xss.check_risk",
  "bandit.plugins.django_xss.django_mark_safe",
  "bandit.plugins.django_xss.evaluate_call",
  "bandit.plugins.django_xss.evaluate_var",
  "bandit.plugins.django_xss.test_properties",
  "bandit.plugins.django_xss.transform2call",
  "bandit.plugins.exec",
  "bandit.plugins.exec.exec_issue",
  "bandit.plugins.exec.exec_used",
  "bandit.plugins.exec.test_properties",
  "bandit.plugins.general_bad_file_permissions",
  "bandit.plugins.general_bad_file_permissions.set_bad_file_permissions",
  "bandit.plugins.general_bad_file_permissions.test_properties",
  "bandit.plugins.general_bind_all_interfaces",
  "bandit.plugins.general_bind_all_interfaces.hardcoded_bind_all_interfaces",
  "bandit.plugins.general_bind_all_interfaces.test_properties",
  "bandit.plugins.general_hardcoded_password",
  "bandit.plugins.general_hardcoded_password.RE_CANDIDATES",
  "bandit.plugins.general_hardcoded_password.RE_WORDS",
  "bandit.plugins.general_hardcoded_password._report",
  "bandit.plugins.general_hardcoded_password.hardcoded_password_default",
  "bandit.plugins.general_hardcoded_password.hardcoded_password_funcarg",
  "bandit.plugins.general_hardcoded_password.hardcoded_password_string",
  "bandit.plugins.general_hardcoded_password.test_properties",
  "bandit.plugins.general_hardcoded_tmp",
  "bandit.plugins.general_hardcoded_tmp.gen_config",
  "bandit.plugins.general_hardcoded_tmp.hardcoded_tmp_directory",
  "bandit.plugins.general_hardcoded_tmp.test_properties",
  "bandit.plugins.hashlib_new_insecure_functions",
  "bandit.plugins.hashlib_new_insecure_functions.hashlib_new",
  "bandit.plugins.hashlib_new_insecure_functions.test_properties",
  "bandit.plugins.injection_paramiko",
  "bandit.plugins.injection_paramiko.paramiko_calls",
  "bandit.plugins.injection_paramiko.test_properties",
  "bandit.plugins.injection_shell",
  "bandit.plugins.injection_shell._evaluate_shell_call",
  "bandit.plugins.injection_shell.any_other_function_with_shell_equals_true",
  "bandit.plugins.injection_shell.full_path_match",
  "bandit.plugins.injection_shell.gen_config",
  "bandit.plugins.injection_shell.has_shell",
  "bandit.plugins.injection_shell.start_process_with_a_shell",
  "bandit.plugins.injection_shell.start_process_with_no_shell",
  "bandit.plugins.injection_shell.start_process_with_partial_path",
  "bandit.plugins.injection_shell.subprocess_popen_with_shell_equals_true",
  "bandit.plugins.injection_shell.subprocess_without_shell_equals_true",
  "bandit.plugins.injection_shell.test_properties",
  "bandit.plugins.injection_sql",
  "bandit.plugins.injection_sql.SIMPLE_SQL_RE",
  "bandit.plugins.injection_sql._check_string",
  "bandit.plugins.injection_sql._evaluate_ast",
  "bandit.plugins.injection_sql.hardcoded_sql_expressions",
  "bandit.plugins.injection_sql.test_properties",
  "bandit.plugins.injection_sql.utils",
  "bandit.plugins.injection_wildcard",
  "bandit.plugins.injection_wildcard.gen_config",
  "bandit.plugins.injection_wildcard.injection_shell",
  "bandit.plugins.injection_wildcard.linux_commands_wildcard_injection",
  "bandit.plugins.injection_wildcard.test_properties",
  "bandit.plugins.insecure_ssl_tls",
  "bandit.plugins.insecure_ssl_tls.gen_config",
  "bandit.plugins.insecure_ssl_tls.get_bad_proto_versions",
  "bandit.plugins.insecure_ssl_tls.ssl_with_bad_defaults",
  "bandit.plugins.insecure_ssl_tls.ssl_with_bad_version",
  "bandit.plugins.insecure_ssl_tls.ssl_with_no_version",
  "bandit.plugins.insecure_ssl_tls.test_properties",
  "bandit.plugins.jinja2_templates",
  "bandit.plugins.jinja2_templates.jinja2_autoescape_false",
  "bandit.plugins.jinja2_templates.test_properties",
  "bandit.plugins.mako_templates",
  "bandit.plugins.mako_templates.test_properties",
  "bandit.plugins.mako_templates.use_of_mako_templates",
  "bandit.plugins.ssh_no_host_key_verification",
  "bandit.plugins.ssh_no_host_key_verification.ssh_no_host_key_verification",
  "bandit.plugins.ssh_no_host_key_verification.test_properties",
  "bandit.plugins.try_except_continue",
  "bandit.plugins.try_except_continue.gen_config",
  "bandit.plugins.try_except_continue.test_properties",
  "bandit.plugins.try_except_continue.try_except_continue",
  "bandit.plugins.try_except_pass",
  "bandit.plugins.try_except_pass.gen_config",
  "bandit.plugins.try_except_pass.test_properties",
  "bandit.plugins.try_except_pass.try_except_pass",
  "bandit.plugins.weak_cryptographic_key",
  "bandit.plugins.weak_cryptographic_key._classify_key_size",
  "bandit.plugins.weak_cryptographic_key._weak_crypto_key_size_cryptography_io",
  "bandit.plugins.weak_cryptographic_key._weak_crypto_key_size_pycrypto",
  "bandit.plugins.weak_cryptographic_key.gen_config",
  "bandit.plugins.weak_cryptographic_key.test_properties",
  "bandit.plugins.weak_cryptographic_key.weak_cryptographic_key",
  "bandit.plugins.yaml_load",
  "bandit.plugins.yaml_load.test_properties",
  "bandit.plugins.yaml_load.yaml_load",
  "bandit.progress_increment",
  "bandit.rank",
  "bandit.takes_config",
  "bandit.test_id",
  "bandit.test_set",
  "bandit.tester",
  "bandit.utils"
 ]
}