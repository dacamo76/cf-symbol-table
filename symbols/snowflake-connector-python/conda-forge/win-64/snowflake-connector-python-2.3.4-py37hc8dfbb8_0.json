{
 "errors": {
  "snowflake.connector.util_text": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/typing.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 134, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 116, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 546, in infer",
    "    return self.get_executed_param_name().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 83, in py__getattribute__",
    "    values = self.py__getattribute__alternatives(n)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 238, in py__getattribute__alternatives",
    "    return self.execute_function_slots(names, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 130, in execute_function_slots",
    "    for name in names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 130, in <genexpr>",
    "    for name in names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 486, in execute_with_values",
    "    return ValueSet.from_sets(c.execute_with_values(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 486, in <genexpr>",
    "    return ValueSet.from_sets(c.execute_with_values(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 42, in execute_with_values",
    "    return self.inference_state.execute(self, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 125, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 465, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 217, in get_return_values",
    "    value_set = self.infer_annotations()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 368, in infer_annotations",
    "    return infer_return_types(self._value, self._arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/annotation.py\", line 225, in infer_return_types",
    "    unknown_type_vars = find_unknown_type_vars(context, annotation)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/annotation.py\", line 422, in find_unknown_type_vars",
    "    check_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/annotation.py\", line 419, in check_node",
    "    found[:] = _filter_type_vars(context.infer_node(node), found)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 53, in infer_import",
    "    _prepare_infer_import(module_context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 116, in _prepare_infer_import",
    "    return from_import_name, tuple(import_path), import_node.level, importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "snowflake.connector.BINARY",
  "snowflake.connector.Binary",
  "snowflake.connector.Connect",
  "snowflake.connector.DATETIME",
  "snowflake.connector.DataError",
  "snowflake.connector.DatabaseError",
  "snowflake.connector.Date",
  "snowflake.connector.DictCursor",
  "snowflake.connector.Error",
  "snowflake.connector.IntegrityError",
  "snowflake.connector.InterfaceError",
  "snowflake.connector.InternalError",
  "snowflake.connector.Json",
  "snowflake.connector.NUMBER",
  "snowflake.connector.NotSupportedError",
  "snowflake.connector.OperationalError",
  "snowflake.connector.ProgrammingError",
  "snowflake.connector.ROWID",
  "snowflake.connector.SNOWFLAKE_CONNECTOR_VERSION",
  "snowflake.connector.STRING",
  "snowflake.connector.SnowflakeConnection",
  "snowflake.connector.Time",
  "snowflake.connector.VERSION",
  "snowflake.connector.Warning",
  "snowflake.connector.__all__",
  "snowflake.connector.__version__",
  "snowflake.connector.apilevel",
  "snowflake.connector.arrow_context",
  "snowflake.connector.arrow_context.ArrowConverterContext",
  "snowflake.connector.arrow_context.ZERO_EPOCH",
  "snowflake.connector.arrow_context.logger",
  "snowflake.connector.arrow_context.numpy",
  "snowflake.connector.arrow_context.tzlocal",
  "snowflake.connector.auth",
  "snowflake.connector.auth.Auth",
  "snowflake.connector.auth.CACHE_DIR",
  "snowflake.connector.auth.CACHE_ROOT_DIR",
  "snowflake.connector.auth.KEYRING_DRIVER_NAME",
  "snowflake.connector.auth.KEYRING_SERVICE_NAME",
  "snowflake.connector.auth.KEYRING_USER",
  "snowflake.connector.auth.TEMPORARY_CREDENTIAL",
  "snowflake.connector.auth.TEMPORARY_CREDENTIAL_FILE",
  "snowflake.connector.auth.TEMPORARY_CREDENTIAL_FILE_LOCK",
  "snowflake.connector.auth.TEMPORARY_CREDENTIAL_LOCK",
  "snowflake.connector.auth.convert_target",
  "snowflake.connector.auth.delete_temporary_credential",
  "snowflake.connector.auth.ex",
  "snowflake.connector.auth.lock_temporary_credential_file",
  "snowflake.connector.auth.logger",
  "snowflake.connector.auth.read_temporary_credential_file",
  "snowflake.connector.auth.unlock_temporary_credential_file",
  "snowflake.connector.auth.write_temporary_credential",
  "snowflake.connector.auth_by_plugin",
  "snowflake.connector.auth_by_plugin.AuthByPlugin",
  "snowflake.connector.auth_by_plugin.AuthByPlugin.assertion_content",
  "snowflake.connector.auth_default",
  "snowflake.connector.auth_default.AuthByDefault",
  "snowflake.connector.auth_default.assertion_content",
  "snowflake.connector.auth_idtoken",
  "snowflake.connector.auth_idtoken.AuthByIdToken",
  "snowflake.connector.auth_idtoken.assertion_content",
  "snowflake.connector.auth_keypair",
  "snowflake.connector.auth_keypair.AuthByKeyPair",
  "snowflake.connector.auth_keypair.assertion_content",
  "snowflake.connector.auth_keypair.logger",
  "snowflake.connector.auth_oauth",
  "snowflake.connector.auth_oauth.AuthByOAuth",
  "snowflake.connector.auth_oauth.assertion_content",
  "snowflake.connector.auth_okta",
  "snowflake.connector.auth_okta.AuthByOkta",
  "snowflake.connector.auth_okta._get_post_back_url_from_html",
  "snowflake.connector.auth_okta._is_prefix_equal",
  "snowflake.connector.auth_okta.assertion_content",
  "snowflake.connector.auth_okta.logger",
  "snowflake.connector.auth_webbrowser",
  "snowflake.connector.auth_webbrowser.AuthByWebBrowser",
  "snowflake.connector.auth_webbrowser.BUF_SIZE",
  "snowflake.connector.auth_webbrowser.assertion_content",
  "snowflake.connector.auth_webbrowser.logger",
  "snowflake.connector.azure_util",
  "snowflake.connector.azure_util.AzureLocation",
  "snowflake.connector.azure_util.RawBodyReadingClient",
  "snowflake.connector.azure_util.SnowflakeAzureUtil",
  "snowflake.connector.azure_util.logger",
  "snowflake.connector.azure_util.use_new_azure_api",
  "snowflake.connector.chunk_downloader",
  "snowflake.connector.chunk_downloader.ArrowBinaryHandler",
  "snowflake.connector.chunk_downloader.DEFAULT_CLIENT_PREFETCH_THREADS",
  "snowflake.connector.chunk_downloader.DEFAULT_REQUEST_TIMEOUT",
  "snowflake.connector.chunk_downloader.JsonBinaryHandler",
  "snowflake.connector.chunk_downloader.MAX_CLIENT_PREFETCH_THREADS",
  "snowflake.connector.chunk_downloader.MAX_RETRY_DOWNLOAD",
  "snowflake.connector.chunk_downloader.MAX_WAIT",
  "snowflake.connector.chunk_downloader.RawBinaryDataHandler",
  "snowflake.connector.chunk_downloader.ResultIterWithTimings",
  "snowflake.connector.chunk_downloader.SSE_C_AES",
  "snowflake.connector.chunk_downloader.SSE_C_ALGORITHM",
  "snowflake.connector.chunk_downloader.SSE_C_KEY",
  "snowflake.connector.chunk_downloader.SnowflakeChunk",
  "snowflake.connector.chunk_downloader.SnowflakeChunkDownloader",
  "snowflake.connector.chunk_downloader.WAIT_TIME_IN_SECONDS",
  "snowflake.connector.chunk_downloader.decompress_raw_data",
  "snowflake.connector.chunk_downloader.logger",
  "snowflake.connector.compat",
  "snowflake.connector.compat.BAD_GATEWAY",
  "snowflake.connector.compat.BAD_REQUEST",
  "snowflake.connector.compat.BASE_EXCEPTION_CLASS",
  "snowflake.connector.compat.BadStatusLine",
  "snowflake.connector.compat.EmptyQueue",
  "snowflake.connector.compat.FORBIDDEN",
  "snowflake.connector.compat.GATEWAY_TIMEOUT",
  "snowflake.connector.compat.GET_CWD",
  "snowflake.connector.compat.INPUT",
  "snowflake.connector.compat.INTERNAL_SERVER_ERROR",
  "snowflake.connector.compat.IS_BINARY",
  "snowflake.connector.compat.IS_BYTES",
  "snowflake.connector.compat.IS_LINUX",
  "snowflake.connector.compat.IS_MACOS",
  "snowflake.connector.compat.IS_NUMERIC",
  "snowflake.connector.compat.IS_STR",
  "snowflake.connector.compat.IS_UNICODE",
  "snowflake.connector.compat.IS_WINDOWS",
  "snowflake.connector.compat.ITERATOR",
  "snowflake.connector.compat.IncompleteRead",
  "snowflake.connector.compat.MAPPING",
  "snowflake.connector.compat.METHOD_NOT_ALLOWED",
  "snowflake.connector.compat.NUM_DATA_TYPES",
  "snowflake.connector.compat.OK",
  "snowflake.connector.compat.PKCS5_OFFSET",
  "snowflake.connector.compat.PKCS5_PAD",
  "snowflake.connector.compat.PKCS5_UNPAD",
  "snowflake.connector.compat.PRINT",
  "snowflake.connector.compat.PY_ISSUE_23517",
  "snowflake.connector.compat.Queue",
  "snowflake.connector.compat.REQUEST_TIMEOUT",
  "snowflake.connector.compat.SERVICE_UNAVAILABLE",
  "snowflake.connector.compat.TO_UNICODE",
  "snowflake.connector.compat.UNAUTHORIZED",
  "snowflake.connector.compat.UTF8",
  "snowflake.connector.compat.numpy",
  "snowflake.connector.compat.parse_qs",
  "snowflake.connector.compat.unescape",
  "snowflake.connector.compat.unquote",
  "snowflake.connector.compat.urlencode",
  "snowflake.connector.compat.urlparse",
  "snowflake.connector.compat.urlsplit",
  "snowflake.connector.compat.urlunsplit",
  "snowflake.connector.connect",
  "snowflake.connector.connection",
  "snowflake.connector.connection.APPLICATION_RE",
  "snowflake.connector.connection.DEFAULT_CONFIGURATION",
  "snowflake.connector.connection.DefaultConverterClass",
  "snowflake.connector.connection.SUPPORTED_PARAMSTYLES",
  "snowflake.connector.connection.SnowflakeConnection",
  "snowflake.connector.connection.logger",
  "snowflake.connector.connection.m",
  "snowflake.connector.constants",
  "snowflake.connector.constants.DBAPI_TYPE_BINARY",
  "snowflake.connector.constants.DBAPI_TYPE_NUMBER",
  "snowflake.connector.constants.DBAPI_TYPE_STRING",
  "snowflake.connector.constants.DBAPI_TYPE_TIMESTAMP",
  "snowflake.connector.constants.FIELD_ID_TO_NAME",
  "snowflake.connector.constants.FIELD_NAME_TO_ID",
  "snowflake.connector.constants.FIELD_TYPES",
  "snowflake.connector.constants.FileHeader",
  "snowflake.connector.constants.HTTP_HEADER_ACCEPT",
  "snowflake.connector.constants.HTTP_HEADER_ACCEPT_ENCODING",
  "snowflake.connector.constants.HTTP_HEADER_CONTENT_ENCODING",
  "snowflake.connector.constants.HTTP_HEADER_CONTENT_TYPE",
  "snowflake.connector.constants.HTTP_HEADER_SERVICE_NAME",
  "snowflake.connector.constants.HTTP_HEADER_USER_AGENT",
  "snowflake.connector.constants.HTTP_HEADER_VALUE_OCTET_STREAM",
  "snowflake.connector.constants.LOG_FORMAT",
  "snowflake.connector.constants.OCSPMode",
  "snowflake.connector.constants.PARAMETER_AUTOCOMMIT",
  "snowflake.connector.constants.PARAMETER_CLIENT_PREFETCH_THREADS",
  "snowflake.connector.constants.PARAMETER_CLIENT_SESSION_KEEP_ALIVE",
  "snowflake.connector.constants.PARAMETER_CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY",
  "snowflake.connector.constants.PARAMETER_CLIENT_STORE_TEMPORARY_CREDENTIAL",
  "snowflake.connector.constants.PARAMETER_CLIENT_TELEMETRY_ENABLED",
  "snowflake.connector.constants.PARAMETER_CLIENT_TELEMETRY_OOB_ENABLED",
  "snowflake.connector.constants.PARAMETER_CLIENT_USE_SECURE_STORAGE_FOR_TEMPORARY_CREDENTIAL",
  "snowflake.connector.constants.PARAMETER_CLIENT_VALIDATE_DEFAULT_PARAMETERS",
  "snowflake.connector.constants.PARAMETER_PYTHON_CONNECTOR_QUERY_RESULT_FORMAT",
  "snowflake.connector.constants.PARAMETER_SERVICE_NAME",
  "snowflake.connector.constants.PARAMETER_TIMEZONE",
  "snowflake.connector.constants.ResultStatus",
  "snowflake.connector.constants.SHA256_DIGEST",
  "snowflake.connector.constants.UTF8",
  "snowflake.connector.constants.__binary_type_names",
  "snowflake.connector.constants.__binary_types",
  "snowflake.connector.constants.__number_type_names",
  "snowflake.connector.constants.__number_types",
  "snowflake.connector.constants.__string_type_names",
  "snowflake.connector.constants.__string_types",
  "snowflake.connector.constants.__timestamp_type_names",
  "snowflake.connector.constants.__timestamp_types",
  "snowflake.connector.constants.dbapi_type",
  "snowflake.connector.constants.dbapi_types",
  "snowflake.connector.constants.get_binary_types",
  "snowflake.connector.constants.get_number_types",
  "snowflake.connector.constants.get_string_types",
  "snowflake.connector.constants.get_timestamp_types",
  "snowflake.connector.constants.idx",
  "snowflake.connector.constants.is_binary_type_name",
  "snowflake.connector.constants.is_date_type_name",
  "snowflake.connector.constants.is_number_type_name",
  "snowflake.connector.constants.is_string_type_name",
  "snowflake.connector.constants.is_timestamp_type_name",
  "snowflake.connector.constants.type",
  "snowflake.connector.converter",
  "snowflake.connector.converter.BITS_FOR_TIMEZONE",
  "snowflake.connector.converter.PYTHON_TO_SNOWFLAKE_TYPE",
  "snowflake.connector.converter.SnowflakeConverter",
  "snowflake.connector.converter.SnowflakeConverter._ARRAY_to_python",
  "snowflake.connector.converter.SnowflakeConverter._OBJECT_to_python",
  "snowflake.connector.converter.SnowflakeConverter._TIMESTAMP_to_python",
  "snowflake.connector.converter.SnowflakeConverter._bytearray_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._bytearray_to_snowflake_bindings",
  "snowflake.connector.converter.SnowflakeConverter._decimal_to_snowflake_bindings",
  "snowflake.connector.converter.SnowflakeConverter._float16_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._float32_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._float64_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._float_to_snowflake_bindings",
  "snowflake.connector.converter.SnowflakeConverter._int16_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._int32_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._int64_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._int8_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._int_to_snowflake_bindings",
  "snowflake.connector.converter.SnowflakeConverter._long_to_snowflake_bindings",
  "snowflake.connector.converter.SnowflakeConverter._tuple_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._uint16_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._uint32_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._uint64_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._uint8_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._unicode_to_snowflake",
  "snowflake.connector.converter.SnowflakeConverter._unicode_to_snowflake_bindings",
  "snowflake.connector.converter.ZERO_EPOCH",
  "snowflake.connector.converter.ZERO_EPOCH_DATE",
  "snowflake.connector.converter.ZERO_FILL",
  "snowflake.connector.converter.ZERO_TIMEDELTA",
  "snowflake.connector.converter._adjust_fraction_of_nanoseconds",
  "snowflake.connector.converter._convert_date_to_epoch_milliseconds",
  "snowflake.connector.converter._convert_datetime_to_epoch_nanoseconds",
  "snowflake.connector.converter._convert_time_to_epoch_nanoseconds",
  "snowflake.connector.converter._extract_timestamp",
  "snowflake.connector.converter._generate_tzinfo_from_tzoffset",
  "snowflake.connector.converter.convert_datetime_to_epoch",
  "snowflake.connector.converter.logger",
  "snowflake.connector.converter.numpy",
  "snowflake.connector.converter.tzlocal",
  "snowflake.connector.converter_issue23517",
  "snowflake.connector.converter_issue23517.SnowflakeConverterIssue23517",
  "snowflake.connector.converter_issue23517._ARRAY_to_python",
  "snowflake.connector.converter_issue23517._OBJECT_to_python",
  "snowflake.connector.converter_issue23517._TIMESTAMP_to_python",
  "snowflake.connector.converter_issue23517._bytearray_to_snowflake",
  "snowflake.connector.converter_issue23517._bytearray_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517._decimal_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517._float16_to_snowflake",
  "snowflake.connector.converter_issue23517._float32_to_snowflake",
  "snowflake.connector.converter_issue23517._float64_to_snowflake",
  "snowflake.connector.converter_issue23517._float_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517._int16_to_snowflake",
  "snowflake.connector.converter_issue23517._int32_to_snowflake",
  "snowflake.connector.converter_issue23517._int64_to_snowflake",
  "snowflake.connector.converter_issue23517._int8_to_snowflake",
  "snowflake.connector.converter_issue23517._int_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517._long_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517._tuple_to_snowflake",
  "snowflake.connector.converter_issue23517._uint16_to_snowflake",
  "snowflake.connector.converter_issue23517._uint32_to_snowflake",
  "snowflake.connector.converter_issue23517._uint64_to_snowflake",
  "snowflake.connector.converter_issue23517._uint8_to_snowflake",
  "snowflake.connector.converter_issue23517._unicode_to_snowflake",
  "snowflake.connector.converter_issue23517._unicode_to_snowflake_bindings",
  "snowflake.connector.converter_issue23517.logger",
  "snowflake.connector.converter_null",
  "snowflake.connector.converter_null.SnowflakeNoConverterToPython",
  "snowflake.connector.converter_null._ARRAY_to_python",
  "snowflake.connector.converter_null._OBJECT_to_python",
  "snowflake.connector.converter_null._TIMESTAMP_to_python",
  "snowflake.connector.converter_null._bytearray_to_snowflake",
  "snowflake.connector.converter_null._bytearray_to_snowflake_bindings",
  "snowflake.connector.converter_null._decimal_to_snowflake_bindings",
  "snowflake.connector.converter_null._float16_to_snowflake",
  "snowflake.connector.converter_null._float32_to_snowflake",
  "snowflake.connector.converter_null._float64_to_snowflake",
  "snowflake.connector.converter_null._float_to_snowflake_bindings",
  "snowflake.connector.converter_null._int16_to_snowflake",
  "snowflake.connector.converter_null._int32_to_snowflake",
  "snowflake.connector.converter_null._int64_to_snowflake",
  "snowflake.connector.converter_null._int8_to_snowflake",
  "snowflake.connector.converter_null._int_to_snowflake_bindings",
  "snowflake.connector.converter_null._long_to_snowflake_bindings",
  "snowflake.connector.converter_null._tuple_to_snowflake",
  "snowflake.connector.converter_null._uint16_to_snowflake",
  "snowflake.connector.converter_null._uint32_to_snowflake",
  "snowflake.connector.converter_null._uint64_to_snowflake",
  "snowflake.connector.converter_null._uint8_to_snowflake",
  "snowflake.connector.converter_null._unicode_to_snowflake",
  "snowflake.connector.converter_null._unicode_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql",
  "snowflake.connector.converter_snowsql.SnowflakeConverterSnowSQL",
  "snowflake.connector.converter_snowsql._ARRAY_to_python",
  "snowflake.connector.converter_snowsql._OBJECT_to_python",
  "snowflake.connector.converter_snowsql._TIMESTAMP_to_python",
  "snowflake.connector.converter_snowsql._bytearray_to_snowflake",
  "snowflake.connector.converter_snowsql._bytearray_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql._decimal_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql._float16_to_snowflake",
  "snowflake.connector.converter_snowsql._float32_to_snowflake",
  "snowflake.connector.converter_snowsql._float64_to_snowflake",
  "snowflake.connector.converter_snowsql._float_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql._int16_to_snowflake",
  "snowflake.connector.converter_snowsql._int32_to_snowflake",
  "snowflake.connector.converter_snowsql._int64_to_snowflake",
  "snowflake.connector.converter_snowsql._int8_to_snowflake",
  "snowflake.connector.converter_snowsql._int_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql._long_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql._tuple_to_snowflake",
  "snowflake.connector.converter_snowsql._uint16_to_snowflake",
  "snowflake.connector.converter_snowsql._uint32_to_snowflake",
  "snowflake.connector.converter_snowsql._uint64_to_snowflake",
  "snowflake.connector.converter_snowsql._uint8_to_snowflake",
  "snowflake.connector.converter_snowsql._unicode_to_snowflake",
  "snowflake.connector.converter_snowsql._unicode_to_snowflake_bindings",
  "snowflake.connector.converter_snowsql.format_sftimestamp",
  "snowflake.connector.converter_snowsql.logger",
  "snowflake.connector.cursor",
  "snowflake.connector.cursor.CAN_USE_ARROW_RESULT",
  "snowflake.connector.cursor.DESC_TABLE_RE",
  "snowflake.connector.cursor.DictCursor",
  "snowflake.connector.cursor.LOG_MAX_QUERY_LENGTH",
  "snowflake.connector.cursor.MYPY",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_DELETE",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_DML",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_DML_SET",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_INSERT",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_MERGE",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_MULTI_TABLE_INSERT",
  "snowflake.connector.cursor.STATEMENT_TYPE_ID_UPDATE",
  "snowflake.connector.cursor.SnowflakeCursor",
  "snowflake.connector.cursor.e",
  "snowflake.connector.cursor.exit_handler",
  "snowflake.connector.cursor.logger",
  "snowflake.connector.cursor.pyarrow",
  "snowflake.connector.dbapi",
  "snowflake.connector.dbapi.BINARY",
  "snowflake.connector.dbapi.Binary",
  "snowflake.connector.dbapi.DATETIME",
  "snowflake.connector.dbapi.Date",
  "snowflake.connector.dbapi.DateFromTicks",
  "snowflake.connector.dbapi.Json",
  "snowflake.connector.dbapi.NUMBER",
  "snowflake.connector.dbapi.ROWID",
  "snowflake.connector.dbapi.STRING",
  "snowflake.connector.dbapi.Time",
  "snowflake.connector.dbapi.TimeFromTicks",
  "snowflake.connector.dbapi.Timestamp",
  "snowflake.connector.dbapi.TimestampFromTicks",
  "snowflake.connector.dbapi._DBAPITypeObject",
  "snowflake.connector.description",
  "snowflake.connector.description.CLIENT_NAME",
  "snowflake.connector.description.CLIENT_VERSION",
  "snowflake.connector.description.COMPILER",
  "snowflake.connector.description.IMPLEMENTATION",
  "snowflake.connector.description.OPERATING_SYSTEM",
  "snowflake.connector.description.PLATFORM",
  "snowflake.connector.description.PYTHON_VERSION",
  "snowflake.connector.description.SNOWFLAKE_CONNECTOR_VERSION",
  "snowflake.connector.encryption_util",
  "snowflake.connector.encryption_util.EncryptionMetadata",
  "snowflake.connector.encryption_util.MaterialDescriptor",
  "snowflake.connector.encryption_util.SnowflakeEncryptionUtil",
  "snowflake.connector.encryption_util.block_size",
  "snowflake.connector.encryption_util.matdesc_to_unicode",
  "snowflake.connector.errorcode",
  "snowflake.connector.errorcode.ER_CHUNK_DOWNLOAD_FAILED",
  "snowflake.connector.errorcode.ER_COMPRESSION_NOT_SUPPORTED",
  "snowflake.connector.errorcode.ER_CONNECTION_IS_CLOSED",
  "snowflake.connector.errorcode.ER_CURSOR_IS_CLOSED",
  "snowflake.connector.errorcode.ER_FAILED_PROCESSING_PYFORMAT",
  "snowflake.connector.errorcode.ER_FAILED_TO_CHECK_EXISTING_FILES",
  "snowflake.connector.errorcode.ER_FAILED_TO_CONNECT_TO_DB",
  "snowflake.connector.errorcode.ER_FAILED_TO_CONVERT_ROW_TO_PYTHON_TYPE",
  "snowflake.connector.errorcode.ER_FAILED_TO_DOWNLOAD_FROM_STAGE",
  "snowflake.connector.errorcode.ER_FAILED_TO_GET_BOOTSTRAP",
  "snowflake.connector.errorcode.ER_FAILED_TO_READ_ARROW_STREAM",
  "snowflake.connector.errorcode.ER_FAILED_TO_RENEW_SESSION",
  "snowflake.connector.errorcode.ER_FAILED_TO_REQUEST",
  "snowflake.connector.errorcode.ER_FAILED_TO_REWRITE_MULTI_ROW_INSERT",
  "snowflake.connector.errorcode.ER_FAILED_TO_SERVER",
  "snowflake.connector.errorcode.ER_FAILED_TO_UPLOAD_TO_STAGE",
  "snowflake.connector.errorcode.ER_FILE_NOT_EXISTS",
  "snowflake.connector.errorcode.ER_IDP_CONNECTION_ERROR",
  "snowflake.connector.errorcode.ER_INCORRECT_DESTINATION",
  "snowflake.connector.errorcode.ER_INTERNAL_NOT_MATCH_ENCRYPT_MATERIAL",
  "snowflake.connector.errorcode.ER_INVALID_CERTIFICATE",
  "snowflake.connector.errorcode.ER_INVALID_OCSP_RESPONSE_SSD",
  "snowflake.connector.errorcode.ER_INVALID_PRIVATE_KEY",
  "snowflake.connector.errorcode.ER_INVALID_SSD",
  "snowflake.connector.errorcode.ER_INVALID_STAGE_FS",
  "snowflake.connector.errorcode.ER_INVALID_STAGE_LOCATION",
  "snowflake.connector.errorcode.ER_INVALID_VALUE",
  "snowflake.connector.errorcode.ER_LOCAL_PATH_NOT_DIRECTORY",
  "snowflake.connector.errorcode.ER_NOT_HTTPS_USED",
  "snowflake.connector.errorcode.ER_NOT_IMPLICITY_SNOWFLAKE_DATATYPE",
  "snowflake.connector.errorcode.ER_NOT_POSITIVE_SIZE",
  "snowflake.connector.errorcode.ER_NOT_SUPPORT_DATA_TYPE",
  "snowflake.connector.errorcode.ER_NO_ACCOUNT_NAME",
  "snowflake.connector.errorcode.ER_NO_ADDITIONAL_CHUNK",
  "snowflake.connector.errorcode.ER_NO_ARROW_RESULT",
  "snowflake.connector.errorcode.ER_NO_DATA_FOUND",
  "snowflake.connector.errorcode.ER_NO_HOSTNAME_FOUND",
  "snowflake.connector.errorcode.ER_NO_NUMPY",
  "snowflake.connector.errorcode.ER_NO_PASSWORD",
  "snowflake.connector.errorcode.ER_NO_PYARROW",
  "snowflake.connector.errorcode.ER_NO_PYARROW_SNOWSQL",
  "snowflake.connector.errorcode.ER_NO_USER",
  "snowflake.connector.errorcode.ER_NO_WINDOWS_SUPPORT",
  "snowflake.connector.errorcode.ER_OCSP_FAILED_TO_CONNECT_CACHE_SERVER",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_ATTACHED_CERT_EXPIRED",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_ATTACHED_CERT_INVALID",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_CACHE_DECODE_FAILED",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_CACHE_DOWNLOAD_FAILED",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_CERT_STATUS_INVALID",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_CERT_STATUS_REVOKED",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_CERT_STATUS_UNKNOWN",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_EXPIRED",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_FETCH_EXCEPTION",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_FETCH_FAILURE",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_INVALID_EXPIRY_INFO_MISSING",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_INVALID_SIGNATURE",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_LOAD_FAILURE",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_STATUS_UNSUCCESSFUL",
  "snowflake.connector.errorcode.ER_OCSP_RESPONSE_UNAVAILABLE",
  "snowflake.connector.errorcode.ER_OCSP_URL_INFO_MISSING",
  "snowflake.connector.errorcode.ER_OLD_PYTHON",
  "snowflake.connector.errorcode.ER_UNABLE_TO_OPEN_BROWSER",
  "snowflake.connector.errorcode.ER_UNABLE_TO_START_WEBSERVER",
  "snowflake.connector.errorcode.ER_UNSUPPORTED_METHOD",
  "snowflake.connector.errors",
  "snowflake.connector.errors.BadGatewayError",
  "snowflake.connector.errors.BadRequest",
  "snowflake.connector.errors.DataError",
  "snowflake.connector.errors.DatabaseError",
  "snowflake.connector.errors.Error",
  "snowflake.connector.errors.ForbiddenError",
  "snowflake.connector.errors.GatewayTimeoutError",
  "snowflake.connector.errors.IntegrityError",
  "snowflake.connector.errors.InterfaceError",
  "snowflake.connector.errors.InternalError",
  "snowflake.connector.errors.InternalServerError",
  "snowflake.connector.errors.MYPY",
  "snowflake.connector.errors.MethodNotAllowed",
  "snowflake.connector.errors.MissingDependencyError",
  "snowflake.connector.errors.NotSupportedError",
  "snowflake.connector.errors.OperationalError",
  "snowflake.connector.errors.OtherHTTPRetryableError",
  "snowflake.connector.errors.ProgrammingError",
  "snowflake.connector.errors.RequestTimeoutError",
  "snowflake.connector.errors.RevocationCheckError",
  "snowflake.connector.errors.ServiceUnavailableError",
  "snowflake.connector.errors.UTF8",
  "snowflake.connector.errors.Warning",
  "snowflake.connector.errors.logger",
  "snowflake.connector.feature",
  "snowflake.connector.feature.feature_use_pyopenssl",
  "snowflake.connector.file_compression_type",
  "snowflake.connector.file_compression_type.FileCompressionType",
  "snowflake.connector.file_transfer_agent",
  "snowflake.connector.file_transfer_agent.AZURE_FS",
  "snowflake.connector.file_transfer_agent.CMD_TYPE_DOWNLOAD",
  "snowflake.connector.file_transfer_agent.CMD_TYPE_UPLOAD",
  "snowflake.connector.file_transfer_agent.FILE_PROTOCOL",
  "snowflake.connector.file_transfer_agent.GCS_FS",
  "snowflake.connector.file_transfer_agent.INJECT_WAIT_IN_PUT",
  "snowflake.connector.file_transfer_agent.LOCAL_FS",
  "snowflake.connector.file_transfer_agent.MB",
  "snowflake.connector.file_transfer_agent.RESULT_FIXED_COLUMN_DESC",
  "snowflake.connector.file_transfer_agent.RESULT_TEXT_COLUMN_DESC",
  "snowflake.connector.file_transfer_agent.S3_FS",
  "snowflake.connector.file_transfer_agent.SnowflakeAzureProgressPercentage",
  "snowflake.connector.file_transfer_agent.SnowflakeFileTransferAgent",
  "snowflake.connector.file_transfer_agent.SnowflakeProgressPercentage",
  "snowflake.connector.file_transfer_agent.SnowflakeS3ProgressPercentage",
  "snowflake.connector.file_transfer_agent._update_progress",
  "snowflake.connector.file_transfer_agent.logger",
  "snowflake.connector.file_util",
  "snowflake.connector.file_util.SnowflakeFileUtil",
  "snowflake.connector.gcs_util",
  "snowflake.connector.gcs_util.CONTENT_CHUNK_SIZE",
  "snowflake.connector.gcs_util.GCS_FILE_HEADER_CONTENT_LENGTH",
  "snowflake.connector.gcs_util.GCS_FILE_HEADER_DIGEST",
  "snowflake.connector.gcs_util.GCS_FILE_HEADER_ENCRYPTION_METADATA",
  "snowflake.connector.gcs_util.GCS_METADATA_ENCRYPTIONDATAPROP",
  "snowflake.connector.gcs_util.GCS_METADATA_MATDESC_KEY",
  "snowflake.connector.gcs_util.GCS_METADATA_PREFIX",
  "snowflake.connector.gcs_util.GCS_METADATA_SFC_DIGEST",
  "snowflake.connector.gcs_util.SnowflakeGCSUtil",
  "snowflake.connector.gzip_decoder",
  "snowflake.connector.gzip_decoder.CHUNK_SIZE",
  "snowflake.connector.gzip_decoder.IterStreamer",
  "snowflake.connector.gzip_decoder.MAGIC_NUMBER",
  "snowflake.connector.gzip_decoder.decompress_raw_data",
  "snowflake.connector.gzip_decoder.logger",
  "snowflake.connector.incident",
  "snowflake.connector.incident.CLS_BLACKLIST",
  "snowflake.connector.incident.Incident",
  "snowflake.connector.incident.URL",
  "snowflake.connector.incident.current_os_release",
  "snowflake.connector.incident.current_os_version",
  "snowflake.connector.incident.logger",
  "snowflake.connector.json_result",
  "snowflake.connector.json_result.DictJsonResult",
  "snowflake.connector.json_result.JsonResult",
  "snowflake.connector.json_result.logger",
  "snowflake.connector.local_util",
  "snowflake.connector.local_util.SnowflakeLocalUtil",
  "snowflake.connector.mixin",
  "snowflake.connector.mixin.UnicodeMixin",
  "snowflake.connector.network",
  "snowflake.connector.network.ACCEPT_TYPE_APPLICATION_SNOWFLAKE",
  "snowflake.connector.network.APPLICATION_SNOWSQL",
  "snowflake.connector.network.BAD_REQUEST_GS_CODE",
  "snowflake.connector.network.CLIENT_NAME",
  "snowflake.connector.network.CLIENT_VERSION",
  "snowflake.connector.network.COMPILER",
  "snowflake.connector.network.CONTENT_TYPE_APPLICATION_JSON",
  "snowflake.connector.network.DEFAULT_AUTHENTICATOR",
  "snowflake.connector.network.DEFAULT_SOCKET_CONNECT_TIMEOUT",
  "snowflake.connector.network.EXTERNAL_BROWSER_AUTHENTICATOR",
  "snowflake.connector.network.HEADER_AUTHORIZATION_KEY",
  "snowflake.connector.network.HEADER_SNOWFLAKE_TOKEN",
  "snowflake.connector.network.ID_TOKEN_AUTHENTICATOR",
  "snowflake.connector.network.ID_TOKEN_EXPIRED_GS_CODE",
  "snowflake.connector.network.ID_TOKEN_INVALID_LOGIN_REQUEST_GS_CODE",
  "snowflake.connector.network.IMPLEMENTATION",
  "snowflake.connector.network.KEY_PAIR_AUTHENTICATOR",
  "snowflake.connector.network.MASTER_TOKEN_EXPIRED_GS_CODE",
  "snowflake.connector.network.MASTER_TOKEN_INVALD_GS_CODE",
  "snowflake.connector.network.MASTER_TOKEN_NOTFOUND_GS_CODE",
  "snowflake.connector.network.NO_TOKEN",
  "snowflake.connector.network.OAUTH_AUTHENTICATOR",
  "snowflake.connector.network.OPERATING_SYSTEM",
  "snowflake.connector.network.PLATFORM",
  "snowflake.connector.network.PYTHON_CONNECTOR_USER_AGENT",
  "snowflake.connector.network.PYTHON_VERSION",
  "snowflake.connector.network.QUERY_IN_PROGRESS_ASYNC_CODE",
  "snowflake.connector.network.QUERY_IN_PROGRESS_CODE",
  "snowflake.connector.network.REQUESTS_RETRY",
  "snowflake.connector.network.REQUEST_GUID",
  "snowflake.connector.network.REQUEST_ID",
  "snowflake.connector.network.REQUEST_TYPE_RENEW",
  "snowflake.connector.network.ReauthenticationRequest",
  "snowflake.connector.network.RetryRequest",
  "snowflake.connector.network.SESSION_EXPIRED_GS_CODE",
  "snowflake.connector.network.SNOWFLAKE_CONNECTOR_VERSION",
  "snowflake.connector.network.SNOWFLAKE_HOST_SUFFIX",
  "snowflake.connector.network.STATUS_TO_EXCEPTION",
  "snowflake.connector.network.SnowflakeAuth",
  "snowflake.connector.network.SnowflakeRestful",
  "snowflake.connector.network.get_time_millis",
  "snowflake.connector.network.is_retryable_http_code",
  "snowflake.connector.network.logger",
  "snowflake.connector.ocsp_asn1crypto",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_ATTACHED_CERT_EXPIRED",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_ATTACHED_CERT_INVALID",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_CERT_STATUS_INVALID",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_INVALID_SIGNATURE",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_LOAD_FAILURE",
  "snowflake.connector.ocsp_asn1crypto.ER_OCSP_RESPONSE_STATUS_UNSUCCESSFUL",
  "snowflake.connector.ocsp_asn1crypto.RevocationCheckError",
  "snowflake.connector.ocsp_asn1crypto.SnowflakeOCSP",
  "snowflake.connector.ocsp_asn1crypto.SnowflakeOCSPAsn1Crypto",
  "snowflake.connector.ocsp_asn1crypto.logger",
  "snowflake.connector.ocsp_asn1crypto.ret_wildcard_hkey",
  "snowflake.connector.ocsp_snowflake",
  "snowflake.connector.ocsp_snowflake.DecorrelateJitterBackoff",
  "snowflake.connector.ocsp_snowflake.ER_INVALID_OCSP_RESPONSE_SSD",
  "snowflake.connector.ocsp_snowflake.ER_INVALID_SSD",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_FAILED_TO_CONNECT_CACHE_SERVER",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_ATTACHED_CERT_EXPIRED",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_ATTACHED_CERT_INVALID",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_CACHE_DECODE_FAILED",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_CACHE_DOWNLOAD_FAILED",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_CERT_STATUS_INVALID",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_CERT_STATUS_REVOKED",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_CERT_STATUS_UNKNOWN",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_EXPIRED",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_FETCH_EXCEPTION",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_FETCH_FAILURE",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_INVALID_EXPIRY_INFO_MISSING",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_INVALID_SIGNATURE",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_LOAD_FAILURE",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_STATUS_UNSUCCESSFUL",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_RESPONSE_UNAVAILABLE",
  "snowflake.connector.ocsp_snowflake.ER_OCSP_URL_INFO_MISSING",
  "snowflake.connector.ocsp_snowflake.HTTP_HEADER_USER_AGENT",
  "snowflake.connector.ocsp_snowflake.OCSPCache",
  "snowflake.connector.ocsp_snowflake.OCSPServer",
  "snowflake.connector.ocsp_snowflake.OCSPTelemetryData",
  "snowflake.connector.ocsp_snowflake.OK",
  "snowflake.connector.ocsp_snowflake.PYTHON_CONNECTOR_USER_AGENT",
  "snowflake.connector.ocsp_snowflake.RevocationCheckError",
  "snowflake.connector.ocsp_snowflake.SFSsd",
  "snowflake.connector.ocsp_snowflake.SSDPubKey",
  "snowflake.connector.ocsp_snowflake.SnowflakeOCSP",
  "snowflake.connector.ocsp_snowflake.TelemetryService",
  "snowflake.connector.ocsp_snowflake.logger",
  "snowflake.connector.ocsp_snowflake.ocsp_internal_dep1_key_ver",
  "snowflake.connector.ocsp_snowflake.ocsp_internal_dep2_key_ver",
  "snowflake.connector.ocsp_snowflake.ocsp_internal_ssd_pub_dep1",
  "snowflake.connector.ocsp_snowflake.ocsp_internal_ssd_pub_dep2",
  "snowflake.connector.ocsp_snowflake.urlsplit",
  "snowflake.connector.options",
  "snowflake.connector.options.MissingKeyring",
  "snowflake.connector.options.MissingOptionalDependency",
  "snowflake.connector.options.MissingPandas",
  "snowflake.connector.options.ModuleLikeObject",
  "snowflake.connector.options._import_or_missing_keyring_option",
  "snowflake.connector.options._import_or_missing_pandas_option",
  "snowflake.connector.options.installed_keyring",
  "snowflake.connector.options.installed_pandas",
  "snowflake.connector.options.keyring",
  "snowflake.connector.options.logger",
  "snowflake.connector.options.pandas",
  "snowflake.connector.options.pyarrow",
  "snowflake.connector.options.warn_incompatible_dep",
  "snowflake.connector.pandas_tools",
  "snowflake.connector.pandas_tools.MYPY",
  "snowflake.connector.pandas_tools.ProgrammingError",
  "snowflake.connector.pandas_tools.T",
  "snowflake.connector.pandas_tools.chunk_helper",
  "snowflake.connector.pandas_tools.logger",
  "snowflake.connector.pandas_tools.pandas",
  "snowflake.connector.pandas_tools.pd_writer",
  "snowflake.connector.pandas_tools.sqlalchemy",
  "snowflake.connector.pandas_tools.write_pandas",
  "snowflake.connector.paramstyle",
  "snowflake.connector.proxy",
  "snowflake.connector.proxy.set_proxies",
  "snowflake.connector.remote_storage_util",
  "snowflake.connector.remote_storage_util.DEFAULT_CONCURRENCY",
  "snowflake.connector.remote_storage_util.DEFAULT_MAX_RETRY",
  "snowflake.connector.remote_storage_util.NeedRenewTokenError",
  "snowflake.connector.remote_storage_util.SnowflakeFileEncryptionMaterial",
  "snowflake.connector.remote_storage_util.SnowflakeRemoteStorageUtil",
  "snowflake.connector.rfc6960",
  "snowflake.connector.rfc6960.BasicOCSPResponse",
  "snowflake.connector.rfc6960.CertID",
  "snowflake.connector.rfc6960.CertStatus",
  "snowflake.connector.rfc6960.Certs",
  "snowflake.connector.rfc6960.KeyHash",
  "snowflake.connector.rfc6960.OCSPRequest",
  "snowflake.connector.rfc6960.OCSPResponse",
  "snowflake.connector.rfc6960.Request",
  "snowflake.connector.rfc6960.ResponderID",
  "snowflake.connector.rfc6960.ResponseBytes",
  "snowflake.connector.rfc6960.ResponseData",
  "snowflake.connector.rfc6960.RevokedInfo",
  "snowflake.connector.rfc6960.Signature",
  "snowflake.connector.rfc6960.SingleResponse",
  "snowflake.connector.rfc6960.TBSRequest",
  "snowflake.connector.rfc6960.UnknownInfo",
  "snowflake.connector.rfc6960.Version",
  "snowflake.connector.s3_util",
  "snowflake.connector.s3_util.ADDRESSING_STYLE",
  "snowflake.connector.s3_util.AMZ_IV",
  "snowflake.connector.s3_util.AMZ_KEY",
  "snowflake.connector.s3_util.AMZ_MATDESC",
  "snowflake.connector.s3_util.ERRORNO_WSAECONNABORTED",
  "snowflake.connector.s3_util.EXPIRED_TOKEN",
  "snowflake.connector.s3_util.S3Location",
  "snowflake.connector.s3_util.SFC_DIGEST",
  "snowflake.connector.s3_util.SnowflakeS3Util",
  "snowflake.connector.secret_detector",
  "snowflake.connector.secret_detector.MIN_PWD_LEN",
  "snowflake.connector.secret_detector.MIN_TOKEN_LEN",
  "snowflake.connector.secret_detector.SecretDetector",
  "snowflake.connector.sfbinaryformat",
  "snowflake.connector.sfbinaryformat.SnowflakeBinaryFormat",
  "snowflake.connector.sfbinaryformat.binary_to_python",
  "snowflake.connector.sfbinaryformat.binary_to_snowflake",
  "snowflake.connector.sfdatetime",
  "snowflake.connector.sfdatetime.ElementType",
  "snowflake.connector.sfdatetime.NOT_OTHER_FORMAT",
  "snowflake.connector.sfdatetime.SnowflakeDateFormat",
  "snowflake.connector.sfdatetime.SnowflakeDateTime",
  "snowflake.connector.sfdatetime.SnowflakeDateTimeFormat",
  "snowflake.connector.sfdatetime.ZERO_TIMEDELTA",
  "snowflake.connector.sfdatetime._build_raw_year_format",
  "snowflake.connector.sfdatetime._build_year_format",
  "snowflake.connector.sfdatetime._inject_fraction",
  "snowflake.connector.sfdatetime._inject_others",
  "snowflake.connector.sfdatetime._support_negative_year",
  "snowflake.connector.sfdatetime.sfdatetime_total_seconds_from_timedelta",
  "snowflake.connector.snow_logging",
  "snowflake.connector.snow_logging.SnowLogger",
  "snowflake.connector.snow_logging.getSnowLogger",
  "snowflake.connector.sqlstate",
  "snowflake.connector.sqlstate.SQLSTATE_CONNECTION_ALREADY_EXISTS",
  "snowflake.connector.sqlstate.SQLSTATE_CONNECTION_FAILED_BUT_REESTABLISHED",
  "snowflake.connector.sqlstate.SQLSTATE_CONNECTION_NOT_EXISTS",
  "snowflake.connector.sqlstate.SQLSTATE_CONNECTION_REJECTED",
  "snowflake.connector.sqlstate.SQLSTATE_CONNECTION_WAS_NOT_ESTABLISHED",
  "snowflake.connector.sqlstate.SQLSTATE_FEATURE_NOT_SUPPORTED",
  "snowflake.connector.sqlstate.SQLSTATE_HOST_NOT_FOUND",
  "snowflake.connector.sqlstate.SQLSTATE_IO_ERROR",
  "snowflake.connector.ssd_internal_keys",
  "snowflake.connector.ssd_internal_keys.SF_KEY_UPDATE_SSD_DEFAULT_CERT_ID",
  "snowflake.connector.ssd_internal_keys.ocsp_internal_dep1_key_ver",
  "snowflake.connector.ssd_internal_keys.ocsp_internal_dep2_key_ver",
  "snowflake.connector.ssd_internal_keys.ocsp_internal_ssd_pub_dep1",
  "snowflake.connector.ssd_internal_keys.ocsp_internal_ssd_pub_dep2",
  "snowflake.connector.ssd_internal_keys.ret_int_pub_key_ver",
  "snowflake.connector.ssd_internal_keys.ret_wildcard_hkey",
  "snowflake.connector.ssl_wrap_socket",
  "snowflake.connector.ssl_wrap_socket.DEFAULT_SSL_CIPHER_LIST",
  "snowflake.connector.ssl_wrap_socket.FEATURE_OCSP_MODE",
  "snowflake.connector.ssl_wrap_socket.FEATURE_OCSP_RESPONSE_CACHE_FILE_NAME",
  "snowflake.connector.ssl_wrap_socket.SSL_WRITE_BLOCKSIZE",
  "snowflake.connector.ssl_wrap_socket.WrappedSocket",
  "snowflake.connector.ssl_wrap_socket._dnsname_to_stdlib",
  "snowflake.connector.ssl_wrap_socket._openssl_connect",
  "snowflake.connector.ssl_wrap_socket._openssl_to_stdlib_verify",
  "snowflake.connector.ssl_wrap_socket._openssl_versions",
  "snowflake.connector.ssl_wrap_socket._stdlib_to_openssl_verify",
  "snowflake.connector.ssl_wrap_socket._verify_callback",
  "snowflake.connector.ssl_wrap_socket.get_subj_alt_name",
  "snowflake.connector.ssl_wrap_socket.inject_into_urllib3",
  "snowflake.connector.ssl_wrap_socket.log",
  "snowflake.connector.ssl_wrap_socket.ssl_wrap_socket",
  "snowflake.connector.ssl_wrap_util",
  "snowflake.connector.ssl_wrap_util.HAS_SELECT",
  "snowflake.connector.ssl_wrap_util._SYSCALL_SENTINEL",
  "snowflake.connector.ssl_wrap_util._wait_for_io_events",
  "snowflake.connector.ssl_wrap_util.wait_for_read",
  "snowflake.connector.ssl_wrap_util.wait_for_write",
  "snowflake.connector.telemetry",
  "snowflake.connector.telemetry.TelemetryClient",
  "snowflake.connector.telemetry.TelemetryData",
  "snowflake.connector.telemetry.TelemetryField",
  "snowflake.connector.telemetry.logger",
  "snowflake.connector.telemetry_oob",
  "snowflake.connector.telemetry_oob.DEFAULT_BATCH_SIZE",
  "snowflake.connector.telemetry_oob.DEFAULT_NUM_OF_RETRY_TO_TRIGGER_TELEMETRY",
  "snowflake.connector.telemetry_oob.ENABLED_DEPLOYMENTS",
  "snowflake.connector.telemetry_oob.REQUEST_TIMEOUT",
  "snowflake.connector.telemetry_oob.TelemetryAPI",
  "snowflake.connector.telemetry_oob.TelemetryAPIEndpoint",
  "snowflake.connector.telemetry_oob.TelemetryEvent",
  "snowflake.connector.telemetry_oob.TelemetryLogEvent",
  "snowflake.connector.telemetry_oob.TelemetryMetricEvent",
  "snowflake.connector.telemetry_oob.TelemetryServer",
  "snowflake.connector.telemetry_oob.TelemetryServerDeployments",
  "snowflake.connector.telemetry_oob.TelemetryService",
  "snowflake.connector.telemetry_oob.logger",
  "snowflake.connector.test_util",
  "snowflake.connector.test_util.ENABLE_TELEMETRY_LOG",
  "snowflake.connector.test_util.REGRESSION_TEST_LOG_DIR",
  "snowflake.connector.test_util.RUNNING_ON_JENKINS",
  "snowflake.connector.test_util.ch",
  "snowflake.connector.test_util.rt_plain_logger",
  "snowflake.connector.threadsafety",
  "snowflake.connector.time_util",
  "snowflake.connector.time_util.DEFAULT_MASTER_VALIDITY_IN_SECONDS",
  "snowflake.connector.time_util.DecorrelateJitterBackoff",
  "snowflake.connector.time_util.HeartBeatTimer",
  "snowflake.connector.time_util.get_time_millis",
  "snowflake.connector.time_util.logger",
  "snowflake.connector.tool",
  "snowflake.connector.tool.dump_certs",
  "snowflake.connector.tool.dump_certs.SnowflakeOCSPAsn1Crypto",
  "snowflake.connector.tool.dump_certs.extract_certificate_file",
  "snowflake.connector.tool.dump_certs.main",
  "snowflake.connector.tool.dump_ocsp_response",
  "snowflake.connector.tool.dump_ocsp_response.SnowflakeOCSPAsn1Crypto",
  "snowflake.connector.tool.dump_ocsp_response._openssl_connect",
  "snowflake.connector.tool.dump_ocsp_response.dump_good_status",
  "snowflake.connector.tool.dump_ocsp_response.dump_ocsp_response",
  "snowflake.connector.tool.dump_ocsp_response.dump_revoked_status",
  "snowflake.connector.tool.dump_ocsp_response.main",
  "snowflake.connector.tool.dump_ocsp_response.urlsplit",
  "snowflake.connector.tool.dump_ocsp_response_cache",
  "snowflake.connector.tool.dump_ocsp_response_cache.OCSP_CACHE_SERVER_INTERVAL",
  "snowflake.connector.tool.dump_ocsp_response_cache.SnowflakeOCSPAsn1Crypto",
  "snowflake.connector.tool.dump_ocsp_response_cache.ZERO_EPOCH",
  "snowflake.connector.tool.dump_ocsp_response_cache._fetch_certs",
  "snowflake.connector.tool.dump_ocsp_response_cache._openssl_connect",
  "snowflake.connector.tool.dump_ocsp_response_cache._serial_to_name",
  "snowflake.connector.tool.dump_ocsp_response_cache.dump_ocsp_response_cache",
  "snowflake.connector.tool.dump_ocsp_response_cache.main",
  "snowflake.connector.tool.dump_ocsp_response_cache.raise_old_cache_exception",
  "snowflake.connector.tool.dump_ocsp_response_cache.raise_outdated_validity_exception",
  "snowflake.connector.tool.probe_connection",
  "snowflake.connector.tool.probe_connection.probe_connection",
  "snowflake.connector.util_text",
  "snowflake.connector.version",
  "snowflake.connector.version.VERSION"
 ]
}