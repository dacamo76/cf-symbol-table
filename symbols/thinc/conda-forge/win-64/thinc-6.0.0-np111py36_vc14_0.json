{
 "errors": {
  "thinc": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "thinc.about": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  },
  "thinc.linear": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/2and3/builtins.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 375, in _complete_global_scope",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 495, in get_global_filters",
    "    b = next(base_context.inference_state.builtins_module.get_filters(), None)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 128, in builtins_module",
    "    builtins_module, = self.import_module((module_name,), sys_path=())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "thinc.extra._vendorized",
  "thinc.extra._vendorized.keras_data_utils",
  "thinc.extra._vendorized.keras_data_utils.get_file",
  "thinc.extra._vendorized.keras_data_utils.progbar",
  "thinc.extra._vendorized.keras_data_utils.validate_file",
  "thinc.extra._vendorized.keras_datasets",
  "thinc.extra._vendorized.keras_datasets.load_mnist",
  "thinc.extra._vendorized.keras_generic_utils",
  "thinc.extra._vendorized.keras_generic_utils.Progbar",
  "thinc.extra._vendorized.keras_generic_utils.display_table",
  "thinc.extra._vendorized.keras_generic_utils.func_dump",
  "thinc.extra._vendorized.keras_generic_utils.func_load",
  "thinc.extra._vendorized.keras_generic_utils.get_from_module",
  "thinc.extra._vendorized.keras_generic_utils.make_tuple",
  "thinc.extra.datasets",
  "thinc.extra.datasets.ANCORA_1_4_ZIP",
  "thinc.extra.datasets.EWTB_1_4_ZIP",
  "thinc.extra.datasets.GITHUB",
  "thinc.extra.datasets.ancora_pos_tags",
  "thinc.extra.datasets.ewtb_pos_tags",
  "thinc.extra.datasets.mnist",
  "thinc.extra.datasets.read_conll",
  "thinc.extra.datasets.ud_pos_tags",
  "thinc.extra.tests",
  "thinc.linear.tests.test_avgtron",
  "thinc.linear.tests.test_avgtron.assert_near_eq",
  "thinc.linear.tests.test_avgtron.test_basic",
  "thinc.linear.tests.test_sparse_array",
  "thinc.linear.tests.test_sparse_array.test_init",
  "thinc.linear.tests.test_sparse_array.test_setitem",
  "thinc.neural.base",
  "thinc.neural.base.Model",
  "thinc.neural.base.Model.Trainer",
  "thinc.neural.base.Model.device",
  "thinc.neural.base.Model.input_shape",
  "thinc.neural.base.Model.is_initialized",
  "thinc.neural.base.Model.name",
  "thinc.neural.base.Model.ops",
  "thinc.neural.base.Model.output_shape",
  "thinc.neural.base.Network",
  "thinc.neural.base.Network.input_shape",
  "thinc.neural.base.Network.name",
  "thinc.neural.base.Network.nr_weight",
  "thinc.neural.base.Network.output_shape",
  "thinc.neural.convolution",
  "thinc.neural.convolution.ExtractWindow",
  "thinc.neural.convolution.Trainer",
  "thinc.neural.convolution.device",
  "thinc.neural.convolution.input_shape",
  "thinc.neural.convolution.is_initialized",
  "thinc.neural.convolution.name",
  "thinc.neural.convolution.ops",
  "thinc.neural.convolution.output_shape",
  "thinc.neural.doc2vecs",
  "thinc.neural.doc2vecs.SpacyWindowEncode",
  "thinc.neural.doc2vecs.Trainer",
  "thinc.neural.doc2vecs.device",
  "thinc.neural.doc2vecs.input_shape",
  "thinc.neural.doc2vecs.is_initialized",
  "thinc.neural.doc2vecs.name",
  "thinc.neural.doc2vecs.ops",
  "thinc.neural.doc2vecs.output_shape",
  "thinc.neural.exceptions",
  "thinc.neural.exceptions.ShapeError",
  "thinc.neural.id2vec",
  "thinc.neural.id2vec.Embed",
  "thinc.neural.id2vec.Trainer",
  "thinc.neural.id2vec.device",
  "thinc.neural.id2vec.input_shape",
  "thinc.neural.id2vec.is_initialized",
  "thinc.neural.id2vec.name",
  "thinc.neural.id2vec.ops",
  "thinc.neural.id2vec.output_shape",
  "thinc.neural.ids2vecs",
  "thinc.neural.ids2vecs.Trainer",
  "thinc.neural.ids2vecs.WindowEncode",
  "thinc.neural.ids2vecs.device",
  "thinc.neural.ids2vecs.input_shape",
  "thinc.neural.ids2vecs.is_initialized",
  "thinc.neural.ids2vecs.name",
  "thinc.neural.ids2vecs.ops",
  "thinc.neural.ids2vecs.output_shape",
  "thinc.neural.ops",
  "thinc.neural.ops.CupyOps",
  "thinc.neural.ops.DataPool",
  "thinc.neural.ops.NumpyOps",
  "thinc.neural.ops.Ops",
  "thinc.neural.ops.cupy",
  "thinc.neural.optimizers",
  "thinc.neural.optimizers.Adam",
  "thinc.neural.optimizers.Eve",
  "thinc.neural.optimizers.SGD",
  "thinc.neural.optimizers.clip_gradient",
  "thinc.neural.optimizers.linear_decay",
  "thinc.neural.optimizers.update_averages",
  "thinc.neural.tests",
  "thinc.neural.tests.integration",
  "thinc.neural.tests.integration.test_affine_learns",
  "thinc.neural.tests.integration.test_affine_learns.test_init",
  "thinc.neural.tests.integration.test_affine_learns.test_predict_bias",
  "thinc.neural.tests.integration.test_affine_learns.test_predict_weights",
  "thinc.neural.tests.integration.test_affine_learns.test_update",
  "thinc.neural.tests.unit",
  "thinc.neural.tests.unit.test_base",
  "thinc.neural.tests.unit.test_base.MockOps",
  "thinc.neural.tests.unit.test_base.Subclass",
  "thinc.neural.tests.unit.test_base.test_begin_update",
  "thinc.neural.tests.unit.test_base.test_predict",
  "thinc.neural.tests.unit.test_base.test_specify_shape",
  "thinc.neural.tests.unit.test_ops",
  "thinc.neural.tests.unit.test_ops.test_get_dropout_empty",
  "thinc.neural.tests.unit.test_ops.test_get_dropout_not_empty",
  "thinc.neural.tests.unit.test_vec2vec",
  "thinc.neural.tests.unit.test_vec2vec.DataPool",
  "thinc.neural.tests.unit.test_vec2vec.MockOps",
  "thinc.neural.tests.unit.test_vec2vec.ops",
  "thinc.neural.tests.unit.test_vec2vec.test_begin_update",
  "thinc.neural.tests.unit.test_vec2vec.test_finish_update",
  "thinc.neural.tests.unit.test_vec2vec.test_init",
  "thinc.neural.tests.unit.test_vec2vec.test_nr_weight",
  "thinc.neural.tests.unit.test_vec2vec.test_predict_batch_bias",
  "thinc.neural.tests.unit.test_vec2vec.test_predict_batch_not_batch",
  "thinc.neural.tests.unit.test_vec2vec.test_predict_batch_weights",
  "thinc.neural.tests.unit.test_vec2vec.test_predict_update_dim_mismatch",
  "thinc.neural.tests.unit.test_window_encode",
  "thinc.neural.tests.unit.test_window_encode.MyWindowEncode",
  "thinc.neural.tests.unit.test_window_encode.set_vector",
  "thinc.neural.tests.unit.test_window_encode.test_dot_ids",
  "thinc.neural.tests.unit.test_window_encode.test_get_ids",
  "thinc.neural.tests.unit.test_window_encode.test_init",
  "thinc.neural.tests.unit.test_window_encode.test_predict_batch",
  "thinc.neural.tests.unit.test_window_encode.test_predict_shapes",
  "thinc.neural.tests.unit.test_window_encode.test_update",
  "thinc.neural.train",
  "thinc.neural.train.Trainer",
  "thinc.neural.util",
  "thinc.neural.util.get_ops",
  "thinc.neural.util.minibatch",
  "thinc.neural.util.partition",
  "thinc.neural.util.score_model",
  "thinc.neural.vec2id",
  "thinc.neural.vec2id.MLP",
  "thinc.neural.vec2id.Trainer",
  "thinc.neural.vec2id.device",
  "thinc.neural.vec2id.input_shape",
  "thinc.neural.vec2id.is_initialized",
  "thinc.neural.vec2id.name",
  "thinc.neural.vec2id.nr_weight",
  "thinc.neural.vec2id.ops",
  "thinc.neural.vec2id.output_shape",
  "thinc.neural.vec2vec",
  "thinc.neural.vec2vec.Affine",
  "thinc.neural.vec2vec.Maxout",
  "thinc.neural.vec2vec.ReLu",
  "thinc.neural.vec2vec.Softmax",
  "thinc.neural.vec2vec._take_which",
  "thinc.neural.vecs2vec",
  "thinc.neural.vecs2vec.MaxPooling",
  "thinc.neural.vecs2vec.MeanPooling",
  "thinc.neural.vecs2vec.MinPooling",
  "thinc.neural.vecs2vec.MultiPooling",
  "thinc.neural.vecs2vecs",
  "thinc.neural.vecs2vecs.LSTM",
  "thinc.neural.vecs2vecs._get_finish_backward",
  "thinc.neural.vecs2vecs.begin_LSTM_forward",
  "thinc.neural.vecs2vecs.begin_lstm_backward",
  "thinc.neural.vecs2vecs.checkBatchGradient",
  "thinc.neural.vecs2vecs.checkSequentialMatchesBatch",
  "thinc.train.Trainer"
 ]
}