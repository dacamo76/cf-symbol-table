{
 "errors": {},
 "symbols": [
  "cookiecutter.__main__",
  "cookiecutter.__version__",
  "cookiecutter.cli",
  "cookiecutter.cli.FailedHookException",
  "cookiecutter.cli.InvalidModeException",
  "cookiecutter.cli.OutputDirExistsException",
  "cookiecutter.cli.RepositoryCloneFailed",
  "cookiecutter.cli.RepositoryNotFound",
  "cookiecutter.cli.UndefinedVariableInTemplate",
  "cookiecutter.cli.UnknownExtension",
  "cookiecutter.cli.__version__",
  "cookiecutter.cli.configure_logger",
  "cookiecutter.cli.cookiecutter",
  "cookiecutter.cli.main",
  "cookiecutter.cli.validate_extra_context",
  "cookiecutter.cli.version_msg",
  "cookiecutter.config",
  "cookiecutter.config.BUILTIN_ABBREVIATIONS",
  "cookiecutter.config.DEFAULT_CONFIG",
  "cookiecutter.config.USER_CONFIG_PATH",
  "cookiecutter.config._expand_path",
  "cookiecutter.config.get_config",
  "cookiecutter.config.get_user_config",
  "cookiecutter.config.logger",
  "cookiecutter.environment",
  "cookiecutter.environment.ExtensionLoaderMixin",
  "cookiecutter.environment.StrictEnvironment",
  "cookiecutter.exceptions",
  "cookiecutter.exceptions.ConfigDoesNotExistException",
  "cookiecutter.exceptions.ContextDecodingException",
  "cookiecutter.exceptions.CookiecutterException",
  "cookiecutter.exceptions.FailedHookException",
  "cookiecutter.exceptions.InvalidConfiguration",
  "cookiecutter.exceptions.InvalidModeException",
  "cookiecutter.exceptions.MissingProjectDir",
  "cookiecutter.exceptions.NonTemplatedInputDirException",
  "cookiecutter.exceptions.OutputDirExistsException",
  "cookiecutter.exceptions.RepositoryCloneFailed",
  "cookiecutter.exceptions.RepositoryNotFound",
  "cookiecutter.exceptions.UndefinedVariableInTemplate",
  "cookiecutter.exceptions.UnknownExtension",
  "cookiecutter.exceptions.UnknownRepoType",
  "cookiecutter.exceptions.UnknownTemplateDirException",
  "cookiecutter.exceptions.VCSNotInstalled",
  "cookiecutter.extensions",
  "cookiecutter.extensions.JsonifyExtension",
  "cookiecutter.find",
  "cookiecutter.find.find_template",
  "cookiecutter.find.logger",
  "cookiecutter.generate",
  "cookiecutter.generate.StrictEnvironment",
  "cookiecutter.generate._run_hook_from_repo_dir",
  "cookiecutter.generate.apply_overwrites_to_context",
  "cookiecutter.generate.ensure_dir_is_templated",
  "cookiecutter.generate.generate_context",
  "cookiecutter.generate.generate_file",
  "cookiecutter.generate.is_copy_only_path",
  "cookiecutter.generate.logger",
  "cookiecutter.generate.render_and_create_dir",
  "cookiecutter.hooks",
  "cookiecutter.hooks.EXIT_SUCCESS",
  "cookiecutter.hooks.StrictEnvironment",
  "cookiecutter.hooks._HOOKS",
  "cookiecutter.hooks.find_hook",
  "cookiecutter.hooks.logger",
  "cookiecutter.hooks.run_hook",
  "cookiecutter.hooks.run_script",
  "cookiecutter.hooks.utils",
  "cookiecutter.hooks.valid_hook",
  "cookiecutter.log",
  "cookiecutter.log.LOG_FORMATS",
  "cookiecutter.log.LOG_LEVELS",
  "cookiecutter.log.configure_logger",
  "cookiecutter.main",
  "cookiecutter.main.cookiecutter",
  "cookiecutter.main.logger",
  "cookiecutter.prompt",
  "cookiecutter.prompt.process_json",
  "cookiecutter.prompt.prompt_choice_for_config",
  "cookiecutter.prompt.prompt_for_config",
  "cookiecutter.prompt.read_user_choice",
  "cookiecutter.prompt.read_user_dict",
  "cookiecutter.prompt.read_user_variable",
  "cookiecutter.prompt.read_user_yes_no",
  "cookiecutter.prompt.render_variable",
  "cookiecutter.replay",
  "cookiecutter.replay.dump",
  "cookiecutter.replay.get_file_name",
  "cookiecutter.replay.load",
  "cookiecutter.repository",
  "cookiecutter.repository.REPO_REGEX",
  "cookiecutter.repository.determine_repo_dir",
  "cookiecutter.repository.expand_abbreviations",
  "cookiecutter.repository.is_repo_url",
  "cookiecutter.repository.repository_has_cookiecutter_json",
  "cookiecutter.utils",
  "cookiecutter.utils.force_delete",
  "cookiecutter.utils.logger",
  "cookiecutter.utils.make_executable",
  "cookiecutter.utils.make_sure_path_exists",
  "cookiecutter.utils.rmtree",
  "cookiecutter.utils.work_in",
  "cookiecutter.vcs",
  "cookiecutter.vcs.BRANCH_ERRORS",
  "cookiecutter.vcs.clone",
  "cookiecutter.vcs.identify_repo",
  "cookiecutter.vcs.is_vcs_installed",
  "cookiecutter.vcs.logger",
  "cookiecutter.vcs.prompt_and_delete_repo"
 ]
}