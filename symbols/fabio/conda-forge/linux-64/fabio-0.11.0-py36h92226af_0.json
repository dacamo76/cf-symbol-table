{
 "errors": {
  "fabio.TiffIO": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/numpy/core/function_base.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 133, in wrapper",
    "    return func(value, arguments=arguments, callback=call)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 159, in wrapper",
    "    value.inference_state, arguments, clinic_string))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/arguments.py\", line 94, in iterate_argument_clinic",
    "    value_set = NO_VALUES if argument is None else argument.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 36, in filter_name",
    "    names = filter.get(string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 84, in get",
    "    _get_definition_names(self._used_names, name),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 110, in _break_check",
    "    return reachable & _break_check(context, value_scope, flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 336, in _get_annotated_class_object",
    "    or not signature.matches_signature(args):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in matches_signature",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in <genexpr>",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 33, in matches_signature",
    "    argument_values = self.infer().py__class__()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 546, in infer",
    "    return self.get_executed_param_name().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 125, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 465, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 125, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 465, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 36, in filter_name",
    "    names = filter.get(string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 84, in get",
    "    _get_definition_names(self._used_names, name),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 125, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 465, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 242, in get_return_values",
    "    value_set |= self.infer_node(children[1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 421, in _infer_expr_stmt",
    "    left_values = context.py__getattribute__(name, position=stmt.start_pos)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 421, in _infer_expr_stmt",
    "    left_values = context.py__getattribute__(name, position=stmt.start_pos)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 421, in _infer_expr_stmt",
    "    left_values = context.py__getattribute__(name, position=stmt.start_pos)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 421, in _infer_expr_stmt",
    "    left_values = context.py__getattribute__(name, position=stmt.start_pos)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 71, in get_filters",
    "    yield from self.iter_star_filters()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 99, in iter_star_filters",
    "    for star_module in self.star_imports():",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 124, in star_imports",
    "    modules += module.star_imports()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/module.py\", line 119, in star_imports",
    "    level=i.level",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "fabio.COMPRESSORS",
  "fabio.FilenameObject",
  "fabio.GEimage",
  "fabio.GEimage.GE_HEADER_INFO",
  "fabio.GEimage.GEimage",
  "fabio.GEimage.GeImage",
  "fabio.GEimage.__authors__",
  "fabio.GEimage.__copyright__",
  "fabio.GEimage.__date__",
  "fabio.GEimage.__licence__",
  "fabio.GEimage.__status__",
  "fabio.HiPiCimage",
  "fabio.HiPiCimage.HiPiCimage",
  "fabio.HiPiCimage.HipicImage",
  "fabio.HiPiCimage.logger",
  "fabio.OXDimage",
  "fabio.OXDimage.DEFAULT_HEADERS",
  "fabio.OXDimage.DETECTOR_TYPES",
  "fabio.OXDimage.OXDimage",
  "fabio.OXDimage.OxdImage",
  "fabio.OXDimage.Section",
  "fabio.OXDimage.__contact__",
  "fabio.OXDimage.__copyright__",
  "fabio.OXDimage.__date__",
  "fabio.OXDimage.__license__",
  "fabio.OXDimage.logger",
  "fabio.TiffIO",
  "fabio.__author__",
  "fabio.__contact__",
  "fabio.__copyright__",
  "fabio.__date__",
  "fabio.__license__",
  "fabio.__status__",
  "fabio._fabioformats",
  "fabio._version",
  "fabio._version.MAJOR",
  "fabio._version.MICRO",
  "fabio._version.MINOR",
  "fabio._version.PRERELEASE_NORMALIZED_NAME",
  "fabio._version.RELEASE_LEVEL_VALUE",
  "fabio._version.RELEV",
  "fabio._version.SERIAL",
  "fabio._version.__all__",
  "fabio._version.__author__",
  "fabio._version.__contact__",
  "fabio._version.__copyright__",
  "fabio._version.__date__",
  "fabio._version.__docformat__",
  "fabio._version.__license__",
  "fabio._version.__status__",
  "fabio._version._version_info",
  "fabio._version.calc_hexversion",
  "fabio._version.date",
  "fabio._version.debianversion",
  "fabio._version.hexversion",
  "fabio._version.strictversion",
  "fabio._version.version",
  "fabio._version.version_info",
  "fabio.adscimage",
  "fabio.adscimage.AdscImage",
  "fabio.adscimage.adscimage",
  "fabio.app",
  "fabio.app._matplotlib",
  "fabio.app._matplotlib.__authors__",
  "fabio.app._matplotlib.__date__",
  "fabio.app._matplotlib.__license__",
  "fabio.app._matplotlib._logger",
  "fabio.app._qt",
  "fabio.app._qt.BINDING",
  "fabio.app._qt.HAS_OPENGL",
  "fabio.app._qt.HAS_SVG",
  "fabio.app._qt.Property",
  "fabio.app._qt.Signal",
  "fabio.app._qt.Slot",
  "fabio.app._qt.__authors__",
  "fabio.app._qt.__date__",
  "fabio.app._qt.__license__",
  "fabio.app._qt._logger",
  "fabio.app._qt.pyqtSignal",
  "fabio.app.convert",
  "fabio.app.convert.EXIT_ARGUMENT_FAILURE",
  "fabio.app.convert.EXIT_FAILURE",
  "fabio.app.convert.EXIT_SUCCESS",
  "fabio.app.convert.__author__",
  "fabio.app.convert.__copyright__",
  "fabio.app.convert.__date__",
  "fabio.app.convert.__licence__",
  "fabio.app.convert.__status__",
  "fabio.app.convert.convert_all",
  "fabio.app.convert.convert_one",
  "fabio.app.convert.expand_args",
  "fabio.app.convert.get_default_extension_from_format",
  "fabio.app.convert.get_output_filename",
  "fabio.app.convert.is_format_supported",
  "fabio.app.convert.is_older",
  "fabio.app.convert.is_user_want_to_overwrite_filename",
  "fabio.app.convert.logger",
  "fabio.app.convert.main",
  "fabio.app.convert.print_supported_formats",
  "fabio.app.convert.result",
  "fabio.app.eiger2cbf",
  "fabio.app.eiger2cbf.CONST_hc",
  "fabio.app.eiger2cbf.EXIT_ARGUMENT_FAILURE",
  "fabio.app.eiger2cbf.EXIT_FAILURE",
  "fabio.app.eiger2cbf.EXIT_SUCCESS",
  "fabio.app.eiger2cbf.ProgressBar",
  "fabio.app.eiger2cbf.__author__",
  "fabio.app.eiger2cbf.__copyright__",
  "fabio.app.eiger2cbf.__date__",
  "fabio.app.eiger2cbf.__licence__",
  "fabio.app.eiger2cbf.__status__",
  "fabio.app.eiger2cbf.convert_all",
  "fabio.app.eiger2cbf.convert_one",
  "fabio.app.eiger2cbf.expand_args",
  "fabio.app.eiger2cbf.logger",
  "fabio.app.eiger2cbf.main",
  "fabio.app.eiger2cbf.result",
  "fabio.app.eiger2cbf.select_detecor",
  "fabio.app.eiger2crysalis",
  "fabio.app.eiger2crysalis.CONST_hc",
  "fabio.app.eiger2crysalis.Converter",
  "fabio.app.eiger2crysalis.EXIT_ARGUMENT_FAILURE",
  "fabio.app.eiger2crysalis.EXIT_FAILURE",
  "fabio.app.eiger2crysalis.EXIT_SUCCESS",
  "fabio.app.eiger2crysalis.FOOTER",
  "fabio.app.eiger2crysalis.ProgressBar",
  "fabio.app.eiger2crysalis.__author__",
  "fabio.app.eiger2crysalis.__copyright__",
  "fabio.app.eiger2crysalis.__date__",
  "fabio.app.eiger2crysalis.__licence__",
  "fabio.app.eiger2crysalis.__status__",
  "fabio.app.eiger2crysalis.as_str",
  "fabio.app.eiger2crysalis.expand_args",
  "fabio.app.eiger2crysalis.logger",
  "fabio.app.eiger2crysalis.main",
  "fabio.app.eiger2crysalis.result",
  "fabio.app.setup",
  "fabio.app.setup.__authors__",
  "fabio.app.setup.__date__",
  "fabio.app.setup.__license__",
  "fabio.app.setup.configuration",
  "fabio.app.viewer",
  "fabio.app.viewer.AppForm",
  "fabio.app.viewer.BinDialog",
  "fabio.app.viewer.CounterFormatOptionDialog",
  "fabio.app.viewer.DownSamplingDialog",
  "fabio.app.viewer.Nexus",
  "fabio.app.viewer.__author__",
  "fabio.app.viewer.__copyright__",
  "fabio.app.viewer.__licence__",
  "fabio.app.viewer.__version__",
  "fabio.app.viewer.main",
  "fabio.app.viewer.output_format",
  "fabio.app.viewer.result",
  "fabio.benchmark.__author__",
  "fabio.benchmark.__copyright__",
  "fabio.benchmark.__date__",
  "fabio.benchmark.__license__",
  "fabio.benchmark.datasets",
  "fabio.benchmark.date",
  "fabio.benchmark.open",
  "fabio.benchmark.run",
  "fabio.benchmark.run_benchmark",
  "fabio.benchmark.setup",
  "fabio.benchmark.setup.__authors__",
  "fabio.benchmark.setup.__date__",
  "fabio.benchmark.setup.__license__",
  "fabio.benchmark.setup.configuration",
  "fabio.benchmark.stmt",
  "fabio.benchmark.version",
  "fabio.benchmarks",
  "fabio.binaryimage",
  "fabio.binaryimage.BinaryImage",
  "fabio.binaryimage.__authors__",
  "fabio.binaryimage.__contact__",
  "fabio.binaryimage.__copyright__",
  "fabio.binaryimage.__license__",
  "fabio.binaryimage.__version__",
  "fabio.binaryimage.binaryimage",
  "fabio.binaryimage.logger",
  "fabio.bruker100image",
  "fabio.bruker100image.Bruker100Image",
  "fabio.bruker100image.__authors__",
  "fabio.bruker100image.__copyright__",
  "fabio.bruker100image.__licence__",
  "fabio.bruker100image.__status__",
  "fabio.bruker100image._merge_data",
  "fabio.bruker100image._split_data",
  "fabio.bruker100image.bruker100image",
  "fabio.bruker100image.logger",
  "fabio.bruker100image.mround",
  "fabio.brukerimage",
  "fabio.brukerimage.BrukerImage",
  "fabio.brukerimage.__authors__",
  "fabio.brukerimage.__copyright__",
  "fabio.brukerimage.__date__",
  "fabio.brukerimage.__licence__",
  "fabio.brukerimage.__status__",
  "fabio.brukerimage.brukerimage",
  "fabio.brukerimage.logger",
  "fabio.cbfimage",
  "fabio.cbfimage.CIF",
  "fabio.cbfimage.CbfImage",
  "fabio.cbfimage.DATA_TYPES",
  "fabio.cbfimage.MINIMUM_KEYS",
  "fabio.cbfimage.PilatusHeader",
  "fabio.cbfimage.PilatusKey",
  "fabio.cbfimage.__author__",
  "fabio.cbfimage.__contact__",
  "fabio.cbfimage.__copyright__",
  "fabio.cbfimage.__date__",
  "fabio.cbfimage.__license__",
  "fabio.cbfimage.__version__",
  "fabio.cbfimage.cbfimage",
  "fabio.cbfimage.logger",
  "fabio.compression",
  "fabio.compression.COMPRESSORS",
  "fabio.compression.ExternalCompressors",
  "fabio.compression.WindowsError",
  "fabio.compression.__author__",
  "fabio.compression.__contact__",
  "fabio.compression.__copyright__",
  "fabio.compression.__date__",
  "fabio.compression.__license__",
  "fabio.compression.agi_bitfield",
  "fabio.compression.agi_bitfield.MASK",
  "fabio.compression.agi_bitfield.__author__",
  "fabio.compression.agi_bitfield.__contact__",
  "fabio.compression.agi_bitfield.__copyright__",
  "fabio.compression.agi_bitfield.__date__",
  "fabio.compression.agi_bitfield.__license__",
  "fabio.compression.agi_bitfield._compress",
  "fabio.compression.agi_bitfield._compress_row",
  "fabio.compression.agi_bitfield._get_fieldsize",
  "fabio.compression.agi_bitfield.compress",
  "fabio.compression.agi_bitfield.decode_field",
  "fabio.compression.agi_bitfield.decompress",
  "fabio.compression.agi_bitfield.fortran_fieldsize",
  "fabio.compression.agi_bitfield.get_fieldsize",
  "fabio.compression.agi_bitfield.logger",
  "fabio.compression.agi_bitfield.read_escaped",
  "fabio.compression.agi_bitfield.read_len_byte",
  "fabio.compression.agi_bitfield.undo_escapes",
  "fabio.compression.agi_bitfield.unpack",
  "fabio.compression.agi_bitfield.write_escaped",
  "fabio.compression.bz2",
  "fabio.compression.compByteOffset",
  "fabio.compression.compByteOffset_cython",
  "fabio.compression.compByteOffset_numpy",
  "fabio.compression.compPCK",
  "fabio.compression.compTY1",
  "fabio.compression.compression",
  "fabio.compression.compression.COMPRESSORS",
  "fabio.compression.compression.ExternalCompressors",
  "fabio.compression.compression.WindowsError",
  "fabio.compression.compression.__author__",
  "fabio.compression.compression.__contact__",
  "fabio.compression.compression.__copyright__",
  "fabio.compression.compression.__date__",
  "fabio.compression.compression.__license__",
  "fabio.compression.compression.bz2",
  "fabio.compression.compression.compByteOffset",
  "fabio.compression.compression.compByteOffset_cython",
  "fabio.compression.compression.compByteOffset_numpy",
  "fabio.compression.compression.compPCK",
  "fabio.compression.compression.compTY1",
  "fabio.compression.compression.decByteOffset",
  "fabio.compression.compression.decByteOffset_cython",
  "fabio.compression.compression.decByteOffset_numpy",
  "fabio.compression.compression.decBzip2",
  "fabio.compression.compression.decGzip",
  "fabio.compression.compression.decKM4CCD",
  "fabio.compression.compression.decPCK",
  "fabio.compression.compression.decTY1",
  "fabio.compression.compression.decZlib",
  "fabio.compression.compression.endianness",
  "fabio.compression.compression.gzip",
  "fabio.compression.compression.is_incomplete_gz_block_exception",
  "fabio.compression.compression.logger",
  "fabio.compression.compression.md5sum",
  "fabio.compression.compression.zlib",
  "fabio.compression.decByteOffset",
  "fabio.compression.decByteOffset_cython",
  "fabio.compression.decByteOffset_numpy",
  "fabio.compression.decBzip2",
  "fabio.compression.decGzip",
  "fabio.compression.decKM4CCD",
  "fabio.compression.decPCK",
  "fabio.compression.decTY1",
  "fabio.compression.decZlib",
  "fabio.compression.endianness",
  "fabio.compression.gzip",
  "fabio.compression.is_incomplete_gz_block_exception",
  "fabio.compression.logger",
  "fabio.compression.md5sum",
  "fabio.compression.setup",
  "fabio.compression.setup.__authors__",
  "fabio.compression.setup.__date__",
  "fabio.compression.setup.__license__",
  "fabio.compression.setup.configuration",
  "fabio.compression.zlib",
  "fabio.construct_filename",
  "fabio.converters",
  "fabio.converters.CONVERSION_DATA",
  "fabio.converters.CONVERSION_HEADER",
  "fabio.converters.__author__",
  "fabio.converters.__contact__",
  "fabio.converters.__copyright__",
  "fabio.converters.__license__",
  "fabio.converters.convert_data",
  "fabio.converters.convert_header",
  "fabio.converters.logger",
  "fabio.datIO",
  "fabio.datIO.columnfile",
  "fabio.datIO.fabiodata",
  "fabio.datIO.logger",
  "fabio.date",
  "fabio.deconstruct_filename",
  "fabio.directories",
  "fabio.directories.SHARED_TESTIMAGES",
  "fabio.directories.__author__",
  "fabio.directories.__contact__",
  "fabio.directories.__copyright__",
  "fabio.directories.__date__",
  "fabio.directories.__license__",
  "fabio.directories.__status__",
  "fabio.directories.logger",
  "fabio.directories.testimages",
  "fabio.dm3image",
  "fabio.dm3image.DATA_BYTES",
  "fabio.dm3image.DATA_TYPES",
  "fabio.dm3image.Dm3Image",
  "fabio.dm3image.dm3image",
  "fabio.dm3image.logger",
  "fabio.dtrekimage",
  "fabio.dtrekimage.DtrekImage",
  "fabio.dtrekimage.RESERVED_HEADER_KEYS",
  "fabio.dtrekimage._DATA_TYPES",
  "fabio.dtrekimage._need_a_real_file",
  "fabio.dtrekimage._need_a_seek_to_read",
  "fabio.dtrekimage.bpp",
  "fabio.dtrekimage.bytecode",
  "fabio.dtrekimage.classname",
  "fabio.dtrekimage.dim3",
  "fabio.dtrekimage.dims",
  "fabio.dtrekimage.dtype",
  "fabio.dtrekimage.header_keys",
  "fabio.dtrekimage.incomplete_file",
  "fabio.dtrekimage.logger",
  "fabio.dtrekimage.nframes",
  "fabio.edfimage",
  "fabio.edfimage.BLOCKSIZE",
  "fabio.edfimage.DATA_TYPES",
  "fabio.edfimage.DEFAULT_VALUES",
  "fabio.edfimage.EdfFrame",
  "fabio.edfimage.EdfImage",
  "fabio.edfimage.Frame",
  "fabio.edfimage.HeaderBlockType",
  "fabio.edfimage.MAX_BLOCKS",
  "fabio.edfimage.MINIMUM_KEYS",
  "fabio.edfimage.MINIMUM_KEYS2",
  "fabio.edfimage.MalformedHeaderError",
  "fabio.edfimage.NUMPY_EDF_DTYPE",
  "fabio.edfimage.edfimage",
  "fabio.edfimage.logger",
  "fabio.eigerimage",
  "fabio.eigerimage.EigerImage",
  "fabio.eigerimage.__authors__",
  "fabio.eigerimage.__contact__",
  "fabio.eigerimage.__copyright__",
  "fabio.eigerimage.__date__",
  "fabio.eigerimage.__license__",
  "fabio.eigerimage.eigerimage",
  "fabio.eigerimage.h5py",
  "fabio.eigerimage.logger",
  "fabio.esperantoimage",
  "fabio.esperantoimage.EsperantoImage",
  "fabio.esperantoimage.__authors__",
  "fabio.esperantoimage.__copyright__",
  "fabio.esperantoimage.__date__",
  "fabio.esperantoimage.__license__",
  "fabio.esperantoimage.esperantoimage",
  "fabio.esperantoimage.logger",
  "fabio.exists",
  "fabio.ext",
  "fabio.ext.setup",
  "fabio.ext.setup.__authors__",
  "fabio.ext.setup.__date__",
  "fabio.ext.setup.__license__",
  "fabio.ext.setup.configuration",
  "fabio.extract_filenumber",
  "fabio.fabioformats",
  "fabio.fabioformats.__author__",
  "fabio.fabioformats.__contact__",
  "fabio.fabioformats.__copyright__",
  "fabio.fabioformats.__date__",
  "fabio.fabioformats.__docformat__",
  "fabio.fabioformats.__license__",
  "fabio.fabioformats.__status__",
  "fabio.fabioformats._default_codecs",
  "fabio.fabioformats._extension_cache",
  "fabio.fabioformats._get_extension_mapping",
  "fabio.fabioformats._logger",
  "fabio.fabioformats._registry",
  "fabio.fabioformats.factory",
  "fabio.fabioformats.get_all_classes",
  "fabio.fabioformats.get_class_by_name",
  "fabio.fabioformats.get_classes",
  "fabio.fabioformats.importer",
  "fabio.fabioformats.is_extension_supported",
  "fabio.fabioformats.register",
  "fabio.fabioimage",
  "fabio.fabioimage.FabioFrame",
  "fabio.fabioimage.FabioImage",
  "fabio.fabioimage.FabioImage.RESERVED_HEADER_KEYS",
  "fabio.fabioimage.FabioImage._need_a_real_file",
  "fabio.fabioimage.FabioImage._need_a_seek_to_read",
  "fabio.fabioimage.FabioImage.classname",
  "fabio.fabioimage.FabioImage.dtype",
  "fabio.fabioimage.FabioImage.incomplete_file",
  "fabio.fabioimage.FabioImage.nframes",
  "fabio.fabioimage._FabioArray",
  "fabio.fabioimage._FabioArray.bpp",
  "fabio.fabioimage._FabioArray.bytecode",
  "fabio.fabioimage._FabioArray.dim3",
  "fabio.fabioimage._FabioArray.dims",
  "fabio.fabioimage._FabioArray.header_keys",
  "fabio.fabioimage.__authors__",
  "fabio.fabioimage.__contact__",
  "fabio.fabioimage.__copyright__",
  "fabio.fabioimage.__date__",
  "fabio.fabioimage.__license__",
  "fabio.fabioimage.fabioimage",
  "fabio.fabioimage.logger",
  "fabio.fabioutils",
  "fabio.fabioutils.AVAILABLE_COMPRESSED_EXTENSIONS",
  "fabio.fabioutils.BZ2File",
  "fabio.fabioutils.BytesIO",
  "fabio.fabioutils.COMPRESSED_EXTENSIONS",
  "fabio.fabioutils.DebugSemaphore",
  "fabio.fabioutils.File",
  "fabio.fabioutils.GzipFile",
  "fabio.fabioutils.NotGoodReader",
  "fabio.fabioutils.OrderedDict",
  "fabio.fabioutils.PathTypes",
  "fabio.fabioutils.StringTypes",
  "fabio.fabioutils.UnknownCompressedFile",
  "fabio.fabioutils.__author__",
  "fabio.fabioutils.__contact__",
  "fabio.fabioutils.__copyright__",
  "fabio.fabioutils.__date__",
  "fabio.fabioutils.__docformat__",
  "fabio.fabioutils.__enter__",
  "fabio.fabioutils.__exit__",
  "fabio.fabioutils.__license__",
  "fabio.fabioutils.__status__",
  "fabio.fabioutils.construct_filename",
  "fabio.fabioutils.deconstruct_filename",
  "fabio.fabioutils.dictAscii",
  "fabio.fabioutils.exists",
  "fabio.fabioutils.extract_filenumber",
  "fabio.fabioutils.getnum",
  "fabio.fabioutils.isAscii",
  "fabio.fabioutils.jump_filename",
  "fabio.fabioutils.logger",
  "fabio.fabioutils.next_filename",
  "fabio.fabioutils.nice_int",
  "fabio.fabioutils.numstem",
  "fabio.fabioutils.pad",
  "fabio.fabioutils.pathlib",
  "fabio.fabioutils.previous_filename",
  "fabio.fabioutils.toAscii",
  "fabio.fabioutils.to_str",
  "fabio.factory",
  "fabio.file_series",
  "fabio.file_series.FileSeries",
  "fabio.file_series.RESERVED_HEADER_KEYS",
  "fabio.file_series._FileDescription",
  "fabio.file_series._filename_series_adapter",
  "fabio.file_series._need_a_real_file",
  "fabio.file_series._need_a_seek_to_read",
  "fabio.file_series.bpp",
  "fabio.file_series.bytecode",
  "fabio.file_series.classname",
  "fabio.file_series.dim3",
  "fabio.file_series.dims",
  "fabio.file_series.dtype",
  "fabio.file_series.file_series",
  "fabio.file_series.filename_series",
  "fabio.file_series.header_keys",
  "fabio.file_series.incomplete_file",
  "fabio.file_series.logger",
  "fabio.file_series.new_file_series",
  "fabio.file_series.nframes",
  "fabio.file_series.numbered_file_series",
  "fabio.filename_object",
  "fabio.fit2dimage",
  "fabio.fit2dimage.Fit2dImage",
  "fabio.fit2dimage.__authors__",
  "fabio.fit2dimage.__contact__",
  "fabio.fit2dimage.__copyright__",
  "fabio.fit2dimage.__date__",
  "fabio.fit2dimage.__license__",
  "fabio.fit2dimage.fit2dimage",
  "fabio.fit2dimage.hex_to",
  "fabio.fit2dimage.logger",
  "fabio.fit2dmaskimage",
  "fabio.fit2dmaskimage.Fit2dMaskImage",
  "fabio.fit2dmaskimage.__authors__",
  "fabio.fit2dmaskimage.__contact__",
  "fabio.fit2dmaskimage.__copyright__",
  "fabio.fit2dmaskimage.__license__",
  "fabio.fit2dmaskimage.__version__",
  "fabio.fit2dmaskimage.fit2dmaskimage",
  "fabio.fit2dspreadsheetimage",
  "fabio.fit2dspreadsheetimage.Fit2dSpreadsheetImage",
  "fabio.fit2dspreadsheetimage._logger",
  "fabio.fit2dspreadsheetimage.fit2dspreadsheetimage",
  "fabio.getnum",
  "fabio.hdf5image",
  "fabio.hdf5image.Hdf5Frame",
  "fabio.hdf5image.Hdf5Image",
  "fabio.hdf5image.__authors__",
  "fabio.hdf5image.__contact__",
  "fabio.hdf5image.__copyright__",
  "fabio.hdf5image.__date__",
  "fabio.hdf5image.__license__",
  "fabio.hdf5image.h5py",
  "fabio.hdf5image.hdf5image",
  "fabio.hdf5image.logger",
  "fabio.hexversion",
  "fabio.jpeg2kimage",
  "fabio.jpeg2kimage.Jpeg2KImage",
  "fabio.jpeg2kimage.PIL",
  "fabio.jpeg2kimage.__authors__",
  "fabio.jpeg2kimage.__copyright__",
  "fabio.jpeg2kimage.__date__",
  "fabio.jpeg2kimage.__license__",
  "fabio.jpeg2kimage.__status__",
  "fabio.jpeg2kimage.glymur",
  "fabio.jpeg2kimage.jpeg2kimage",
  "fabio.jpeg2kimage.logger",
  "fabio.jpegimage",
  "fabio.jpegimage.Image",
  "fabio.jpegimage.JPEG_RESERVED_HEADER_KEYS",
  "fabio.jpegimage.JpegImage",
  "fabio.jpegimage.__authors__",
  "fabio.jpegimage.__copyright__",
  "fabio.jpegimage.__date__",
  "fabio.jpegimage.__license__",
  "fabio.jpegimage.__status__",
  "fabio.jpegimage.jpegimage",
  "fabio.jpegimage.logger",
  "fabio.jump_filename",
  "fabio.kcdimage",
  "fabio.kcdimage.ALPHANUM",
  "fabio.kcdimage.DATA_TYPES",
  "fabio.kcdimage.DEFAULT_VALUES",
  "fabio.kcdimage.KcdImage",
  "fabio.kcdimage.MINIMUM_KEYS",
  "fabio.kcdimage.SEEK_END",
  "fabio.kcdimage.kcdimage",
  "fabio.kcdimage.logger",
  "fabio.limaimage",
  "fabio.limaimage.LimaImage",
  "fabio.limaimage.__authors__",
  "fabio.limaimage.__contact__",
  "fabio.limaimage.__copyright__",
  "fabio.limaimage.__date__",
  "fabio.limaimage.__license__",
  "fabio.limaimage.h5py",
  "fabio.limaimage.limaimage",
  "fabio.limaimage.logger",
  "fabio.mar345image",
  "fabio.mar345image.Mar345Image",
  "fabio.mar345image.__authors__",
  "fabio.mar345image.__copyright__",
  "fabio.mar345image.__date__",
  "fabio.mar345image.__licence__",
  "fabio.mar345image.__status__",
  "fabio.mar345image.logger",
  "fabio.mar345image.mar345image",
  "fabio.marccdimage",
  "fabio.marccdimage.CDEFINITION",
  "fabio.marccdimage.C_SIZES",
  "fabio.marccdimage.C_TO_STRUCT",
  "fabio.marccdimage.HEADER_FORMAT",
  "fabio.marccdimage.HEADER_NAMES",
  "fabio.marccdimage.MAXIMAGES",
  "fabio.marccdimage.MarccdImage",
  "fabio.marccdimage.interpret_header",
  "fabio.marccdimage.logger",
  "fabio.marccdimage.make_format",
  "fabio.marccdimage.marccdimage",
  "fabio.mpaimage",
  "fabio.mpaimage.MpaImage",
  "fabio.mpaimage.logger",
  "fabio.mpaimage.mpaimage",
  "fabio.mrcimage",
  "fabio.mrcimage.MrcImage",
  "fabio.mrcimage.__authors__",
  "fabio.mrcimage.__contact__",
  "fabio.mrcimage.__copyright__",
  "fabio.mrcimage.__date__",
  "fabio.mrcimage.__license__",
  "fabio.mrcimage.logger",
  "fabio.mrcimage.mrcimage",
  "fabio.next_filename",
  "fabio.nexus",
  "fabio.nexus.Nexus",
  "fabio.nexus.__author__",
  "fabio.nexus.__contact__",
  "fabio.nexus.__copyright__",
  "fabio.nexus.__date__",
  "fabio.nexus.__docformat__",
  "fabio.nexus.__license__",
  "fabio.nexus.__status__",
  "fabio.nexus.error",
  "fabio.nexus.from_isotime",
  "fabio.nexus.get_isotime",
  "fabio.nexus.h5py",
  "fabio.nexus.is_hdf5",
  "fabio.nexus.logger",
  "fabio.numpyimage",
  "fabio.numpyimage.NumpyImage",
  "fabio.numpyimage.__authors__",
  "fabio.numpyimage.__contact__",
  "fabio.numpyimage.__copyright__",
  "fabio.numpyimage.__date__",
  "fabio.numpyimage.__license__",
  "fabio.numpyimage.logger",
  "fabio.numpyimage.numpyimage",
  "fabio.open",
  "fabio.openimage.MAGIC_NUMBERS",
  "fabio.openimage._openimage",
  "fabio.openimage.do_magic",
  "fabio.openimage.logger",
  "fabio.openimage.open_series",
  "fabio.openimage.openheader",
  "fabio.openimage.openimage",
  "fabio.pilatusimage",
  "fabio.pilatusimage.PilatusImage",
  "fabio.pilatusimage.PilatusTiffFrame",
  "fabio.pilatusimage.__authors__",
  "fabio.pilatusimage.__date__",
  "fabio.pilatusimage.__license__",
  "fabio.pilatusimage._logger",
  "fabio.pilatusimage.pilatusimage",
  "fabio.pixiimage",
  "fabio.pixiimage.PixiImage",
  "fabio.pixiimage.__authors__",
  "fabio.pixiimage.__contact__",
  "fabio.pixiimage.__copyright__",
  "fabio.pixiimage.__date__",
  "fabio.pixiimage.__license__",
  "fabio.pixiimage.logger",
  "fabio.pixiimage.pixiimage",
  "fabio.pnmimage",
  "fabio.pnmimage.HEADERITEMS",
  "fabio.pnmimage.P7HEADERITEMS",
  "fabio.pnmimage.PnmImage",
  "fabio.pnmimage.SUBFORMATS",
  "fabio.pnmimage.__authors__",
  "fabio.pnmimage.__copyright__",
  "fabio.pnmimage.__date__",
  "fabio.pnmimage.__license__",
  "fabio.pnmimage.__status__",
  "fabio.pnmimage.logger",
  "fabio.pnmimage.pnmimage",
  "fabio.previous_filename",
  "fabio.project",
  "fabio.raxisimage",
  "fabio.raxisimage.RIGAKU_KEYS",
  "fabio.raxisimage.RaxisImage",
  "fabio.raxisimage.__authors__",
  "fabio.raxisimage.__contact__",
  "fabio.raxisimage.__copyright__",
  "fabio.raxisimage.__date__",
  "fabio.raxisimage.__license__",
  "fabio.raxisimage.logger",
  "fabio.raxisimage.raxisimage",
  "fabio.readbytestream",
  "fabio.readbytestream.DATATYPES",
  "fabio.readbytestream.logger",
  "fabio.readbytestream.readbytestream",
  "fabio.register",
  "fabio.setup",
  "fabio.setup.__authors__",
  "fabio.setup.__date__",
  "fabio.setup.__license__",
  "fabio.setup.configuration",
  "fabio.sparseimage",
  "fabio.sparseimage.SparseImage",
  "fabio.sparseimage.__authors__",
  "fabio.sparseimage.__contact__",
  "fabio.sparseimage.__copyright__",
  "fabio.sparseimage.__date__",
  "fabio.sparseimage.__license__",
  "fabio.sparseimage.cython_densify",
  "fabio.sparseimage.densify",
  "fabio.sparseimage.h5py",
  "fabio.sparseimage.logger",
  "fabio.sparseimage.sparseimage",
  "fabio.speimage",
  "fabio.speimage.SpeImage",
  "fabio.speimage.__authors__",
  "fabio.speimage.__contact__",
  "fabio.speimage.__copyright__",
  "fabio.speimage.__date__",
  "fabio.speimage.__license__",
  "fabio.speimage.logger",
  "fabio.speimage.speimage",
  "fabio.strictversion",
  "fabio.templateimage",
  "fabio.templateimage.TemplateImage",
  "fabio.templateimage.__authors__",
  "fabio.templateimage.__contact__",
  "fabio.templateimage.__copyright__",
  "fabio.templateimage.__date__",
  "fabio.templateimage.__license__",
  "fabio.templateimage.logger",
  "fabio.templateimage.templateimage",
  "fabio.test",
  "fabio.test.__authors__",
  "fabio.test.__contact__",
  "fabio.test.__copyright__",
  "fabio.test.__data__",
  "fabio.test.__license__",
  "fabio.test.codecs",
  "fabio.test.codecs.__authors__",
  "fabio.test.codecs.__contact__",
  "fabio.test.codecs.__copyright__",
  "fabio.test.codecs.__data__",
  "fabio.test.codecs.__license__",
  "fabio.test.codecs.run_tests",
  "fabio.test.codecs.setup",
  "fabio.test.codecs.setup.__authors__",
  "fabio.test.codecs.setup.__date__",
  "fabio.test.codecs.setup.__license__",
  "fabio.test.codecs.setup.configuration",
  "fabio.test.codecs.suite",
  "fabio.test.codecs.test_bruker100image",
  "fabio.test.codecs.test_bruker100image.Bruker100Image",
  "fabio.test.codecs.test_bruker100image.REFIMAGE",
  "fabio.test.codecs.test_bruker100image.TESTIMAGES",
  "fabio.test.codecs.test_bruker100image.TestBruker100",
  "fabio.test.codecs.test_bruker100image._merge_data",
  "fabio.test.codecs.test_bruker100image._split_data",
  "fabio.test.codecs.test_bruker100image.logger",
  "fabio.test.codecs.test_bruker100image.openimage",
  "fabio.test.codecs.test_bruker100image.runner",
  "fabio.test.codecs.test_bruker100image.suite",
  "fabio.test.codecs.test_brukerimage",
  "fabio.test.codecs.test_brukerimage.MYHEADER",
  "fabio.test.codecs.test_brukerimage.MYIMAGE",
  "fabio.test.codecs.test_brukerimage.OVERFLOWS",
  "fabio.test.codecs.test_brukerimage.TESTIMAGES",
  "fabio.test.codecs.test_brukerimage.TestBruker",
  "fabio.test.codecs.test_brukerimage.TestBzipBruker",
  "fabio.test.codecs.test_brukerimage.TestGzipBruker",
  "fabio.test.codecs.test_brukerimage.TestRealImg",
  "fabio.test.codecs.test_brukerimage.logger",
  "fabio.test.codecs.test_brukerimage.runner",
  "fabio.test.codecs.test_brukerimage.suite",
  "fabio.test.codecs.test_cbfimage",
  "fabio.test.codecs.test_cbfimage.CbfImage",
  "fabio.test.codecs.test_cbfimage.TestCbfReader",
  "fabio.test.codecs.test_cbfimage.decByteOffset_cython",
  "fabio.test.codecs.test_cbfimage.decByteOffset_numpy",
  "fabio.test.codecs.test_cbfimage.logger",
  "fabio.test.codecs.test_cbfimage.runner",
  "fabio.test.codecs.test_cbfimage.suite",
  "fabio.test.codecs.test_dm3image",
  "fabio.test.codecs.test_dm3image.Dm3Image",
  "fabio.test.codecs.test_dm3image.TESTIMAGES",
  "fabio.test.codecs.test_dm3image.TestDm3Image",
  "fabio.test.codecs.test_dm3image.__author__",
  "fabio.test.codecs.test_dm3image.__date__",
  "fabio.test.codecs.test_dm3image.logger",
  "fabio.test.codecs.test_dm3image.runner",
  "fabio.test.codecs.test_dm3image.suite",
  "fabio.test.codecs.test_dtrekimage",
  "fabio.test.codecs.test_dtrekimage.DtrekImage",
  "fabio.test.codecs.test_dtrekimage.EdfImage",
  "fabio.test.codecs.test_dtrekimage.TESTIMAGES",
  "fabio.test.codecs.test_dtrekimage.TestDtrekImplementation",
  "fabio.test.codecs.test_dtrekimage.TestMatch",
  "fabio.test.codecs.test_dtrekimage.TestRealSamples",
  "fabio.test.codecs.test_dtrekimage.logger",
  "fabio.test.codecs.test_dtrekimage.runner",
  "fabio.test.codecs.test_dtrekimage.suite",
  "fabio.test.codecs.test_dtrekimage.testutils",
  "fabio.test.codecs.test_edfimage",
  "fabio.test.codecs.test_edfimage.TESTIMAGES",
  "fabio.test.codecs.test_edfimage.TestBadFiles",
  "fabio.test.codecs.test_edfimage.TestBadGzFiles",
  "fabio.test.codecs.test_edfimage.TestBzipEdf",
  "fabio.test.codecs.test_edfimage.TestEdfBadHeader",
  "fabio.test.codecs.test_edfimage.TestEdfCompressedData",
  "fabio.test.codecs.test_edfimage.TestEdfFastRead",
  "fabio.test.codecs.test_edfimage.TestEdfIterator",
  "fabio.test.codecs.test_edfimage.TestEdfMultiFrame",
  "fabio.test.codecs.test_edfimage.TestEdfRegression",
  "fabio.test.codecs.test_edfimage.TestEdfWrite",
  "fabio.test.codecs.test_edfimage.TestEdfs",
  "fabio.test.codecs.test_edfimage.TestFlatEdfs",
  "fabio.test.codecs.test_edfimage.TestGzipEdf",
  "fabio.test.codecs.test_edfimage.TestSphere2SaxsSamples",
  "fabio.test.codecs.test_edfimage.logger",
  "fabio.test.codecs.test_edfimage.runner",
  "fabio.test.codecs.test_edfimage.suite",
  "fabio.test.codecs.test_edfimage_expg",
  "fabio.test.codecs.test_edfimage_expg.EdfBlockBoundaryCases",
  "fabio.test.codecs.test_edfimage_expg.get_data_counts",
  "fabio.test.codecs.test_edfimage_expg.logger",
  "fabio.test.codecs.test_edfimage_expg.open_frame",
  "fabio.test.codecs.test_edfimage_expg.runner",
  "fabio.test.codecs.test_edfimage_expg.suite",
  "fabio.test.codecs.test_edfimage_expg.test_00",
  "fabio.test.codecs.test_eigerimage",
  "fabio.test.codecs.test_eigerimage.EigerImage",
  "fabio.test.codecs.test_eigerimage.TestEiger",
  "fabio.test.codecs.test_eigerimage.h5py",
  "fabio.test.codecs.test_eigerimage.logger",
  "fabio.test.codecs.test_eigerimage.make_hdf5",
  "fabio.test.codecs.test_eigerimage.openimage",
  "fabio.test.codecs.test_eigerimage.runner",
  "fabio.test.codecs.test_eigerimage.suite",
  "fabio.test.codecs.test_esperantoimage",
  "fabio.test.codecs.test_esperantoimage.TestEsperanto",
  "fabio.test.codecs.test_esperantoimage.logger",
  "fabio.test.codecs.test_esperantoimage.runner",
  "fabio.test.codecs.test_esperantoimage.suite",
  "fabio.test.codecs.test_fit2dimage",
  "fabio.test.codecs.test_fit2dimage.TestFit2DImage",
  "fabio.test.codecs.test_fit2dimage.__authors__",
  "fabio.test.codecs.test_fit2dimage.__contact__",
  "fabio.test.codecs.test_fit2dimage.__copyright__",
  "fabio.test.codecs.test_fit2dimage.__date__",
  "fabio.test.codecs.test_fit2dimage.__license__",
  "fabio.test.codecs.test_fit2dimage.fit2dimage",
  "fabio.test.codecs.test_fit2dimage.logger",
  "fabio.test.codecs.test_fit2dimage.runner",
  "fabio.test.codecs.test_fit2dimage.suite",
  "fabio.test.codecs.test_fit2dmaskimage",
  "fabio.test.codecs.test_fit2dmaskimage.TestClickedMask",
  "fabio.test.codecs.test_fit2dmaskimage.TestFaceMask",
  "fabio.test.codecs.test_fit2dmaskimage.TestMskWrite",
  "fabio.test.codecs.test_fit2dmaskimage.fit2dmaskimage",
  "fabio.test.codecs.test_fit2dmaskimage.logger",
  "fabio.test.codecs.test_fit2dmaskimage.runner",
  "fabio.test.codecs.test_fit2dmaskimage.suite",
  "fabio.test.codecs.test_fit2dspreadsheetimage",
  "fabio.test.codecs.test_fit2dspreadsheetimage.Fit2dSpreadsheetImage",
  "fabio.test.codecs.test_fit2dspreadsheetimage.TESTIMAGES",
  "fabio.test.codecs.test_fit2dspreadsheetimage.TestRealSamples",
  "fabio.test.codecs.test_fit2dspreadsheetimage.logger",
  "fabio.test.codecs.test_fit2dspreadsheetimage.runner",
  "fabio.test.codecs.test_fit2dspreadsheetimage.suite",
  "fabio.test.codecs.test_fit2dspreadsheetimage.testutils",
  "fabio.test.codecs.test_geimage",
  "fabio.test.codecs.test_geimage.GEimage",
  "fabio.test.codecs.test_geimage.TestGE",
  "fabio.test.codecs.test_geimage.logger",
  "fabio.test.codecs.test_geimage.runner",
  "fabio.test.codecs.test_geimage.suite",
  "fabio.test.codecs.test_hdf5image",
  "fabio.test.codecs.test_hdf5image.Hdf5Image",
  "fabio.test.codecs.test_hdf5image.TestHdf5",
  "fabio.test.codecs.test_hdf5image.exists",
  "fabio.test.codecs.test_hdf5image.h5py",
  "fabio.test.codecs.test_hdf5image.logger",
  "fabio.test.codecs.test_hdf5image.make_hdf5",
  "fabio.test.codecs.test_hdf5image.openimage",
  "fabio.test.codecs.test_hdf5image.runner",
  "fabio.test.codecs.test_hdf5image.suite",
  "fabio.test.codecs.test_jpeg2kimage",
  "fabio.test.codecs.test_jpeg2kimage.Image",
  "fabio.test.codecs.test_jpeg2kimage.TestJpeg2KImage",
  "fabio.test.codecs.test_jpeg2kimage.isGlymurUsable",
  "fabio.test.codecs.test_jpeg2kimage.isPilUsable",
  "fabio.test.codecs.test_jpeg2kimage.logger",
  "fabio.test.codecs.test_jpeg2kimage.runner",
  "fabio.test.codecs.test_jpeg2kimage.suite",
  "fabio.test.codecs.test_jpegimage",
  "fabio.test.codecs.test_jpegimage.TEST_DIRECTORY",
  "fabio.test.codecs.test_jpegimage.TestJpegImage",
  "fabio.test.codecs.test_jpegimage.TestPilNotAvailable",
  "fabio.test.codecs.test_jpegimage.logger",
  "fabio.test.codecs.test_jpegimage.runner",
  "fabio.test.codecs.test_jpegimage.setUpModule",
  "fabio.test.codecs.test_jpegimage.suite",
  "fabio.test.codecs.test_jpegimage.tearDownModule",
  "fabio.test.codecs.test_kcdimage",
  "fabio.test.codecs.test_kcdimage.TestKcd",
  "fabio.test.codecs.test_kcdimage.logger",
  "fabio.test.codecs.test_kcdimage.runner",
  "fabio.test.codecs.test_kcdimage.suite",
  "fabio.test.codecs.test_limaimage",
  "fabio.test.codecs.test_limaimage.LimaImage",
  "fabio.test.codecs.test_limaimage.TestLima",
  "fabio.test.codecs.test_limaimage.h5py",
  "fabio.test.codecs.test_limaimage.logger",
  "fabio.test.codecs.test_limaimage.make_hdf5",
  "fabio.test.codecs.test_limaimage.openimage",
  "fabio.test.codecs.test_limaimage.runner",
  "fabio.test.codecs.test_limaimage.suite",
  "fabio.test.codecs.test_mar345image",
  "fabio.test.codecs.test_mar345image.TESTIMAGES",
  "fabio.test.codecs.test_mar345image.TestMar345",
  "fabio.test.codecs.test_mar345image.logger",
  "fabio.test.codecs.test_mar345image.mar345image",
  "fabio.test.codecs.test_mar345image.runner",
  "fabio.test.codecs.test_mar345image.suite",
  "fabio.test.codecs.test_mccdimage",
  "fabio.test.codecs.test_mccdimage.TESTIMAGES",
  "fabio.test.codecs.test_mccdimage.TestFlatMccds",
  "fabio.test.codecs.test_mccdimage.TestNormalTiffOK",
  "fabio.test.codecs.test_mccdimage.logger",
  "fabio.test.codecs.test_mccdimage.runner",
  "fabio.test.codecs.test_mccdimage.suite",
  "fabio.test.codecs.test_mpaimage",
  "fabio.test.codecs.test_mpaimage.TestMpa",
  "fabio.test.codecs.test_mpaimage.logger",
  "fabio.test.codecs.test_mpaimage.runner",
  "fabio.test.codecs.test_mpaimage.suite",
  "fabio.test.codecs.test_mrcimage",
  "fabio.test.codecs.test_mrcimage.TestMrc",
  "fabio.test.codecs.test_mrcimage.logger",
  "fabio.test.codecs.test_mrcimage.runner",
  "fabio.test.codecs.test_mrcimage.suite",
  "fabio.test.codecs.test_numpyimage",
  "fabio.test.codecs.test_numpyimage.NumpyImage",
  "fabio.test.codecs.test_numpyimage.TestNumpy",
  "fabio.test.codecs.test_numpyimage.__author__",
  "fabio.test.codecs.test_numpyimage.__date__",
  "fabio.test.codecs.test_numpyimage.logger",
  "fabio.test.codecs.test_numpyimage.openimage",
  "fabio.test.codecs.test_numpyimage.runner",
  "fabio.test.codecs.test_numpyimage.suite",
  "fabio.test.codecs.test_oxdimage",
  "fabio.test.codecs.test_oxdimage.OXDimage",
  "fabio.test.codecs.test_oxdimage.TESTIMAGES",
  "fabio.test.codecs.test_oxdimage.TestConvert",
  "fabio.test.codecs.test_oxdimage.TestOxd",
  "fabio.test.codecs.test_oxdimage.__author__",
  "fabio.test.codecs.test_oxdimage.__contact__",
  "fabio.test.codecs.test_oxdimage.__date__",
  "fabio.test.codecs.test_oxdimage.__license__",
  "fabio.test.codecs.test_oxdimage.logger",
  "fabio.test.codecs.test_oxdimage.runner",
  "fabio.test.codecs.test_oxdimage.suite",
  "fabio.test.codecs.test_pilatusimage",
  "fabio.test.codecs.test_pilatusimage.TestPilatus",
  "fabio.test.codecs.test_pilatusimage.logger",
  "fabio.test.codecs.test_pilatusimage.runner",
  "fabio.test.codecs.test_pilatusimage.suite",
  "fabio.test.codecs.test_pixiimage",
  "fabio.test.codecs.test_pixiimage.TestPixiImage",
  "fabio.test.codecs.test_pixiimage.logger",
  "fabio.test.codecs.test_pixiimage.runner",
  "fabio.test.codecs.test_pixiimage.suite",
  "fabio.test.codecs.test_pnmimage",
  "fabio.test.codecs.test_pnmimage.TestPNM",
  "fabio.test.codecs.test_pnmimage.__author__",
  "fabio.test.codecs.test_pnmimage.__date__",
  "fabio.test.codecs.test_pnmimage.logger",
  "fabio.test.codecs.test_pnmimage.openimage",
  "fabio.test.codecs.test_pnmimage.pnmimage",
  "fabio.test.codecs.test_pnmimage.runner",
  "fabio.test.codecs.test_pnmimage.suite",
  "fabio.test.codecs.test_raxisimage",
  "fabio.test.codecs.test_raxisimage.TESTIMAGES",
  "fabio.test.codecs.test_raxisimage.TestRaxisImage",
  "fabio.test.codecs.test_raxisimage.__date__",
  "fabio.test.codecs.test_raxisimage.logger",
  "fabio.test.codecs.test_raxisimage.raxisimage",
  "fabio.test.codecs.test_raxisimage.runner",
  "fabio.test.codecs.test_raxisimage.suite",
  "fabio.test.codecs.test_speimage",
  "fabio.test.codecs.test_speimage.SpeImage",
  "fabio.test.codecs.test_speimage.TestSpeImage",
  "fabio.test.codecs.test_speimage.__authors__",
  "fabio.test.codecs.test_speimage.__contact__",
  "fabio.test.codecs.test_speimage.__copyright__",
  "fabio.test.codecs.test_speimage.__date__",
  "fabio.test.codecs.test_speimage.__license__",
  "fabio.test.codecs.test_speimage.logger",
  "fabio.test.codecs.test_speimage.runner",
  "fabio.test.codecs.test_speimage.suite",
  "fabio.test.codecs.test_tifimage",
  "fabio.test.codecs.test_tifimage.TestGzipTif",
  "fabio.test.codecs.test_tifimage.TestTif",
  "fabio.test.codecs.test_tifimage.logger",
  "fabio.test.codecs.test_tifimage.runner",
  "fabio.test.codecs.test_tifimage.suite",
  "fabio.test.codecs.test_tifimage.tifimage",
  "fabio.test.codecs.test_xsdimage",
  "fabio.test.codecs.test_xsdimage.TESTIMAGES",
  "fabio.test.codecs.test_xsdimage.TestXSD",
  "fabio.test.codecs.test_xsdimage.logger",
  "fabio.test.codecs.test_xsdimage.runner",
  "fabio.test.codecs.test_xsdimage.suite",
  "fabio.test.profile_all",
  "fabio.test.profile_all.ProfileTestRunner",
  "fabio.test.profile_all.TestResult",
  "fabio.test.profile_all.__authors__",
  "fabio.test.profile_all.__contact__",
  "fabio.test.profile_all.__copyright__",
  "fabio.test.profile_all.__date__",
  "fabio.test.profile_all.__license__",
  "fabio.test.profile_all.profiler",
  "fabio.test.profile_all.runner",
  "fabio.test.profile_all.suite",
  "fabio.test.profile_all.testresult",
  "fabio.test.run_tests",
  "fabio.test.setup",
  "fabio.test.setup.__authors__",
  "fabio.test.setup.__date__",
  "fabio.test.setup.__license__",
  "fabio.test.setup.configuration",
  "fabio.test.suite",
  "fabio.test.test_agi_bitfield",
  "fabio.test.test_agi_bitfield.TestCompression",
  "fabio.test.test_agi_bitfield.TestRow",
  "fabio.test.test_agi_bitfield.TestUtil",
  "fabio.test.test_agi_bitfield.__author__",
  "fabio.test.test_agi_bitfield.__contact__",
  "fabio.test.test_agi_bitfield.__copyright__",
  "fabio.test.test_agi_bitfield.__date__",
  "fabio.test.test_agi_bitfield.__license__",
  "fabio.test.test_agi_bitfield.logger",
  "fabio.test.test_agi_bitfield.runner",
  "fabio.test.test_agi_bitfield.suite",
  "fabio.test.test_all",
  "fabio.test.test_all.logger",
  "fabio.test.test_all.runner",
  "fabio.test.test_all.suite",
  "fabio.test.test_all_images",
  "fabio.test.test_all_images.MB",
  "fabio.test.test_all_images.fim",
  "fabio.test.test_all_images.fname",
  "fabio.test.test_all_images.im",
  "fabio.test.test_all_images.images",
  "fabio.test.test_all_images.ns",
  "fabio.test.test_all_images.nt",
  "fabio.test.test_all_images.p",
  "fabio.test.test_all_images.s",
  "fabio.test.test_all_images.shellbench",
  "fabio.test.test_all_images.start",
  "fabio.test.test_all_images.the_file",
  "fabio.test.test_all_images.times",
  "fabio.test.test_compression",
  "fabio.test.test_compression.TestByteOffset",
  "fabio.test.test_compression.__authors__",
  "fabio.test.test_compression.__contact__",
  "fabio.test.test_compression.__copyright__",
  "fabio.test.test_compression.__date__",
  "fabio.test.test_compression.__license__",
  "fabio.test.test_compression.compression",
  "fabio.test.test_compression.logger",
  "fabio.test.test_compression.runner",
  "fabio.test.test_compression.suite",
  "fabio.test.test_densification",
  "fabio.test.test_densification.TestDensification",
  "fabio.test.test_densification.__authors__",
  "fabio.test.test_densification.__contact__",
  "fabio.test.test_densification.__copyright__",
  "fabio.test.test_densification.__date__",
  "fabio.test.test_densification.__license__",
  "fabio.test.test_densification.logger",
  "fabio.test.test_densification.runner",
  "fabio.test.test_densification.suite",
  "fabio.test.test_fabio",
  "fabio.test.test_fabio.TestFabio",
  "fabio.test.test_fabio.logger",
  "fabio.test.test_fabio.runner",
  "fabio.test.test_fabio.suite",
  "fabio.test.test_fabio_convert",
  "fabio.test.test_fabio_convert.TestFabioConvert",
  "fabio.test.test_fabio_convert._logger",
  "fabio.test.test_fabio_convert.runner",
  "fabio.test.test_fabio_convert.suite",
  "fabio.test.test_fabio_image",
  "fabio.test.test_fabio_image.Test50000",
  "fabio.test.test_fabio_image.TestDeprecatedFabioImage",
  "fabio.test.test_fabio_image.TestFabioImage",
  "fabio.test.test_fabio_image.TestOpen",
  "fabio.test.test_fabio_image.TestPilImage",
  "fabio.test.test_fabio_image.TestSlices",
  "fabio.test.test_fabio_image.logger",
  "fabio.test.test_fabio_image.pathlib",
  "fabio.test.test_fabio_image.runner",
  "fabio.test.test_fabio_image.suite",
  "fabio.test.test_failing_files",
  "fabio.test.test_failing_files.TestFailingFiles",
  "fabio.test.test_failing_files.runner",
  "fabio.test.test_failing_files.suite",
  "fabio.test.test_file_series",
  "fabio.test.test_file_series.FileSeries",
  "fabio.test.test_file_series.TestEdfNumbered",
  "fabio.test.test_file_series.TestFileSeries",
  "fabio.test.test_file_series.TestRandomSeries",
  "fabio.test.test_file_series.file_series",
  "fabio.test.test_file_series.filename_series",
  "fabio.test.test_file_series.logger",
  "fabio.test.test_file_series.numbered_file_series",
  "fabio.test.test_file_series.runner",
  "fabio.test.test_file_series.suite",
  "fabio.test.test_filename_steps",
  "fabio.test.test_filename_steps.TestJump",
  "fabio.test.test_filename_steps.TestNext",
  "fabio.test.test_filename_steps.TestPrev",
  "fabio.test.test_filename_steps.logger",
  "fabio.test.test_filename_steps.runner",
  "fabio.test.test_filename_steps.suite",
  "fabio.test.test_filenames",
  "fabio.test.test_filenames.CASES",
  "fabio.test.test_filenames.MORE_CASES",
  "fabio.test.test_filenames.TestFilenameObjects",
  "fabio.test.test_filenames.TestFilenames",
  "fabio.test.test_filenames.logger",
  "fabio.test.test_filenames.runner",
  "fabio.test.test_filenames.suite",
  "fabio.test.test_flat_binary",
  "fabio.test.test_flat_binary.TestFlatBinary",
  "fabio.test.test_flat_binary.logger",
  "fabio.test.test_flat_binary.runner",
  "fabio.test.test_flat_binary.suite",
  "fabio.test.test_formats",
  "fabio.test.test_formats.TestRegistration",
  "fabio.test.test_formats.logger",
  "fabio.test.test_formats.runner",
  "fabio.test.test_formats.suite",
  "fabio.test.test_frames",
  "fabio.test.test_frames.TestEdf",
  "fabio.test.test_frames.TestFabioImage",
  "fabio.test.test_frames.TestFileSeries",
  "fabio.test.test_frames.TestTiff",
  "fabio.test.test_frames.TestVirtualEdf",
  "fabio.test.test_frames._CommonTestFrames",
  "fabio.test.test_frames.logger",
  "fabio.test.test_frames.runner",
  "fabio.test.test_frames.suite",
  "fabio.test.test_header_not_singleton",
  "fabio.test.test_header_not_singleton.TestHeaderNotSingleton",
  "fabio.test.test_header_not_singleton.logger",
  "fabio.test.test_header_not_singleton.runner",
  "fabio.test.test_header_not_singleton.suite",
  "fabio.test.test_image_convert",
  "fabio.test.test_image_convert.TestImageConvert",
  "fabio.test.test_image_convert.logger",
  "fabio.test.test_image_convert.runner",
  "fabio.test.test_image_convert.suite",
  "fabio.test.test_nexus",
  "fabio.test.test_nexus.TestNexus",
  "fabio.test.test_nexus.logger",
  "fabio.test.test_nexus.runner",
  "fabio.test.test_nexus.suite",
  "fabio.test.test_open_header",
  "fabio.test.test_open_header.Test1",
  "fabio.test.test_open_header.logger",
  "fabio.test.test_open_header.openheader",
  "fabio.test.test_open_header.runner",
  "fabio.test.test_open_header.suite",
  "fabio.test.test_open_image",
  "fabio.test.test_open_image.BrukerImage",
  "fabio.test.test_open_image.DtrekImage",
  "fabio.test.test_open_image.EdfImage",
  "fabio.test.test_open_image.Fit2dMaskImage",
  "fabio.test.test_open_image.MarccdImage",
  "fabio.test.test_open_image.OXDimage",
  "fabio.test.test_open_image.TestOpenBruker",
  "fabio.test.test_open_image.TestOpenDtrek",
  "fabio.test.test_open_image.TestOpenEdf",
  "fabio.test.test_open_image.TestOpenMask",
  "fabio.test.test_open_image.TestOpenMccd",
  "fabio.test.test_open_image.TestOpenOxd",
  "fabio.test.test_open_image.logger",
  "fabio.test.test_open_image.openimage",
  "fabio.test.test_open_image.runner",
  "fabio.test.test_open_image.suite",
  "fabio.test.test_tiffio",
  "fabio.test.test_tiffio.TestTiffIO",
  "fabio.test.test_tiffio.logger",
  "fabio.test.test_tiffio.runner",
  "fabio.test.test_tiffio.suite",
  "fabio.test.utilstest",
  "fabio.test.utilstest.DATA_KEY",
  "fabio.test.utilstest.PACKAGE",
  "fabio.test.utilstest.TEST_HOME",
  "fabio.test.utilstest.TestOptions",
  "fabio.test.utilstest.UtilsTest",
  "fabio.test.utilstest.__author__",
  "fabio.test.utilstest.__contact__",
  "fabio.test.utilstest.__copyright__",
  "fabio.test.utilstest.__date__",
  "fabio.test.utilstest.__license__",
  "fabio.test.utilstest.logger",
  "fabio.test.utilstest.test_options",
  "fabio.tests",
  "fabio.third_party",
  "fabio.third_party._local",
  "fabio.third_party._local.setup",
  "fabio.third_party._local.setup.__authors__",
  "fabio.third_party._local.setup.__date__",
  "fabio.third_party._local.setup.__license__",
  "fabio.third_party._local.setup.configuration",
  "fabio.third_party.setup",
  "fabio.third_party.setup.__authors__",
  "fabio.third_party.setup.__date__",
  "fabio.third_party.setup.__license__",
  "fabio.third_party.setup.configuration",
  "fabio.tifimage",
  "fabio.tifimage.PIL",
  "fabio.tifimage.TifImage",
  "fabio.tifimage.TiffFrame",
  "fabio.tifimage._USE_PIL",
  "fabio.tifimage._USE_TIFFIO",
  "fabio.tifimage.__authors__",
  "fabio.tifimage.__copyright__",
  "fabio.tifimage.__date__",
  "fabio.tifimage.__license__",
  "fabio.tifimage.__status__",
  "fabio.tifimage.logger",
  "fabio.tifimage.tifimage",
  "fabio.utils",
  "fabio.utils.ExternalResources",
  "fabio.utils.ExternalResources.ExternalResources",
  "fabio.utils.ExternalResources.__authors__",
  "fabio.utils.ExternalResources.__date__",
  "fabio.utils.ExternalResources.__license__",
  "fabio.utils.ExternalResources.logger",
  "fabio.utils.deprecation",
  "fabio.utils.deprecation._PATTERN",
  "fabio.utils.deprecation.__authors__",
  "fabio.utils.deprecation.__date__",
  "fabio.utils.deprecation.__license__",
  "fabio.utils.deprecation.deprecache",
  "fabio.utils.deprecation.deprecated",
  "fabio.utils.deprecation.depreclog",
  "fabio.utils.deprecation.hexversion_fromstring",
  "fabio.utils.mathutils",
  "fabio.utils.mathutils.deg2rad",
  "fabio.utils.mathutils.naive_deg2rad",
  "fabio.utils.mathutils.naive_rad2deg",
  "fabio.utils.mathutils.rad2deg",
  "fabio.utils.pilutils",
  "fabio.utils.pilutils.Image",
  "fabio.utils.pilutils.NUMPY_TO_PIL",
  "fabio.utils.pilutils.PIL_TO_NUMPY",
  "fabio.utils.pilutils.__authors__",
  "fabio.utils.pilutils.__copyright__",
  "fabio.utils.pilutils.__date__",
  "fabio.utils.pilutils.__license__",
  "fabio.utils.pilutils.__status__",
  "fabio.utils.pilutils.create_pil_16",
  "fabio.utils.pilutils.get_numpy_array",
  "fabio.utils.pilutils.logger",
  "fabio.utils.setup",
  "fabio.utils.setup.__authors__",
  "fabio.utils.setup.__date__",
  "fabio.utils.setup.__license__",
  "fabio.utils.setup.configuration",
  "fabio.utils.testutils",
  "fabio.utils.testutils.EnsureImportError",
  "fabio.utils.testutils.ParametricTestCase",
  "fabio.utils.testutils.TestLogging",
  "fabio.utils.testutils.__authors__",
  "fabio.utils.testutils.__date__",
  "fabio.utils.testutils.__license__",
  "fabio.utils.testutils._logger",
  "fabio.utils.testutils.parameterize",
  "fabio.utils.testutils.test_logging",
  "fabio.version",
  "fabio.version_info",
  "fabio.xsdimage",
  "fabio.xsdimage.XsdImage",
  "fabio.xsdimage.__author__",
  "fabio.xsdimage.__contact__",
  "fabio.xsdimage.__copyright__",
  "fabio.xsdimage.__license__",
  "fabio.xsdimage.etree",
  "fabio.xsdimage.logger",
  "fabio.xsdimage.xsdimage"
 ]
}