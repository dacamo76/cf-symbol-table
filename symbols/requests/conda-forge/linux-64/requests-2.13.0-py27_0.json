{
 "errors": {
  "requests.packages.urllib3.request": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 110, in wrapper",
    "    return dct[key]",
    "KeyError: ((), frozenset())",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/types.py')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 34, in single_file_extraction",
    "    data = jedi.Script(path=file_name, project=jedi.Project(''.join(top_dir))).complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 245, in get_executed_param_names",
    "    return get_executed_param_names_and_issues(function_value, arguments)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 100, in get_executed_param_names_and_issues",
    "    unpacked_va = list(arguments.unpack(funcdef))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 614, in unpack",
    "    yield from self._wrapped_arguments.unpack(func)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/arguments.py\", line 193, in unpack",
    "    arrays = self.context.infer_node(el)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 91, in dynamic_param_lookup",
    "    arguments_list = _search_function_arguments(module_context, funcdef, string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 140, in _search_function_arguments",
    "    inference_state, random_context, compare_node, name, trailer):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 197, in _check_name_for_execution",
    "    for value in inference_state.infer(context, name):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 180, in infer",
    "    return helpers.infer_call_of_leaf(context, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 107, in infer_call_of_leaf",
    "    values = infer_trailer(context, values, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 336, in _get_annotated_class_object",
    "    or not signature.matches_signature(args):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in matches_signature",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in <genexpr>",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 33, in matches_signature",
    "    argument_values = self.infer().py__class__()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in py__class__",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in <genexpr>",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 332, in __getattr__",
    "    return getattr(self._wrapped_value, name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 67, in wrapper",
    "    return func(*args, **kwds)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/cache.py\", line 112, in wrapper",
    "    result = method(self, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 340, in _wrapped_value",
    "    return self._get_wrapped_value()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 203, in _get_wrapped_value",
    "    TupleGenericManager(self._cached_generics())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 195, in _cached_generics",
    "    return self._get_generics()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 180, in _get_generics",
    "    return tuple(c_set.py__class__() for c_set in self.get_mapping_item_values())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 253, in get_mapping_item_values",
    "    return self._dict_keys(), self._dict_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 546, in _dict_values",
    "    return ValueSet.from_sets(lazy_value.infer() for lazy_value in self._dct.values())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/iterable.py\", line 546, in <genexpr>",
    "    return ValueSet.from_sets(lazy_value.infer() for lazy_value in self._dct.values())",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 514, in infer",
    "    return super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 552, in wrapper",
    "    return ValueSet(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/klass.py\", line 72, in infer",
    "    yield from result_value.py__get__(instance=None, class_value=self._class_value)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/decorator.py\", line 20, in py__get__",
    "    for v in self._wrapped_value.py__get__(instance, class_value)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 349, in py__get__",
    "    for __get__ in self._wrapped_value.py__getattribute__('__get__')",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 79, in py__getattribute__",
    "    names = self.goto(name_or_str, name_context, analysis_errors)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 68, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 35, in filter_name",
    "    for filter in filters:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 58, in _get_value_filters",
    "    yield from self.get_filters(origin_scope=origin_scope)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 178, in get_filters",
    "    class_value = self.get_annotated_class_object()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 352, in get_annotated_class_object",
    "    return self._get_annotated_class_object() or self.class_value",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 336, in _get_annotated_class_object",
    "    or not signature.matches_signature(args):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in matches_signature",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/signature.py\", line 110, in <genexpr>",
    "    for executed_param_name in executed_param_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 33, in matches_signature",
    "    argument_values = self.infer().py__class__()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in py__class__",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 410, in __init__",
    "    self._set = frozenset(iterable)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 472, in <genexpr>",
    "    return ValueSet(c.py__class__() for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 162, in py__class__",
    "    c, = values_from_qualified_names(self.inference_state, 'types', 'FunctionType')",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/helpers.py\", line 191, in values_from_qualified_names",
    "    return inference_state.import_module(names[:-1]).py__getattribute__(names[-1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 112, in import_module",
    "    self, import_names, sys_path, prefer_stubs=prefer_stubs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in wrapper",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 119, in <genexpr>",
    "    for p in parent_module_values",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 456, in import_module",
    "    is_package=is_pkg,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 472, in _load_python_module",
    "    cache_path=settings.cache_directory,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "requests.ConnectTimeout",
  "requests.ConnectionError",
  "requests.DependencyWarning",
  "requests.FileModeWarning",
  "requests.HTTPError",
  "requests.NullHandler",
  "requests.PreparedRequest",
  "requests.ReadTimeout",
  "requests.Request",
  "requests.Response",
  "requests.Session",
  "requests.Timeout",
  "requests.TooManyRedirects",
  "requests.URLRequired",
  "requests.__author__",
  "requests.__build__",
  "requests.__copyright__",
  "requests.__license__",
  "requests.__title__",
  "requests.__version__",
  "requests._internal_utils",
  "requests._internal_utils.to_native_string",
  "requests._internal_utils.unicode_is_ascii",
  "requests.adapters",
  "requests.adapters.BaseAdapter",
  "requests.adapters.DEFAULT_POOLBLOCK",
  "requests.adapters.DEFAULT_POOLSIZE",
  "requests.adapters.DEFAULT_POOL_TIMEOUT",
  "requests.adapters.DEFAULT_RETRIES",
  "requests.adapters.HTTPAdapter",
  "requests.adapters.SOCKSProxyManager",
  "requests.api",
  "requests.api.delete",
  "requests.api.get",
  "requests.api.head",
  "requests.api.options",
  "requests.api.patch",
  "requests.api.post",
  "requests.api.put",
  "requests.api.request",
  "requests.auth",
  "requests.auth.AuthBase",
  "requests.auth.CONTENT_TYPE_FORM_URLENCODED",
  "requests.auth.CONTENT_TYPE_MULTI_PART",
  "requests.auth.HTTPBasicAuth",
  "requests.auth.HTTPDigestAuth",
  "requests.auth.HTTPProxyAuth",
  "requests.auth._basic_auth_str",
  "requests.certs",
  "requests.certs.where",
  "requests.codes",
  "requests.compat",
  "requests.compat._ver",
  "requests.compat.basestring",
  "requests.compat.builtin_str",
  "requests.compat.bytes",
  "requests.compat.integer_types",
  "requests.compat.is_py2",
  "requests.compat.is_py3",
  "requests.compat.numeric_types",
  "requests.compat.str",
  "requests.cookies",
  "requests.cookies.CookieConflictError",
  "requests.cookies.MockRequest",
  "requests.cookies.MockResponse",
  "requests.cookies.RequestsCookieJar",
  "requests.cookies._copy_cookie_jar",
  "requests.cookies.cookiejar_from_dict",
  "requests.cookies.create_cookie",
  "requests.cookies.extract_cookies_to_jar",
  "requests.cookies.get_cookie_header",
  "requests.cookies.merge_cookies",
  "requests.cookies.morsel_to_cookie",
  "requests.cookies.remove_cookie_by_name",
  "requests.delete",
  "requests.exceptions",
  "requests.exceptions.ChunkedEncodingError",
  "requests.exceptions.ConnectTimeout",
  "requests.exceptions.ConnectionError",
  "requests.exceptions.ContentDecodingError",
  "requests.exceptions.FileModeWarning",
  "requests.exceptions.HTTPError",
  "requests.exceptions.InvalidHeader",
  "requests.exceptions.InvalidSchema",
  "requests.exceptions.InvalidURL",
  "requests.exceptions.MissingSchema",
  "requests.exceptions.ProxyError",
  "requests.exceptions.ReadTimeout",
  "requests.exceptions.RequestException",
  "requests.exceptions.RequestsWarning",
  "requests.exceptions.RetryError",
  "requests.exceptions.SSLError",
  "requests.exceptions.StreamConsumedError",
  "requests.exceptions.Timeout",
  "requests.exceptions.TooManyRedirects",
  "requests.exceptions.URLRequired",
  "requests.exceptions.UnrewindableBodyError",
  "requests.get",
  "requests.head",
  "requests.hooks",
  "requests.hooks.HOOKS",
  "requests.hooks.default_hooks",
  "requests.hooks.dispatch_hook",
  "requests.models",
  "requests.models.CONTENT_CHUNK_SIZE",
  "requests.models.DEFAULT_REDIRECT_LIMIT",
  "requests.models.ITER_CHUNK_SIZE",
  "requests.models.PreparedRequest",
  "requests.models.REDIRECT_STATI",
  "requests.models.Request",
  "requests.models.Response",
  "requests.options",
  "requests.packages",
  "requests.packages.chardet.__version__",
  "requests.packages.chardet.big5freq",
  "requests.packages.chardet.big5freq.BIG5_TABLE_SIZE",
  "requests.packages.chardet.big5freq.BIG5_TYPICAL_DISTRIBUTION_RATIO",
  "requests.packages.chardet.big5freq.Big5CharToFreqOrder",
  "requests.packages.chardet.big5prober",
  "requests.packages.chardet.big5prober.Big5Prober",
  "requests.packages.chardet.chardetect",
  "requests.packages.chardet.chardetect.description_of",
  "requests.packages.chardet.chardetect.main",
  "requests.packages.chardet.chardistribution",
  "requests.packages.chardet.chardistribution.Big5DistributionAnalysis",
  "requests.packages.chardet.chardistribution.CharDistributionAnalysis",
  "requests.packages.chardet.chardistribution.ENOUGH_DATA_THRESHOLD",
  "requests.packages.chardet.chardistribution.EUCJPDistributionAnalysis",
  "requests.packages.chardet.chardistribution.EUCKRDistributionAnalysis",
  "requests.packages.chardet.chardistribution.EUCTWDistributionAnalysis",
  "requests.packages.chardet.chardistribution.GB2312DistributionAnalysis",
  "requests.packages.chardet.chardistribution.MINIMUM_DATA_THRESHOLD",
  "requests.packages.chardet.chardistribution.SJISDistributionAnalysis",
  "requests.packages.chardet.chardistribution.SURE_NO",
  "requests.packages.chardet.chardistribution.SURE_YES",
  "requests.packages.chardet.charsetgroupprober",
  "requests.packages.chardet.charsetgroupprober.CharSetGroupProber",
  "requests.packages.chardet.charsetprober",
  "requests.packages.chardet.charsetprober.CharSetProber",
  "requests.packages.chardet.codingstatemachine",
  "requests.packages.chardet.codingstatemachine.CodingStateMachine",
  "requests.packages.chardet.compat",
  "requests.packages.chardet.compat.base_str",
  "requests.packages.chardet.compat.wrap_ord",
  "requests.packages.chardet.constants",
  "requests.packages.chardet.constants.SHORTCUT_THRESHOLD",
  "requests.packages.chardet.constants._debug",
  "requests.packages.chardet.constants.eDetecting",
  "requests.packages.chardet.constants.eError",
  "requests.packages.chardet.constants.eFoundIt",
  "requests.packages.chardet.constants.eItsMe",
  "requests.packages.chardet.constants.eNotMe",
  "requests.packages.chardet.constants.eStart",
  "requests.packages.chardet.cp949prober",
  "requests.packages.chardet.cp949prober.CP949Prober",
  "requests.packages.chardet.detect",
  "requests.packages.chardet.escprober",
  "requests.packages.chardet.escprober.EscCharSetProber",
  "requests.packages.chardet.escsm",
  "requests.packages.chardet.escsm.HZCharLenTable",
  "requests.packages.chardet.escsm.HZSMModel",
  "requests.packages.chardet.escsm.HZ_cls",
  "requests.packages.chardet.escsm.HZ_st",
  "requests.packages.chardet.escsm.ISO2022CNCharLenTable",
  "requests.packages.chardet.escsm.ISO2022CNSMModel",
  "requests.packages.chardet.escsm.ISO2022CN_cls",
  "requests.packages.chardet.escsm.ISO2022CN_st",
  "requests.packages.chardet.escsm.ISO2022JPCharLenTable",
  "requests.packages.chardet.escsm.ISO2022JPSMModel",
  "requests.packages.chardet.escsm.ISO2022JP_cls",
  "requests.packages.chardet.escsm.ISO2022JP_st",
  "requests.packages.chardet.escsm.ISO2022KRCharLenTable",
  "requests.packages.chardet.escsm.ISO2022KRSMModel",
  "requests.packages.chardet.escsm.ISO2022KR_cls",
  "requests.packages.chardet.escsm.ISO2022KR_st",
  "requests.packages.chardet.eucjpprober",
  "requests.packages.chardet.eucjpprober.EUCJPProber",
  "requests.packages.chardet.euckrfreq",
  "requests.packages.chardet.euckrfreq.EUCKRCharToFreqOrder",
  "requests.packages.chardet.euckrfreq.EUCKR_TABLE_SIZE",
  "requests.packages.chardet.euckrfreq.EUCKR_TYPICAL_DISTRIBUTION_RATIO",
  "requests.packages.chardet.euckrprober",
  "requests.packages.chardet.euckrprober.EUCKRProber",
  "requests.packages.chardet.euctwfreq",
  "requests.packages.chardet.euctwfreq.EUCTWCharToFreqOrder",
  "requests.packages.chardet.euctwfreq.EUCTW_TABLE_SIZE",
  "requests.packages.chardet.euctwfreq.EUCTW_TYPICAL_DISTRIBUTION_RATIO",
  "requests.packages.chardet.euctwprober",
  "requests.packages.chardet.euctwprober.EUCTWProber",
  "requests.packages.chardet.gb2312freq",
  "requests.packages.chardet.gb2312freq.GB2312CharToFreqOrder",
  "requests.packages.chardet.gb2312freq.GB2312_TABLE_SIZE",
  "requests.packages.chardet.gb2312freq.GB2312_TYPICAL_DISTRIBUTION_RATIO",
  "requests.packages.chardet.gb2312prober",
  "requests.packages.chardet.gb2312prober.GB2312Prober",
  "requests.packages.chardet.hebrewprober",
  "requests.packages.chardet.hebrewprober.FINAL_KAF",
  "requests.packages.chardet.hebrewprober.FINAL_MEM",
  "requests.packages.chardet.hebrewprober.FINAL_NUN",
  "requests.packages.chardet.hebrewprober.FINAL_PE",
  "requests.packages.chardet.hebrewprober.FINAL_TSADI",
  "requests.packages.chardet.hebrewprober.HebrewProber",
  "requests.packages.chardet.hebrewprober.LOGICAL_HEBREW_NAME",
  "requests.packages.chardet.hebrewprober.MIN_FINAL_CHAR_DISTANCE",
  "requests.packages.chardet.hebrewprober.MIN_MODEL_DISTANCE",
  "requests.packages.chardet.hebrewprober.NORMAL_KAF",
  "requests.packages.chardet.hebrewprober.NORMAL_MEM",
  "requests.packages.chardet.hebrewprober.NORMAL_NUN",
  "requests.packages.chardet.hebrewprober.NORMAL_PE",
  "requests.packages.chardet.hebrewprober.NORMAL_TSADI",
  "requests.packages.chardet.hebrewprober.VISUAL_HEBREW_NAME",
  "requests.packages.chardet.jisfreq",
  "requests.packages.chardet.jisfreq.JISCharToFreqOrder",
  "requests.packages.chardet.jisfreq.JIS_TABLE_SIZE",
  "requests.packages.chardet.jisfreq.JIS_TYPICAL_DISTRIBUTION_RATIO",
  "requests.packages.chardet.jpcntx",
  "requests.packages.chardet.jpcntx.DONT_KNOW",
  "requests.packages.chardet.jpcntx.ENOUGH_REL_THRESHOLD",
  "requests.packages.chardet.jpcntx.EUCJPContextAnalysis",
  "requests.packages.chardet.jpcntx.JapaneseContextAnalysis",
  "requests.packages.chardet.jpcntx.MAX_REL_THRESHOLD",
  "requests.packages.chardet.jpcntx.MINIMUM_DATA_THRESHOLD",
  "requests.packages.chardet.jpcntx.NUM_OF_CATEGORY",
  "requests.packages.chardet.jpcntx.SJISContextAnalysis",
  "requests.packages.chardet.jpcntx.jp2CharContext",
  "requests.packages.chardet.langbulgarianmodel",
  "requests.packages.chardet.langbulgarianmodel.BulgarianLangModel",
  "requests.packages.chardet.langbulgarianmodel.Latin5BulgarianModel",
  "requests.packages.chardet.langbulgarianmodel.Latin5_BulgarianCharToOrderMap",
  "requests.packages.chardet.langbulgarianmodel.Win1251BulgarianModel",
  "requests.packages.chardet.langbulgarianmodel.win1251BulgarianCharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel",
  "requests.packages.chardet.langcyrillicmodel.IBM855_CharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel.IBM866_CharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel.Ibm855Model",
  "requests.packages.chardet.langcyrillicmodel.Ibm866Model",
  "requests.packages.chardet.langcyrillicmodel.KOI8R_CharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel.Koi8rModel",
  "requests.packages.chardet.langcyrillicmodel.Latin5CyrillicModel",
  "requests.packages.chardet.langcyrillicmodel.MacCyrillicModel",
  "requests.packages.chardet.langcyrillicmodel.RussianLangModel",
  "requests.packages.chardet.langcyrillicmodel.Win1251CyrillicModel",
  "requests.packages.chardet.langcyrillicmodel.latin5_CharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel.macCyrillic_CharToOrderMap",
  "requests.packages.chardet.langcyrillicmodel.win1251_CharToOrderMap",
  "requests.packages.chardet.langgreekmodel",
  "requests.packages.chardet.langgreekmodel.GreekLangModel",
  "requests.packages.chardet.langgreekmodel.Latin7GreekModel",
  "requests.packages.chardet.langgreekmodel.Latin7_CharToOrderMap",
  "requests.packages.chardet.langgreekmodel.Win1253GreekModel",
  "requests.packages.chardet.langgreekmodel.win1253_CharToOrderMap",
  "requests.packages.chardet.langhebrewmodel",
  "requests.packages.chardet.langhebrewmodel.HebrewLangModel",
  "requests.packages.chardet.langhebrewmodel.Win1255HebrewModel",
  "requests.packages.chardet.langhebrewmodel.win1255_CharToOrderMap",
  "requests.packages.chardet.langhungarianmodel",
  "requests.packages.chardet.langhungarianmodel.HungarianLangModel",
  "requests.packages.chardet.langhungarianmodel.Latin2HungarianModel",
  "requests.packages.chardet.langhungarianmodel.Latin2_HungarianCharToOrderMap",
  "requests.packages.chardet.langhungarianmodel.Win1250HungarianModel",
  "requests.packages.chardet.langhungarianmodel.win1250HungarianCharToOrderMap",
  "requests.packages.chardet.langthaimodel",
  "requests.packages.chardet.langthaimodel.TIS620CharToOrderMap",
  "requests.packages.chardet.langthaimodel.TIS620ThaiModel",
  "requests.packages.chardet.langthaimodel.ThaiLangModel",
  "requests.packages.chardet.latin1prober",
  "requests.packages.chardet.latin1prober.ACO",
  "requests.packages.chardet.latin1prober.ACV",
  "requests.packages.chardet.latin1prober.ASC",
  "requests.packages.chardet.latin1prober.ASO",
  "requests.packages.chardet.latin1prober.ASS",
  "requests.packages.chardet.latin1prober.ASV",
  "requests.packages.chardet.latin1prober.CLASS_NUM",
  "requests.packages.chardet.latin1prober.FREQ_CAT_NUM",
  "requests.packages.chardet.latin1prober.Latin1ClassModel",
  "requests.packages.chardet.latin1prober.Latin1Prober",
  "requests.packages.chardet.latin1prober.Latin1_CharToClass",
  "requests.packages.chardet.latin1prober.OTH",
  "requests.packages.chardet.latin1prober.UDF",
  "requests.packages.chardet.mbcharsetprober",
  "requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber",
  "requests.packages.chardet.mbcsgroupprober",
  "requests.packages.chardet.mbcsgroupprober.MBCSGroupProber",
  "requests.packages.chardet.mbcssm",
  "requests.packages.chardet.mbcssm.BIG5_cls",
  "requests.packages.chardet.mbcssm.BIG5_st",
  "requests.packages.chardet.mbcssm.Big5CharLenTable",
  "requests.packages.chardet.mbcssm.Big5SMModel",
  "requests.packages.chardet.mbcssm.CP949CharLenTable",
  "requests.packages.chardet.mbcssm.CP949SMModel",
  "requests.packages.chardet.mbcssm.CP949_cls",
  "requests.packages.chardet.mbcssm.CP949_st",
  "requests.packages.chardet.mbcssm.EUCJPCharLenTable",
  "requests.packages.chardet.mbcssm.EUCJPSMModel",
  "requests.packages.chardet.mbcssm.EUCJP_cls",
  "requests.packages.chardet.mbcssm.EUCJP_st",
  "requests.packages.chardet.mbcssm.EUCKRCharLenTable",
  "requests.packages.chardet.mbcssm.EUCKRSMModel",
  "requests.packages.chardet.mbcssm.EUCKR_cls",
  "requests.packages.chardet.mbcssm.EUCKR_st",
  "requests.packages.chardet.mbcssm.EUCTWCharLenTable",
  "requests.packages.chardet.mbcssm.EUCTWSMModel",
  "requests.packages.chardet.mbcssm.EUCTW_cls",
  "requests.packages.chardet.mbcssm.EUCTW_st",
  "requests.packages.chardet.mbcssm.GB2312CharLenTable",
  "requests.packages.chardet.mbcssm.GB2312SMModel",
  "requests.packages.chardet.mbcssm.GB2312_cls",
  "requests.packages.chardet.mbcssm.GB2312_st",
  "requests.packages.chardet.mbcssm.SJISCharLenTable",
  "requests.packages.chardet.mbcssm.SJISSMModel",
  "requests.packages.chardet.mbcssm.SJIS_cls",
  "requests.packages.chardet.mbcssm.SJIS_st",
  "requests.packages.chardet.mbcssm.UCS2BECharLenTable",
  "requests.packages.chardet.mbcssm.UCS2BESMModel",
  "requests.packages.chardet.mbcssm.UCS2BE_cls",
  "requests.packages.chardet.mbcssm.UCS2BE_st",
  "requests.packages.chardet.mbcssm.UCS2LECharLenTable",
  "requests.packages.chardet.mbcssm.UCS2LESMModel",
  "requests.packages.chardet.mbcssm.UCS2LE_cls",
  "requests.packages.chardet.mbcssm.UCS2LE_st",
  "requests.packages.chardet.mbcssm.UTF8CharLenTable",
  "requests.packages.chardet.mbcssm.UTF8SMModel",
  "requests.packages.chardet.mbcssm.UTF8_cls",
  "requests.packages.chardet.mbcssm.UTF8_st",
  "requests.packages.chardet.sbcharsetprober",
  "requests.packages.chardet.sbcharsetprober.NEGATIVE_SHORTCUT_THRESHOLD",
  "requests.packages.chardet.sbcharsetprober.NUMBER_OF_SEQ_CAT",
  "requests.packages.chardet.sbcharsetprober.POSITIVE_CAT",
  "requests.packages.chardet.sbcharsetprober.POSITIVE_SHORTCUT_THRESHOLD",
  "requests.packages.chardet.sbcharsetprober.SAMPLE_SIZE",
  "requests.packages.chardet.sbcharsetprober.SB_ENOUGH_REL_THRESHOLD",
  "requests.packages.chardet.sbcharsetprober.SYMBOL_CAT_ORDER",
  "requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber",
  "requests.packages.chardet.sbcsgroupprober",
  "requests.packages.chardet.sbcsgroupprober.SBCSGroupProber",
  "requests.packages.chardet.sjisprober",
  "requests.packages.chardet.sjisprober.SJISProber",
  "requests.packages.chardet.universaldetector.MINIMUM_THRESHOLD",
  "requests.packages.chardet.universaldetector.UniversalDetector",
  "requests.packages.chardet.universaldetector.eEscAscii",
  "requests.packages.chardet.universaldetector.eHighbyte",
  "requests.packages.chardet.universaldetector.ePureAscii",
  "requests.packages.chardet.utf8prober",
  "requests.packages.chardet.utf8prober.ONE_CHAR_PROB",
  "requests.packages.chardet.utf8prober.UTF8Prober",
  "requests.packages.idna",
  "requests.packages.idna.IDNABidiError",
  "requests.packages.idna.IDNAError",
  "requests.packages.idna.InvalidCodepoint",
  "requests.packages.idna._alabel_prefix",
  "requests.packages.idna._combining_class",
  "requests.packages.idna._is_script",
  "requests.packages.idna._punycode",
  "requests.packages.idna._unicode_dots_re",
  "requests.packages.idna._unot",
  "requests.packages.idna._virama_combining_class",
  "requests.packages.idna.alabel",
  "requests.packages.idna.check_bidi",
  "requests.packages.idna.check_hyphen_ok",
  "requests.packages.idna.check_initial_combiner",
  "requests.packages.idna.check_label",
  "requests.packages.idna.check_nfc",
  "requests.packages.idna.codec",
  "requests.packages.idna.codec.Codec",
  "requests.packages.idna.codec.IncrementalDecoder",
  "requests.packages.idna.codec.IncrementalEncoder",
  "requests.packages.idna.codec.StreamReader",
  "requests.packages.idna.codec.StreamWriter",
  "requests.packages.idna.codec._unicode_dots_re",
  "requests.packages.idna.codec.getregentry",
  "requests.packages.idna.compat",
  "requests.packages.idna.compat.Codec",
  "requests.packages.idna.compat.IDNABidiError",
  "requests.packages.idna.compat.IDNAError",
  "requests.packages.idna.compat.IncrementalDecoder",
  "requests.packages.idna.compat.IncrementalEncoder",
  "requests.packages.idna.compat.InvalidCodepoint",
  "requests.packages.idna.compat.StreamReader",
  "requests.packages.idna.compat.StreamWriter",
  "requests.packages.idna.compat.ToASCII",
  "requests.packages.idna.compat.ToUnicode",
  "requests.packages.idna.compat._alabel_prefix",
  "requests.packages.idna.compat._combining_class",
  "requests.packages.idna.compat._is_script",
  "requests.packages.idna.compat._punycode",
  "requests.packages.idna.compat._unicode_dots_re",
  "requests.packages.idna.compat._unot",
  "requests.packages.idna.compat._virama_combining_class",
  "requests.packages.idna.compat.alabel",
  "requests.packages.idna.compat.check_bidi",
  "requests.packages.idna.compat.check_hyphen_ok",
  "requests.packages.idna.compat.check_initial_combiner",
  "requests.packages.idna.compat.check_label",
  "requests.packages.idna.compat.check_nfc",
  "requests.packages.idna.compat.decode",
  "requests.packages.idna.compat.encode",
  "requests.packages.idna.compat.getregentry",
  "requests.packages.idna.compat.nameprep",
  "requests.packages.idna.compat.ulabel",
  "requests.packages.idna.compat.unichr",
  "requests.packages.idna.compat.unicode",
  "requests.packages.idna.compat.uts46_remap",
  "requests.packages.idna.compat.valid_contextj",
  "requests.packages.idna.compat.valid_contexto",
  "requests.packages.idna.compat.valid_label_length",
  "requests.packages.idna.compat.valid_string_length",
  "requests.packages.idna.core",
  "requests.packages.idna.core.IDNABidiError",
  "requests.packages.idna.core.IDNAError",
  "requests.packages.idna.core.InvalidCodepoint",
  "requests.packages.idna.core._alabel_prefix",
  "requests.packages.idna.core._combining_class",
  "requests.packages.idna.core._is_script",
  "requests.packages.idna.core._punycode",
  "requests.packages.idna.core._unicode_dots_re",
  "requests.packages.idna.core._unot",
  "requests.packages.idna.core._virama_combining_class",
  "requests.packages.idna.core.alabel",
  "requests.packages.idna.core.check_bidi",
  "requests.packages.idna.core.check_hyphen_ok",
  "requests.packages.idna.core.check_initial_combiner",
  "requests.packages.idna.core.check_label",
  "requests.packages.idna.core.check_nfc",
  "requests.packages.idna.core.decode",
  "requests.packages.idna.core.encode",
  "requests.packages.idna.core.ulabel",
  "requests.packages.idna.core.unichr",
  "requests.packages.idna.core.unicode",
  "requests.packages.idna.core.uts46_remap",
  "requests.packages.idna.core.valid_contextj",
  "requests.packages.idna.core.valid_contexto",
  "requests.packages.idna.core.valid_label_length",
  "requests.packages.idna.core.valid_string_length",
  "requests.packages.idna.decode",
  "requests.packages.idna.encode",
  "requests.packages.idna.idnadata",
  "requests.packages.idna.idnadata.codepoint_classes",
  "requests.packages.idna.idnadata.joining_types",
  "requests.packages.idna.idnadata.scripts",
  "requests.packages.idna.intranges",
  "requests.packages.idna.intranges.intranges_contain",
  "requests.packages.idna.intranges.intranges_from_list",
  "requests.packages.idna.ulabel",
  "requests.packages.idna.unichr",
  "requests.packages.idna.unicode",
  "requests.packages.idna.uts46_remap",
  "requests.packages.idna.uts46data",
  "requests.packages.idna.uts46data._seg_0",
  "requests.packages.idna.uts46data._seg_1",
  "requests.packages.idna.uts46data._seg_2",
  "requests.packages.idna.uts46data._seg_3",
  "requests.packages.idna.uts46data._seg_4",
  "requests.packages.idna.uts46data._seg_5",
  "requests.packages.idna.uts46data._seg_6",
  "requests.packages.idna.uts46data._seg_7",
  "requests.packages.idna.uts46data._seg_8",
  "requests.packages.idna.uts46data._seg_9",
  "requests.packages.idna.uts46data.uts46data",
  "requests.packages.idna.valid_contextj",
  "requests.packages.idna.valid_contexto",
  "requests.packages.idna.valid_label_length",
  "requests.packages.idna.valid_string_length",
  "requests.packages.urllib3.HTTPConnectionPool",
  "requests.packages.urllib3.HTTPResponse",
  "requests.packages.urllib3.HTTPSConnectionPool",
  "requests.packages.urllib3.PoolManager",
  "requests.packages.urllib3.ProxyManager",
  "requests.packages.urllib3.Retry",
  "requests.packages.urllib3.Timeout",
  "requests.packages.urllib3.__all__",
  "requests.packages.urllib3.__author__",
  "requests.packages.urllib3.__license__",
  "requests.packages.urllib3.__version__",
  "requests.packages.urllib3._collections",
  "requests.packages.urllib3._collections.HTTPHeaderDict",
  "requests.packages.urllib3._collections.RLock",
  "requests.packages.urllib3._collections.RecentlyUsedContainer",
  "requests.packages.urllib3._collections._Null",
  "requests.packages.urllib3._collections.__all__",
  "requests.packages.urllib3.add_stderr_logger",
  "requests.packages.urllib3.connection",
  "requests.packages.urllib3.connection.BaseSSLError",
  "requests.packages.urllib3.connection.ConnectionError",
  "requests.packages.urllib3.connection.DummyConnection",
  "requests.packages.urllib3.connection.HTTPConnection",
  "requests.packages.urllib3.connection.HTTPSConnection",
  "requests.packages.urllib3.connection.RECENT_DATE",
  "requests.packages.urllib3.connection.UnverifiedHTTPSConnection",
  "requests.packages.urllib3.connection.VerifiedHTTPSConnection",
  "requests.packages.urllib3.connection._match_hostname",
  "requests.packages.urllib3.connection.log",
  "requests.packages.urllib3.connection.port_by_scheme",
  "requests.packages.urllib3.connection.ssl",
  "requests.packages.urllib3.connection_from_url",
  "requests.packages.urllib3.connectionpool",
  "requests.packages.urllib3.connectionpool.ConnectionPool",
  "requests.packages.urllib3.connectionpool.ConnectionPool.QueueCls",
  "requests.packages.urllib3.connectionpool.ConnectionPool.host",
  "requests.packages.urllib3.connectionpool.ConnectionPool.port",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.block",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.conn_kw",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.num_connections",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.num_requests",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.pool",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.proxy",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.proxy_headers",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.strict",
  "requests.packages.urllib3.connectionpool.HTTPConnectionPool.timeout",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.ConnectionCls",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.assert_fingerprint",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.assert_hostname",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.ca_certs",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.cert_file",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.cert_reqs",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.key_file",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.scheme",
  "requests.packages.urllib3.connectionpool.HTTPSConnectionPool.ssl_version",
  "requests.packages.urllib3.connectionpool._Default",
  "requests.packages.urllib3.connectionpool._blocking_errnos",
  "requests.packages.urllib3.connectionpool._ipv6_host",
  "requests.packages.urllib3.connectionpool.connection_from_url",
  "requests.packages.urllib3.connectionpool.log",
  "requests.packages.urllib3.connectionpool.xrange",
  "requests.packages.urllib3.contrib",
  "requests.packages.urllib3.contrib.appengine",
  "requests.packages.urllib3.contrib.appengine.AppEngineManager",
  "requests.packages.urllib3.contrib.appengine.AppEnginePlatformError",
  "requests.packages.urllib3.contrib.appengine.AppEnginePlatformWarning",
  "requests.packages.urllib3.contrib.appengine.is_appengine",
  "requests.packages.urllib3.contrib.appengine.is_local_appengine",
  "requests.packages.urllib3.contrib.appengine.is_prod_appengine",
  "requests.packages.urllib3.contrib.appengine.log",
  "requests.packages.urllib3.contrib.appengine.urlfetch",
  "requests.packages.urllib3.contrib.ntlmpool",
  "requests.packages.urllib3.contrib.ntlmpool.ConnectionCls",
  "requests.packages.urllib3.contrib.ntlmpool.NTLMConnectionPool",
  "requests.packages.urllib3.contrib.ntlmpool.QueueCls",
  "requests.packages.urllib3.contrib.ntlmpool.assert_fingerprint",
  "requests.packages.urllib3.contrib.ntlmpool.assert_hostname",
  "requests.packages.urllib3.contrib.ntlmpool.block",
  "requests.packages.urllib3.contrib.ntlmpool.ca_certs",
  "requests.packages.urllib3.contrib.ntlmpool.cert_file",
  "requests.packages.urllib3.contrib.ntlmpool.cert_reqs",
  "requests.packages.urllib3.contrib.ntlmpool.conn_kw",
  "requests.packages.urllib3.contrib.ntlmpool.host",
  "requests.packages.urllib3.contrib.ntlmpool.key_file",
  "requests.packages.urllib3.contrib.ntlmpool.log",
  "requests.packages.urllib3.contrib.ntlmpool.num_connections",
  "requests.packages.urllib3.contrib.ntlmpool.num_requests",
  "requests.packages.urllib3.contrib.ntlmpool.pool",
  "requests.packages.urllib3.contrib.ntlmpool.port",
  "requests.packages.urllib3.contrib.ntlmpool.proxy",
  "requests.packages.urllib3.contrib.ntlmpool.proxy_headers",
  "requests.packages.urllib3.contrib.ntlmpool.scheme",
  "requests.packages.urllib3.contrib.ntlmpool.ssl_version",
  "requests.packages.urllib3.contrib.ntlmpool.strict",
  "requests.packages.urllib3.contrib.ntlmpool.timeout",
  "requests.packages.urllib3.contrib.pyopenssl",
  "requests.packages.urllib3.contrib.pyopenssl.HAS_SNI",
  "requests.packages.urllib3.contrib.pyopenssl.PyOpenSSLContext",
  "requests.packages.urllib3.contrib.pyopenssl.SSL_WRITE_BLOCKSIZE",
  "requests.packages.urllib3.contrib.pyopenssl.WrappedSocket",
  "requests.packages.urllib3.contrib.pyopenssl.__all__",
  "requests.packages.urllib3.contrib.pyopenssl._dnsname_to_stdlib",
  "requests.packages.urllib3.contrib.pyopenssl._fileobject",
  "requests.packages.urllib3.contrib.pyopenssl._openssl_to_stdlib_verify",
  "requests.packages.urllib3.contrib.pyopenssl._openssl_versions",
  "requests.packages.urllib3.contrib.pyopenssl._stdlib_to_openssl_verify",
  "requests.packages.urllib3.contrib.pyopenssl._validate_dependencies_met",
  "requests.packages.urllib3.contrib.pyopenssl._verify_callback",
  "requests.packages.urllib3.contrib.pyopenssl.extract_from_urllib3",
  "requests.packages.urllib3.contrib.pyopenssl.get_subj_alt_name",
  "requests.packages.urllib3.contrib.pyopenssl.inject_into_urllib3",
  "requests.packages.urllib3.contrib.pyopenssl.log",
  "requests.packages.urllib3.contrib.pyopenssl.makefile",
  "requests.packages.urllib3.contrib.pyopenssl.orig_util_HAS_SNI",
  "requests.packages.urllib3.contrib.pyopenssl.orig_util_SSLContext",
  "requests.packages.urllib3.contrib.socks",
  "requests.packages.urllib3.contrib.socks.SOCKSConnection",
  "requests.packages.urllib3.contrib.socks.SOCKSHTTPConnectionPool",
  "requests.packages.urllib3.contrib.socks.SOCKSHTTPSConnection",
  "requests.packages.urllib3.contrib.socks.SOCKSProxyManager",
  "requests.packages.urllib3.contrib.socks.pools",
  "requests.packages.urllib3.contrib.socks.proxy",
  "requests.packages.urllib3.contrib.socks.ssl",
  "requests.packages.urllib3.disable_warnings",
  "requests.packages.urllib3.encode_multipart_formdata",
  "requests.packages.urllib3.exceptions",
  "requests.packages.urllib3.exceptions.BodyNotHttplibCompatible",
  "requests.packages.urllib3.exceptions.ClosedPoolError",
  "requests.packages.urllib3.exceptions.ConnectTimeoutError",
  "requests.packages.urllib3.exceptions.ConnectionError",
  "requests.packages.urllib3.exceptions.DecodeError",
  "requests.packages.urllib3.exceptions.DependencyWarning",
  "requests.packages.urllib3.exceptions.EmptyPoolError",
  "requests.packages.urllib3.exceptions.HTTPError",
  "requests.packages.urllib3.exceptions.HTTPWarning",
  "requests.packages.urllib3.exceptions.HeaderParsingError",
  "requests.packages.urllib3.exceptions.HostChangedError",
  "requests.packages.urllib3.exceptions.IncompleteRead",
  "requests.packages.urllib3.exceptions.InsecurePlatformWarning",
  "requests.packages.urllib3.exceptions.InsecureRequestWarning",
  "requests.packages.urllib3.exceptions.InvalidHeader",
  "requests.packages.urllib3.exceptions.LocationParseError",
  "requests.packages.urllib3.exceptions.LocationValueError",
  "requests.packages.urllib3.exceptions.MaxRetryError",
  "requests.packages.urllib3.exceptions.NewConnectionError",
  "requests.packages.urllib3.exceptions.PoolError",
  "requests.packages.urllib3.exceptions.ProtocolError",
  "requests.packages.urllib3.exceptions.ProxyError",
  "requests.packages.urllib3.exceptions.ProxySchemeUnknown",
  "requests.packages.urllib3.exceptions.ReadTimeoutError",
  "requests.packages.urllib3.exceptions.RequestError",
  "requests.packages.urllib3.exceptions.ResponseError",
  "requests.packages.urllib3.exceptions.ResponseNotChunked",
  "requests.packages.urllib3.exceptions.SNIMissingWarning",
  "requests.packages.urllib3.exceptions.SSLError",
  "requests.packages.urllib3.exceptions.SecurityWarning",
  "requests.packages.urllib3.exceptions.SubjectAltNameWarning",
  "requests.packages.urllib3.exceptions.SystemTimeWarning",
  "requests.packages.urllib3.exceptions.TimeoutError",
  "requests.packages.urllib3.exceptions.TimeoutStateError",
  "requests.packages.urllib3.exceptions.UnrewindableBodyError",
  "requests.packages.urllib3.fields",
  "requests.packages.urllib3.fields.RequestField",
  "requests.packages.urllib3.fields.format_header_param",
  "requests.packages.urllib3.fields.guess_content_type",
  "requests.packages.urllib3.filepost",
  "requests.packages.urllib3.filepost.choose_boundary",
  "requests.packages.urllib3.filepost.encode_multipart_formdata",
  "requests.packages.urllib3.filepost.iter_field_objects",
  "requests.packages.urllib3.filepost.iter_fields",
  "requests.packages.urllib3.filepost.writer",
  "requests.packages.urllib3.get_host",
  "requests.packages.urllib3.make_headers",
  "requests.packages.urllib3.packages",
  "requests.packages.urllib3.packages.__all__",
  "requests.packages.urllib3.packages.backports",
  "requests.packages.urllib3.packages.backports.makefile",
  "requests.packages.urllib3.packages.backports.makefile.backport_makefile",
  "requests.packages.urllib3.packages.ordered_dict",
  "requests.packages.urllib3.packages.ordered_dict.OrderedDict",
  "requests.packages.urllib3.packages.six",
  "requests.packages.urllib3.packages.six.BytesIO",
  "requests.packages.urllib3.packages.six.Iterator",
  "requests.packages.urllib3.packages.six.MAXSIZE",
  "requests.packages.urllib3.packages.six.Module_six_moves_urllib",
  "requests.packages.urllib3.packages.six.MovedAttribute",
  "requests.packages.urllib3.packages.six.MovedModule",
  "requests.packages.urllib3.packages.six.PY2",
  "requests.packages.urllib3.packages.six.PY3",
  "requests.packages.urllib3.packages.six.PY34",
  "requests.packages.urllib3.packages.six.StringIO",
  "requests.packages.urllib3.packages.six._LazyDescr",
  "requests.packages.urllib3.packages.six._LazyModule",
  "requests.packages.urllib3.packages.six._MovedItems",
  "requests.packages.urllib3.packages.six._SixMetaPathImporter",
  "requests.packages.urllib3.packages.six.__author__",
  "requests.packages.urllib3.packages.six.__package__",
  "requests.packages.urllib3.packages.six.__path__",
  "requests.packages.urllib3.packages.six.__version__",
  "requests.packages.urllib3.packages.six._add_doc",
  "requests.packages.urllib3.packages.six._assertCountEqual",
  "requests.packages.urllib3.packages.six._assertRaisesRegex",
  "requests.packages.urllib3.packages.six._assertRegex",
  "requests.packages.urllib3.packages.six._func_closure",
  "requests.packages.urllib3.packages.six._func_code",
  "requests.packages.urllib3.packages.six._func_defaults",
  "requests.packages.urllib3.packages.six._func_globals",
  "requests.packages.urllib3.packages.six._import_module",
  "requests.packages.urllib3.packages.six._importer",
  "requests.packages.urllib3.packages.six._meth_func",
  "requests.packages.urllib3.packages.six._meth_self",
  "requests.packages.urllib3.packages.six._moved_attributes",
  "requests.packages.urllib3.packages.six._print",
  "requests.packages.urllib3.packages.six._urllib_error_moved_attributes",
  "requests.packages.urllib3.packages.six._urllib_parse_moved_attributes",
  "requests.packages.urllib3.packages.six._urllib_request_moved_attributes",
  "requests.packages.urllib3.packages.six._urllib_response_moved_attributes",
  "requests.packages.urllib3.packages.six._urllib_robotparser_moved_attributes",
  "requests.packages.urllib3.packages.six.add_metaclass",
  "requests.packages.urllib3.packages.six.add_move",
  "requests.packages.urllib3.packages.six.advance_iterator",
  "requests.packages.urllib3.packages.six.assertCountEqual",
  "requests.packages.urllib3.packages.six.assertRaisesRegex",
  "requests.packages.urllib3.packages.six.assertRegex",
  "requests.packages.urllib3.packages.six.b",
  "requests.packages.urllib3.packages.six.callable",
  "requests.packages.urllib3.packages.six.class_types",
  "requests.packages.urllib3.packages.six.create_bound_method",
  "requests.packages.urllib3.packages.six.create_unbound_method",
  "requests.packages.urllib3.packages.six.exec_",
  "requests.packages.urllib3.packages.six.get_function_closure",
  "requests.packages.urllib3.packages.six.get_function_code",
  "requests.packages.urllib3.packages.six.get_function_defaults",
  "requests.packages.urllib3.packages.six.get_function_globals",
  "requests.packages.urllib3.packages.six.get_method_function",
  "requests.packages.urllib3.packages.six.get_method_self",
  "requests.packages.urllib3.packages.six.get_unbound_function",
  "requests.packages.urllib3.packages.six.indexbytes",
  "requests.packages.urllib3.packages.six.int2byte",
  "requests.packages.urllib3.packages.six.integer_types",
  "requests.packages.urllib3.packages.six.iterbytes",
  "requests.packages.urllib3.packages.six.iteritems",
  "requests.packages.urllib3.packages.six.iterkeys",
  "requests.packages.urllib3.packages.six.iterlists",
  "requests.packages.urllib3.packages.six.itervalues",
  "requests.packages.urllib3.packages.six.moves",
  "requests.packages.urllib3.packages.six.next",
  "requests.packages.urllib3.packages.six.print_",
  "requests.packages.urllib3.packages.six.python_2_unicode_compatible",
  "requests.packages.urllib3.packages.six.raise_from",
  "requests.packages.urllib3.packages.six.remove_move",
  "requests.packages.urllib3.packages.six.reraise",
  "requests.packages.urllib3.packages.six.string_types",
  "requests.packages.urllib3.packages.six.text_type",
  "requests.packages.urllib3.packages.six.u",
  "requests.packages.urllib3.packages.six.viewitems",
  "requests.packages.urllib3.packages.six.viewkeys",
  "requests.packages.urllib3.packages.six.viewvalues",
  "requests.packages.urllib3.packages.six.with_metaclass",
  "requests.packages.urllib3.packages.six.wraps",
  "requests.packages.urllib3.packages.ssl_match_hostname",
  "requests.packages.urllib3.packages.ssl_match_hostname.CertificateError",
  "requests.packages.urllib3.packages.ssl_match_hostname.__all__",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation.CertificateError",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation.__version__",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation._dnsname_match",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation._ipaddress_match",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation._to_unicode",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation.ipaddress",
  "requests.packages.urllib3.packages.ssl_match_hostname._implementation.match_hostname",
  "requests.packages.urllib3.packages.ssl_match_hostname.match_hostname",
  "requests.packages.urllib3.poolmanager",
  "requests.packages.urllib3.poolmanager.BasePoolKey",
  "requests.packages.urllib3.poolmanager.HTTPPoolKey",
  "requests.packages.urllib3.poolmanager.HTTPSPoolKey",
  "requests.packages.urllib3.poolmanager.PoolManager",
  "requests.packages.urllib3.poolmanager.PoolManager.pools",
  "requests.packages.urllib3.poolmanager.PoolManager.proxy",
  "requests.packages.urllib3.poolmanager.ProxyManager",
  "requests.packages.urllib3.poolmanager.SSL_KEYWORDS",
  "requests.packages.urllib3.poolmanager.__all__",
  "requests.packages.urllib3.poolmanager._default_key_normalizer",
  "requests.packages.urllib3.poolmanager.key_fn_by_scheme",
  "requests.packages.urllib3.poolmanager.log",
  "requests.packages.urllib3.poolmanager.pool_classes_by_scheme",
  "requests.packages.urllib3.poolmanager.proxy_from_url",
  "requests.packages.urllib3.proxy_from_url",
  "requests.packages.urllib3.request",
  "requests.packages.urllib3.response",
  "requests.packages.urllib3.response.DeflateDecoder",
  "requests.packages.urllib3.response.GzipDecoder",
  "requests.packages.urllib3.response.HTTPResponse",
  "requests.packages.urllib3.response._get_decoder",
  "requests.packages.urllib3.response.log",
  "requests.packages.urllib3.util",
  "requests.packages.urllib3.util.HAS_SNI",
  "requests.packages.urllib3.util.IS_PYOPENSSL",
  "requests.packages.urllib3.util.Retry",
  "requests.packages.urllib3.util.SSLContext",
  "requests.packages.urllib3.util.Timeout",
  "requests.packages.urllib3.util.Url",
  "requests.packages.urllib3.util.__all__",
  "requests.packages.urllib3.util.assert_fingerprint",
  "requests.packages.urllib3.util.connection",
  "requests.packages.urllib3.util.connection.HAS_IPV6",
  "requests.packages.urllib3.util.connection._has_ipv6",
  "requests.packages.urllib3.util.connection._set_socket_options",
  "requests.packages.urllib3.util.connection.allowed_gai_family",
  "requests.packages.urllib3.util.connection.create_connection",
  "requests.packages.urllib3.util.connection.is_connection_dropped",
  "requests.packages.urllib3.util.current_time",
  "requests.packages.urllib3.util.get_host",
  "requests.packages.urllib3.util.is_connection_dropped",
  "requests.packages.urllib3.util.is_fp_closed",
  "requests.packages.urllib3.util.make_headers",
  "requests.packages.urllib3.util.parse_url",
  "requests.packages.urllib3.util.request",
  "requests.packages.urllib3.util.request.ACCEPT_ENCODING",
  "requests.packages.urllib3.util.request._FAILEDTELL",
  "requests.packages.urllib3.util.request.make_headers",
  "requests.packages.urllib3.util.request.rewind_body",
  "requests.packages.urllib3.util.request.set_file_position",
  "requests.packages.urllib3.util.resolve_cert_reqs",
  "requests.packages.urllib3.util.resolve_ssl_version",
  "requests.packages.urllib3.util.response",
  "requests.packages.urllib3.util.response.assert_header_parsing",
  "requests.packages.urllib3.util.response.is_fp_closed",
  "requests.packages.urllib3.util.response.is_response_to_head",
  "requests.packages.urllib3.util.retry",
  "requests.packages.urllib3.util.retry.RequestHistory",
  "requests.packages.urllib3.util.retry.Retry",
  "requests.packages.urllib3.util.retry.log",
  "requests.packages.urllib3.util.selectors",
  "requests.packages.urllib3.util.selectors.BaseSelector",
  "requests.packages.urllib3.util.selectors.DefaultSelector",
  "requests.packages.urllib3.util.selectors.EVENT_READ",
  "requests.packages.urllib3.util.selectors.EVENT_WRITE",
  "requests.packages.urllib3.util.selectors.EpollSelector",
  "requests.packages.urllib3.util.selectors.HAS_SELECT",
  "requests.packages.urllib3.util.selectors.KqueueSelector",
  "requests.packages.urllib3.util.selectors.PollSelector",
  "requests.packages.urllib3.util.selectors.SelectSelector",
  "requests.packages.urllib3.util.selectors.SelectorError",
  "requests.packages.urllib3.util.selectors.SelectorKey",
  "requests.packages.urllib3.util.selectors._SYSCALL_SENTINEL",
  "requests.packages.urllib3.util.selectors._SelectorMapping",
  "requests.packages.urllib3.util.selectors._fileobj_to_fd",
  "requests.packages.urllib3.util.selectors._syscall_wrapper",
  "requests.packages.urllib3.util.selectors.monotonic",
  "requests.packages.urllib3.util.selectors.no_selector",
  "requests.packages.urllib3.util.split_first",
  "requests.packages.urllib3.util.ssl_",
  "requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS",
  "requests.packages.urllib3.util.ssl_.HASHFUNC_MAP",
  "requests.packages.urllib3.util.ssl_.IS_PYOPENSSL",
  "requests.packages.urllib3.util.ssl_.OP_NO_COMPRESSION",
  "requests.packages.urllib3.util.ssl_.OP_NO_SSLv2",
  "requests.packages.urllib3.util.ssl_.OP_NO_SSLv3",
  "requests.packages.urllib3.util.ssl_.SSLContext",
  "requests.packages.urllib3.util.ssl_._const_compare_digest",
  "requests.packages.urllib3.util.ssl_._const_compare_digest_backport",
  "requests.packages.urllib3.util.ssl_.assert_fingerprint",
  "requests.packages.urllib3.util.ssl_.create_urllib3_context",
  "requests.packages.urllib3.util.ssl_.resolve_cert_reqs",
  "requests.packages.urllib3.util.ssl_.resolve_ssl_version",
  "requests.packages.urllib3.util.ssl_.ssl_wrap_socket",
  "requests.packages.urllib3.util.ssl_wrap_socket",
  "requests.packages.urllib3.util.timeout",
  "requests.packages.urllib3.util.timeout.Timeout",
  "requests.packages.urllib3.util.timeout._Default",
  "requests.packages.urllib3.util.timeout.current_time",
  "requests.packages.urllib3.util.url",
  "requests.packages.urllib3.util.url.Url",
  "requests.packages.urllib3.util.url.get_host",
  "requests.packages.urllib3.util.url.parse_url",
  "requests.packages.urllib3.util.url.split_first",
  "requests.packages.urllib3.util.url.url_attrs",
  "requests.packages.urllib3.util.wait",
  "requests.packages.urllib3.util.wait._wait_for_io_events",
  "requests.packages.urllib3.util.wait.wait_for_read",
  "requests.packages.urllib3.util.wait.wait_for_write",
  "requests.packages.urllib3.util.wait_for_read",
  "requests.packages.urllib3.util.wait_for_write",
  "requests.patch",
  "requests.post",
  "requests.put",
  "requests.pyopenssl",
  "requests.request",
  "requests.session",
  "requests.sessions.REDIRECT_CACHE_SIZE",
  "requests.sessions.Session",
  "requests.sessions.merge_hooks",
  "requests.sessions.merge_setting",
  "requests.sessions.session",
  "requests.status_codes",
  "requests.status_codes._codes",
  "requests.status_codes.code",
  "requests.status_codes.codes",
  "requests.status_codes.title",
  "requests.status_codes.titles",
  "requests.structures",
  "requests.structures.CaseInsensitiveDict",
  "requests.structures.LookupDict",
  "requests.utils",
  "requests.utils.DEFAULT_CA_BUNDLE_PATH",
  "requests.utils.NETRC_FILES",
  "requests.utils.UNRESERVED_SET",
  "requests.utils._CLEAN_HEADER_REGEX_BYTE",
  "requests.utils._CLEAN_HEADER_REGEX_STR",
  "requests.utils._hush_pyflakes",
  "requests.utils._null",
  "requests.utils._null2",
  "requests.utils._null3",
  "requests.utils.add_dict_to_cookiejar",
  "requests.utils.address_in_network",
  "requests.utils.check_header_validity",
  "requests.utils.default_headers",
  "requests.utils.default_user_agent",
  "requests.utils.dict_from_cookiejar",
  "requests.utils.dict_to_sequence",
  "requests.utils.dotted_netmask",
  "requests.utils.from_key_val_list",
  "requests.utils.get_auth_from_url",
  "requests.utils.get_encoding_from_headers",
  "requests.utils.get_encodings_from_content",
  "requests.utils.get_environ_proxies",
  "requests.utils.get_netrc_auth",
  "requests.utils.get_unicode_from_response",
  "requests.utils.guess_filename",
  "requests.utils.guess_json_utf",
  "requests.utils.is_ipv4_address",
  "requests.utils.is_valid_cidr",
  "requests.utils.iter_slices",
  "requests.utils.parse_dict_header",
  "requests.utils.parse_header_links",
  "requests.utils.parse_list_header",
  "requests.utils.prepend_scheme_if_needed",
  "requests.utils.requote_uri",
  "requests.utils.rewind_body",
  "requests.utils.select_proxy",
  "requests.utils.should_bypass_proxies",
  "requests.utils.stream_decode_response_unicode",
  "requests.utils.super_len",
  "requests.utils.to_key_val_list",
  "requests.utils.unquote_header_value",
  "requests.utils.unquote_unreserved",
  "requests.utils.urldefragauth"
 ]
}