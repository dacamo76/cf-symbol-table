{
 "errors": {
  "coverage.disposition": {
   "exception": "Ran out of input",
   "traceback": [
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 122, in load_module",
    "    module_cache_item = parser_cache[hashed_grammar][file_io.path]",
    "KeyError: PosixPath('/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/third_party/typeshed/stdlib/3/os/path.pyi')",
    "",
    "During handling of the above exception, another exception occurred:",
    "",
    "Traceback (most recent call last):",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/symbol_exporter/symbol_inspection.py\", line 36, in single_file_extraction",
    "    path=file_name, project=jedi.Project(\"\".join(top_dir))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/helpers.py\", line 488, in wrapper",
    "    return func(self, line, column, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/__init__.py\", line 213, in complete",
    "    return completion.complete()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 169, in complete",
    "    cached_name, completion_names = self._complete_python(leaf)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 310, in _complete_python",
    "    completion_names += self._complete_global_scope()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/api/completion.py\", line 376, in _complete_global_scope",
    "    completion_names += filter.values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 93, in values",
    "    for name_key in self._used_names",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/utils.py\", line 16, in wrapper",
    "    return list(func(*args, **kwargs))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 160, in _convert_names",
    "    for name in names:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 95, in <genexpr>",
    "    _get_definition_names(self._used_names, name_key),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 93, in _break_check",
    "    reachable = _check_if(context, check_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 197, in _infer_node",
    "    value_set = context.infer_node(first_child)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 62, in wrapper",
    "    return func(param_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 519, in infer",
    "    values = dynamic_param_lookup(self.function_value, param.position_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 47, in wrapper",
    "    return func(function_value, param_index)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in dynamic_param_lookup",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/dynamic_params.py\", line 96, in <genexpr>",
    "    for arguments in arguments_list",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/param.py\", line 28, in infer",
    "    return self._lazy_value.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/lazy_value.py\", line 48, in infer",
    "    return self.context.infer_node(self.data)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 278, in infer_trailer",
    "    return atom_values.execute(args)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in execute",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 483, in <genexpr>",
    "    return ValueSet.from_sets(c.inference_state.execute(c, arguments) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 125, in wrapper",
    "    return call()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 107, in call",
    "    return callback(value, arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/pytest.py\", line 26, in wrapper",
    "    return callback(value, arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 119, in execute",
    "    value_set = value.py__call__(arguments=arguments)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/instance.py\", line 465, in py__call__",
    "    return function_execution.infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 350, in infer",
    "    return self.get_return_values()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/recursion.py\", line 87, in wrapper",
    "    result = func(self, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/value/function.py\", line 232, in get_return_values",
    "    check = flow_analysis.reachability_check(self, funcdef, r)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 217, in _infer_node",
    "    value_set = context.infer_node(element.children[-1])",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 43, in py__getattribute__",
    "    names = self.goto(name_or_str, position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 32, in goto",
    "    names = finder.filter_name(filters, name_or_str)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/finder.py\", line 36, in filter_name",
    "    names = filter.get(string_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 84, in get",
    "    _get_definition_names(self._used_names, name),",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 122, in _filter",
    "    return list(self._check_flows(names))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/filters.py\", line 137, in _check_flows",
    "    origin_scope=self._origin_scope",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 85, in reachability_check",
    "    return _break_check(context, value_scope, first_flow_scope, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 100, in _break_check",
    "    reachable = _check_if(context, flow_node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/flow_analysis.py\", line 120, in _check_if",
    "    types = context.infer_node(node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 254, in _infer_node",
    "    return infer_or_test(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 460, in infer_or_test",
    "    types = context.infer_node(next(iterator))",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 184, in _infer_node",
    "    return infer_atom(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 304, in infer_atom",
    "    return context.py__getattribute__(atom, position=position)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 75, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 738, in tree_name_to_values",
    "    types = infer_expr_stmt(context, node, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 376, in infer_expr_stmt",
    "    return _infer_expr_stmt(context, stmt, seek_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 409, in _infer_expr_stmt",
    "    value_set = context.infer_node(rhs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/context.py\", line 222, in infer_node",
    "    return infer_node(self, node)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 156, in infer_node",
    "    return _infer_node_if_inferred(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 169, in _infer_node_if_inferred",
    "    return _infer_node_cached(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 174, in _infer_node_cached",
    "    return _infer_node(context, element)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/debug.py\", line 81, in wrapper",
    "    return func(*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 82, in wrapper",
    "    return func(context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 208, in _infer_node",
    "    value_set = infer_trailer(context, value_set, trailer)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 273, in infer_trailer",
    "    name_or_str=node",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in py__getattribute__",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 492, in <genexpr>",
    "    return ValueSet.from_sets(c.py__getattribute__(*args, **kwargs) for c in self._set)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in py__getattribute__",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 426, in from_sets",
    "    for set_ in sets:",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/base_value.py\", line 80, in <genexpr>",
    "    values = ValueSet.from_sets(name.infer() for name in names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 648, in infer",
    "    inferred = super().infer()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/names.py\", line 284, in infer",
    "    self.tree_name",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/stdlib.py\", line 867, in wrapper",
    "    return func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/django.py\", line 177, in wrapper",
    "    result = func(inference_state, context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/syntax_tree.py\", line 744, in tree_name_to_values",
    "    types = imports.infer_import(context, tree_name)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/cache.py\", line 44, in wrapper",
    "    rv = function(obj, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 66, in infer_import",
    "    values = importer.follow()",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 297, in follow",
    "    self._inference_state, self.import_path, sys_path, self._module_context",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in import_module_by_names",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/imports.py\", line 383, in <listcomp>",
    "    ) for parent_module_value in value_set",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/__init__.py\", line 21, in wrapper",
    "    return built_functions[public_name](*args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/plugins/flask.py\", line 20, in wrapper",
    "    return callback(inference_state, import_names, module_context, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 127, in wrapper",
    "    parent_module_value, sys_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 148, in try_to_load_stub_cached",
    "    _try_to_load_stub(inference_state, import_names, *args, **kwargs)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 216, in _try_to_load_stub",
    "    m = _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 270, in _load_from_typeshed",
    "    import_names=import_names,",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 276, in _try_to_load_stub_from_file",
    "    stub_module_node = parse_stub_module(inference_state, file_io)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/gradual/typeshed.py\", line 293, in parse_stub_module",
    "    use_latest_grammar=True",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 200, in parse",
    "    return self.parse_and_get_code(*args, **kwargs)[0]",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/jedi/inference/__init__.py\", line 197, in parse_and_get_code",
    "    return grammar.parse(code=code, path=path, file_io=file_io, **kwargs), code",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/grammar.py\", line 114, in parse",
    "    module_node = load_module(self._hashed, file_io, cache_path=cache_path)",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 131, in load_module",
    "    cache_path=cache_path",
    "  File \"/usr/share/miniconda/envs/test/lib/python3.7/site-packages/parso/cache.py\", line 145, in _load_from_file_system",
    "    module_cache_item = pickle.load(f)",
    "EOFError: Ran out of input",
    ""
   ]
  }
 },
 "symbols": [
  "coverage.Coverage",
  "coverage.CoverageData",
  "coverage.CoverageException",
  "coverage.CoveragePlugin",
  "coverage.FileReporter",
  "coverage.FileTracer",
  "coverage.PyTracer",
  "coverage.__main__",
  "coverage.__main__.main",
  "coverage.__url__",
  "coverage.__version__",
  "coverage.annotate",
  "coverage.annotate.AnnotateReporter",
  "coverage.annotate.ensure_dir",
  "coverage.annotate.flat_rootname",
  "coverage.annotate.get_analysis_to_report",
  "coverage.annotate.isolate_module",
  "coverage.annotate.os",
  "coverage.backunittest",
  "coverage.backunittest.TestCase",
  "coverage.backunittest.unittest_has",
  "coverage.backward",
  "coverage.backward.BUILTINS",
  "coverage.backward.PYC_MAGIC_NUMBER",
  "coverage.backward.SimpleNamespace",
  "coverage.backward.StringIO",
  "coverage.backward.binary_bytes",
  "coverage.backward.byte_to_int",
  "coverage.backward.bytes_to_ints",
  "coverage.backward.code_object",
  "coverage.backward.configparser",
  "coverage.backward.env",
  "coverage.backward.get_thread_id",
  "coverage.backward.iitems",
  "coverage.backward.imp",
  "coverage.backward.import_local_file",
  "coverage.backward.importlib",
  "coverage.backward.importlib_util_find_spec",
  "coverage.backward.invalidate_import_caches",
  "coverage.backward.iternext",
  "coverage.backward.litems",
  "coverage.backward.path_types",
  "coverage.backward.range",
  "coverage.backward.reprlib",
  "coverage.backward.string_class",
  "coverage.backward.to_bytes",
  "coverage.backward.to_string",
  "coverage.backward.unicode_class",
  "coverage.backward.zip_longest",
  "coverage.bytecode",
  "coverage.bytecode.code_objects",
  "coverage.cmdline",
  "coverage.cmdline.BaseCoverageException",
  "coverage.cmdline.CMDS",
  "coverage.cmdline.CTracer",
  "coverage.cmdline.CmdOptionParser",
  "coverage.cmdline.Coverage",
  "coverage.cmdline.CoverageOptionParser",
  "coverage.cmdline.CoverageScript",
  "coverage.cmdline.ERR",
  "coverage.cmdline.ExceptionDuringRun",
  "coverage.cmdline.FAIL_UNDER",
  "coverage.cmdline.GLOBAL_ARGS",
  "coverage.cmdline.GlobalOptionParser",
  "coverage.cmdline.HELP_TOPICS",
  "coverage.cmdline.NoSource",
  "coverage.cmdline.OK",
  "coverage.cmdline.Opts",
  "coverage.cmdline.PyRunner",
  "coverage.cmdline._profile",
  "coverage.cmdline.env",
  "coverage.cmdline.info_formatter",
  "coverage.cmdline.info_header",
  "coverage.cmdline.line_counts",
  "coverage.cmdline.main",
  "coverage.cmdline.original_main",
  "coverage.cmdline.output_encoding",
  "coverage.cmdline.should_fail_under",
  "coverage.cmdline.show_help",
  "coverage.cmdline.unglob_args",
  "coverage.cmdline.unshell_list",
  "coverage.collector",
  "coverage.collector.CFileDisposition",
  "coverage.collector.CTracer",
  "coverage.collector.Collector",
  "coverage.collector.CoverageException",
  "coverage.collector.FileDisposition",
  "coverage.collector.PyTracer",
  "coverage.collector.env",
  "coverage.collector.isolate_module",
  "coverage.collector.litems",
  "coverage.collector.os",
  "coverage.collector.range",
  "coverage.collector.short_stack",
  "coverage.config",
  "coverage.config.CoverageConfig",
  "coverage.config.CoverageException",
  "coverage.config.DEFAULT_EXCLUDE",
  "coverage.config.DEFAULT_PARTIAL",
  "coverage.config.DEFAULT_PARTIAL_ALWAYS",
  "coverage.config.HandyConfigParser",
  "coverage.config.TomlConfigParser",
  "coverage.config.TomlDecodeError",
  "coverage.config.config_files_to_try",
  "coverage.config.configparser",
  "coverage.config.contract",
  "coverage.config.env",
  "coverage.config.iitems",
  "coverage.config.isolate_module",
  "coverage.config.os",
  "coverage.config.read_coverage_config",
  "coverage.config.string_class",
  "coverage.config.substitute_variables",
  "coverage.context",
  "coverage.context.combine_context_switchers",
  "coverage.context.qualname_from_frame",
  "coverage.context.should_start_context_test_function",
  "coverage.control",
  "coverage.control.Analysis",
  "coverage.control.AnnotateReporter",
  "coverage.control.CTracer",
  "coverage.control.Collector",
  "coverage.control.Coverage",
  "coverage.control.CoverageData",
  "coverage.control.CoverageException",
  "coverage.control.DebugControl",
  "coverage.control.DefaultValue",
  "coverage.control.FileReporter",
  "coverage.control.HtmlReporter",
  "coverage.control.InOrOut",
  "coverage.control.JsonReporter",
  "coverage.control.Numbers",
  "coverage.control.PathAliases",
  "coverage.control.Plugins",
  "coverage.control.PythonFileReporter",
  "coverage.control.SummaryReporter",
  "coverage.control.XmlReporter",
  "coverage.control._DEFAULT_DATAFILE",
  "coverage.control._prevent_sub_process_measurement",
  "coverage.control.abs_file",
  "coverage.control.bool_or_none",
  "coverage.control.combine_context_switchers",
  "coverage.control.combine_parallel_data",
  "coverage.control.decorate_methods",
  "coverage.control.disposition_debug_msg",
  "coverage.control.ensure_dir_for_file",
  "coverage.control.env",
  "coverage.control.iitems",
  "coverage.control.isolate_module",
  "coverage.control.join_regex",
  "coverage.control.os",
  "coverage.control.override_config",
  "coverage.control.patch_multiprocessing",
  "coverage.control.process_startup",
  "coverage.control.read_coverage_config",
  "coverage.control.relative_filename",
  "coverage.control.render_report",
  "coverage.control.set_relative_directory",
  "coverage.control.should_start_context_test_function",
  "coverage.control.show_calls",
  "coverage.control.string_class",
  "coverage.control.write_formatted_info",
  "coverage.coverage",
  "coverage.data",
  "coverage.data.CoverageData",
  "coverage.data.CoverageException",
  "coverage.data.add_data_to_hash",
  "coverage.data.combine_parallel_data",
  "coverage.data.file_be_gone",
  "coverage.data.line_counts",
  "coverage.debug",
  "coverage.debug.CALLS",
  "coverage.debug.CwdTracker",
  "coverage.debug.DebugControl",
  "coverage.debug.DebugOutputFile",
  "coverage.debug.FORCED_DEBUG",
  "coverage.debug.NoDebugging",
  "coverage.debug.OBJ_IDS",
  "coverage.debug.OBJ_ID_ATTR",
  "coverage.debug.SimpleReprMixin",
  "coverage.debug.StringIO",
  "coverage.debug._clean_stack_line",
  "coverage.debug.add_pid_and_tid",
  "coverage.debug.break_in_pudb",
  "coverage.debug.clipped_repr",
  "coverage.debug.decorate_methods",
  "coverage.debug.dump_stack_frames",
  "coverage.debug.filter_text",
  "coverage.debug.info_formatter",
  "coverage.debug.info_header",
  "coverage.debug.isolate_module",
  "coverage.debug.log",
  "coverage.debug.os",
  "coverage.debug.pp",
  "coverage.debug.reprlib",
  "coverage.debug.short_id",
  "coverage.debug.short_stack",
  "coverage.debug.show_calls",
  "coverage.debug.simplify",
  "coverage.debug.write_formatted_info",
  "coverage.disposition",
  "coverage.disposition.FileDisposition",
  "coverage.disposition.disposition_debug_msg",
  "coverage.disposition.disposition_init",
  "coverage.env",
  "coverage.env.C_TRACER",
  "coverage.env.IRONPYTHON",
  "coverage.env.JYTHON",
  "coverage.env.LINUX",
  "coverage.env.METACOV",
  "coverage.env.PY2",
  "coverage.env.PY3",
  "coverage.env.PYBEHAVIOR",
  "coverage.env.PYPY",
  "coverage.env.PYPYVERSION",
  "coverage.env.PYVERSION",
  "coverage.env.TESTING",
  "coverage.env.WINDOWS",
  "coverage.execfile",
  "coverage.execfile.BUILTINS",
  "coverage.execfile.CoverageException",
  "coverage.execfile.DummyLoader",
  "coverage.execfile.ExceptionDuringRun",
  "coverage.execfile.NoCode",
  "coverage.execfile.NoSource",
  "coverage.execfile.PYC_MAGIC_NUMBER",
  "coverage.execfile.PyRunner",
  "coverage.execfile.compile_unicode",
  "coverage.execfile.env",
  "coverage.execfile.find_module",
  "coverage.execfile.get_python_source",
  "coverage.execfile.imp",
  "coverage.execfile.importlib_util_find_spec",
  "coverage.execfile.isolate_module",
  "coverage.execfile.make_code_from_py",
  "coverage.execfile.os",
  "coverage.execfile.python_reported_file",
  "coverage.execfile.run_python_file",
  "coverage.execfile.run_python_module",
  "coverage.files",
  "coverage.files.CANONICAL_FILENAME_CACHE",
  "coverage.files.CoverageException",
  "coverage.files.FnmatchMatcher",
  "coverage.files.MAX_FLAT",
  "coverage.files.ModuleMatcher",
  "coverage.files.PathAliases",
  "coverage.files.RELATIVE_DIR",
  "coverage.files.TreeMatcher",
  "coverage.files._ACTUAL_PATH_CACHE",
  "coverage.files._ACTUAL_PATH_LIST_CACHE",
  "coverage.files.abs_file",
  "coverage.files.actual_path",
  "coverage.files.canonical_filename",
  "coverage.files.contract",
  "coverage.files.env",
  "coverage.files.find_python_files",
  "coverage.files.flat_rootname",
  "coverage.files.fnmatches_to_regex",
  "coverage.files.isabs_anywhere",
  "coverage.files.isolate_module",
  "coverage.files.join_regex",
  "coverage.files.os",
  "coverage.files.prep_patterns",
  "coverage.files.python_reported_file",
  "coverage.files.relative_directory",
  "coverage.files.relative_filename",
  "coverage.files.sep",
  "coverage.files.set_relative_directory",
  "coverage.files.unicode_class",
  "coverage.files.unicode_filename",
  "coverage.fullcoverage",
  "coverage.fullcoverage.encodings.FullCoverageTracer",
  "coverage.fullcoverage.encodings.parentdir",
  "coverage.html",
  "coverage.html.CoverageException",
  "coverage.html.Hasher",
  "coverage.html.HtmlDataGeneration",
  "coverage.html.HtmlReporter",
  "coverage.html.IncrementalChecker",
  "coverage.html.Numbers",
  "coverage.html.STATIC_PATH",
  "coverage.html.SimpleNamespace",
  "coverage.html.Templite",
  "coverage.html.add_data_to_hash",
  "coverage.html.data_filename",
  "coverage.html.ensure_dir",
  "coverage.html.env",
  "coverage.html.escape",
  "coverage.html.file_be_gone",
  "coverage.html.flat_rootname",
  "coverage.html.get_analysis_to_report",
  "coverage.html.iitems",
  "coverage.html.isolate_module",
  "coverage.html.os",
  "coverage.html.pair",
  "coverage.html.read_data",
  "coverage.html.write_html",
  "coverage.inorout",
  "coverage.inorout.CoverageException",
  "coverage.inorout.FileDisposition",
  "coverage.inorout.FnmatchMatcher",
  "coverage.inorout.InOrOut",
  "coverage.inorout.ModuleMatcher",
  "coverage.inorout.TreeMatcher",
  "coverage.inorout.canonical_filename",
  "coverage.inorout.canonical_path",
  "coverage.inorout.code_object",
  "coverage.inorout.disposition_init",
  "coverage.inorout.env",
  "coverage.inorout.find_python_files",
  "coverage.inorout.module_has_file",
  "coverage.inorout.module_is_namespace",
  "coverage.inorout.name_for_module",
  "coverage.inorout.prep_patterns",
  "coverage.inorout.source_for_file",
  "coverage.inorout.source_for_morf",
  "coverage.jsonreport",
  "coverage.jsonreport.JsonReporter",
  "coverage.jsonreport.Numbers",
  "coverage.jsonreport.__version__",
  "coverage.jsonreport.get_analysis_to_report",
  "coverage.misc",
  "coverage.misc.BaseCoverageException",
  "coverage.misc.CoverageException",
  "coverage.misc.DefaultValue",
  "coverage.misc.ExceptionDuringRun",
  "coverage.misc.Hasher",
  "coverage.misc.ISOLATED_MODULES",
  "coverage.misc.NoCode",
  "coverage.misc.NoSource",
  "coverage.misc.NotPython",
  "coverage.misc.StopEverything",
  "coverage.misc.USE_CONTRACTS",
  "coverage.misc._arcz_map",
  "coverage.misc._needs_to_implement",
  "coverage.misc.arcz_to_arcs",
  "coverage.misc.bool_or_none",
  "coverage.misc.contract",
  "coverage.misc.dummy_decorator_with_args",
  "coverage.misc.ensure_dir",
  "coverage.misc.ensure_dir_for_file",
  "coverage.misc.env",
  "coverage.misc.expensive",
  "coverage.misc.file_be_gone",
  "coverage.misc.filename_suffix",
  "coverage.misc.isolate_module",
  "coverage.misc.join_regex",
  "coverage.misc.new_contract",
  "coverage.misc.nice_pair",
  "coverage.misc.one_of",
  "coverage.misc.os",
  "coverage.misc.output_encoding",
  "coverage.misc.substitute_variables",
  "coverage.misc.to_bytes",
  "coverage.misc.unicode_class",
  "coverage.multiproc",
  "coverage.multiproc.OriginalProcess",
  "coverage.multiproc.PATCHED_MARKER",
  "coverage.multiproc.ProcessWithCoverage",
  "coverage.multiproc.Stowaway",
  "coverage.multiproc.contract",
  "coverage.multiproc.env",
  "coverage.multiproc.original_bootstrap",
  "coverage.multiproc.patch_multiprocessing",
  "coverage.numbits",
  "coverage.numbits._to_blob",
  "coverage.numbits.binary_bytes",
  "coverage.numbits.byte_to_int",
  "coverage.numbits.bytes_to_ints",
  "coverage.numbits.contract",
  "coverage.numbits.env",
  "coverage.numbits.new_contract",
  "coverage.numbits.num_in_numbits",
  "coverage.numbits.numbits_any_intersection",
  "coverage.numbits.numbits_intersection",
  "coverage.numbits.numbits_to_nums",
  "coverage.numbits.numbits_union",
  "coverage.numbits.nums_to_numbits",
  "coverage.numbits.register_sqlite_functions",
  "coverage.numbits.zip_longest",
  "coverage.optional",
  "coverage.optional.toml",
  "coverage.optional.without",
  "coverage.parser",
  "coverage.parser.AST_DUMP",
  "coverage.parser.ArcStart",
  "coverage.parser.AstArcAnalyzer",
  "coverage.parser.ByteParser",
  "coverage.parser.FunctionBlock",
  "coverage.parser.LoopBlock",
  "coverage.parser.NoSource",
  "coverage.parser.NodeList",
  "coverage.parser.NotPython",
  "coverage.parser.PythonParser",
  "coverage.parser.SKIP_DUMP_FIELDS",
  "coverage.parser.StopEverything",
  "coverage.parser.TryBlock",
  "coverage.parser._is_simple_value",
  "coverage.parser.ast_dump",
  "coverage.parser.bytes_to_ints",
  "coverage.parser.code_objects",
  "coverage.parser.compile_unicode",
  "coverage.parser.contract",
  "coverage.parser.env",
  "coverage.parser.generate_tokens",
  "coverage.parser.join_regex",
  "coverage.parser.neuter_encoding_declaration",
  "coverage.parser.new_contract",
  "coverage.parser.nice_pair",
  "coverage.parser.one_of",
  "coverage.parser.range",
  "coverage.parser.short_stack",
  "coverage.parser.string_class",
  "coverage.phystokens",
  "coverage.phystokens.COOKIE_RE",
  "coverage.phystokens.CachedTokenizer",
  "coverage.phystokens._source_encoding_py2",
  "coverage.phystokens._source_encoding_py3",
  "coverage.phystokens.compile_unicode",
  "coverage.phystokens.contract",
  "coverage.phystokens.env",
  "coverage.phystokens.generate_tokens",
  "coverage.phystokens.iternext",
  "coverage.phystokens.neuter_encoding_declaration",
  "coverage.phystokens.phys_tokens",
  "coverage.phystokens.source_encoding",
  "coverage.phystokens.source_token_lines",
  "coverage.phystokens.unicode_class",
  "coverage.plugin",
  "coverage.plugin.CoveragePlugin",
  "coverage.plugin.FileReporter",
  "coverage.plugin.FileTracer",
  "coverage.plugin._needs_to_implement",
  "coverage.plugin.contract",
  "coverage.plugin.files",
  "coverage.plugin_support",
  "coverage.plugin_support.CoverageException",
  "coverage.plugin_support.CoveragePlugin",
  "coverage.plugin_support.DebugFileReporterWrapper",
  "coverage.plugin_support.DebugFileTracerWrapper",
  "coverage.plugin_support.DebugPluginWrapper",
  "coverage.plugin_support.FileReporter",
  "coverage.plugin_support.FileTracer",
  "coverage.plugin_support.LabelledDebug",
  "coverage.plugin_support.Plugins",
  "coverage.plugin_support.isolate_module",
  "coverage.plugin_support.os",
  "coverage.process_startup",
  "coverage.python",
  "coverage.python.CoverageException",
  "coverage.python.FileReporter",
  "coverage.python.NoSource",
  "coverage.python.PythonFileReporter",
  "coverage.python.PythonParser",
  "coverage.python.contract",
  "coverage.python.env",
  "coverage.python.expensive",
  "coverage.python.files",
  "coverage.python.get_python_source",
  "coverage.python.get_zip_bytes",
  "coverage.python.isolate_module",
  "coverage.python.join_regex",
  "coverage.python.os",
  "coverage.python.read_python_source",
  "coverage.python.source_encoding",
  "coverage.python.source_for_file",
  "coverage.python.source_for_morf",
  "coverage.python.source_token_lines",
  "coverage.pytracer",
  "coverage.pytracer.PyTracer",
  "coverage.pytracer.YIELD_VALUE",
  "coverage.pytracer.env",
  "coverage.report",
  "coverage.report.CoverageException",
  "coverage.report.FnmatchMatcher",
  "coverage.report.NoSource",
  "coverage.report.NotPython",
  "coverage.report.ensure_dir_for_file",
  "coverage.report.env",
  "coverage.report.file_be_gone",
  "coverage.report.get_analysis_to_report",
  "coverage.report.prep_patterns",
  "coverage.report.render_report",
  "coverage.results",
  "coverage.results.Analysis",
  "coverage.results.CoverageException",
  "coverage.results.Numbers",
  "coverage.results.SimpleReprMixin",
  "coverage.results._line_ranges",
  "coverage.results.contract",
  "coverage.results.format_lines",
  "coverage.results.iitems",
  "coverage.results.nice_pair",
  "coverage.results.should_fail_under",
  "coverage.sqldata",
  "coverage.sqldata.CoverageData",
  "coverage.sqldata.CoverageException",
  "coverage.sqldata.NoDebugging",
  "coverage.sqldata.PathAliases",
  "coverage.sqldata.SCHEMA",
  "coverage.sqldata.SCHEMA_VERSION",
  "coverage.sqldata.SimpleReprMixin",
  "coverage.sqldata.SqliteDb",
  "coverage.sqldata.__version__",
  "coverage.sqldata._regexp",
  "coverage.sqldata.clipped_repr",
  "coverage.sqldata.contract",
  "coverage.sqldata.file_be_gone",
  "coverage.sqldata.filename_suffix",
  "coverage.sqldata.get_thread_id",
  "coverage.sqldata.iitems",
  "coverage.sqldata.isolate_module",
  "coverage.sqldata.numbits_to_nums",
  "coverage.sqldata.numbits_union",
  "coverage.sqldata.nums_to_numbits",
  "coverage.sqldata.os",
  "coverage.sqldata.to_bytes",
  "coverage.sqldata.to_string",
  "coverage.summary",
  "coverage.summary.CoverageException",
  "coverage.summary.NotPython",
  "coverage.summary.Numbers",
  "coverage.summary.SummaryReporter",
  "coverage.summary.env",
  "coverage.summary.get_analysis_to_report",
  "coverage.summary.output_encoding",
  "coverage.templite",
  "coverage.templite.CodeBuilder",
  "coverage.templite.Templite",
  "coverage.templite.env",
  "coverage.tomlconfig",
  "coverage.tomlconfig.CoverageException",
  "coverage.tomlconfig.TomlConfigParser",
  "coverage.tomlconfig.TomlDecodeError",
  "coverage.tomlconfig.configparser",
  "coverage.tomlconfig.env",
  "coverage.tomlconfig.path_types",
  "coverage.tomlconfig.substitute_variables",
  "coverage.tracer.CFileDisposition",
  "coverage.version",
  "coverage.version.__url__",
  "coverage.version.__version__",
  "coverage.version._make_url",
  "coverage.version._make_version",
  "coverage.version.version_info",
  "coverage.version_info",
  "coverage.xmlreport",
  "coverage.xmlreport.DTD_URL",
  "coverage.xmlreport.XmlReporter",
  "coverage.xmlreport.__url__",
  "coverage.xmlreport.__version__",
  "coverage.xmlreport.env",
  "coverage.xmlreport.files",
  "coverage.xmlreport.get_analysis_to_report",
  "coverage.xmlreport.iitems",
  "coverage.xmlreport.isolate_module",
  "coverage.xmlreport.os",
  "coverage.xmlreport.rate",
  "coverage.xmlreport.serialize_xml"
 ]
}